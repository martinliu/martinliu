# 将 Hubo 博客构建后部署到 Github Pages
name: Deploy Hugo Blog

# 在 master 主干分支的任何 push 事件都会触发本 DevOps 工作流水线
#on: push

# 在pr发生的时候这个Action才会触发
on: pull_request

# 以下是本串行执行工作流的所有组成部分
jobs:
  # 这里只定义了一个多步骤的作业
  build-deploy-to-github-pages:
    # 将后续的所有工作步骤都运行在最新版的 ubuntu 操作系统容器中
    runs-on: ubuntu-latest

    # 所有步骤Actions的定义如下
    steps:
      # Step 1 - Checks-out Hugo 博客代码库到 $GITHUB_WORKSPACE
      - name: Checkout blog code repo
        uses: actions/checkout@v2 # 这是 Github 官方提供的一个Action模块
        with:
          submodules: true # 同步更新所使用的 Hugo 模板
          fetch-depth: 0 # 更新到该模板最新的版本

      # Step 2 - 配置最新版本的 Hugo 环境
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2 # 这是 Github Actions 市场中的一个Action模块
        with:
          hugo-version: 'latest' # 选择最新版本，或者特定版本

      # Step 3 - 清理代码库中 public 目录中旧的内容
      - name: Clean public directory
        run: rm -rf public # 彻底删除这个目录

      # Step 4 - 用最新版本的 Hugo 构建个人博客站点
      - name: Build blog site
        run: hugo --minify

      # Step 5 - 创建用于私有域名所需要的 CNAME 文件 【这是 github-page 定制化域名的需求，这次不需要。
      #- name: Create CNAME file
      #  run: echo 'martinliu.cn' > public/CNAME

      # Step 6 - 将构建好的博客站点推送发布到 gh-pages 分支
      - name: Deploy blog to Github-pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.DEPLOY_KEY }}
          publish_dir: ./public

      # Step 7 - gh-pages 目前是备用环境，这个 gh-pages 分支的任何更新都会被 CloudFlare发布到 Pages CDN中，完成最后到生产环境发布。
