<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>开源 on DevOps &amp; SRE Blog</title>
    <link>https://martinliu.cn/tags/%E5%BC%80%E6%BA%90/</link>
    <description>Recent content in 开源 on DevOps &amp; SRE Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 17 May 2015 06:29:33 +0000</lastBuildDate><atom:link href="https://martinliu.cn/tags/%E5%BC%80%E6%BA%90/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RedHat互联网平台解决方案</title>
      <link>https://martinliu.cn/2015/05/17/redhate4ba92e88194e7bd91e5b9b3e58fb0e8a7a3e586b3e696b9e6a188/</link>
      <pubDate>Sun, 17 May 2015 06:29:33 +0000</pubDate>
      
      <guid>https://martinliu.cn/2015/05/17/redhate4ba92e88194e7bd91e5b9b3e58fb0e8a7a3e586b3e696b9e6a188/</guid>
      <description>ppt点这里下载：[su_button target=&amp;ldquo;blank&amp;rdquo; style=&amp;ldquo;stroked&amp;rdquo; size=&amp;ldquo;2&amp;rdquo; icon=&amp;ldquo;icon: cloud-download&amp;rdquo;]下载[/su_button]
参考文档： AS深圳2014演讲PPT最终稿 http://pan.baidu.com/s/1i3KQFRJ QCon北京2015（PPT） http://pan.baidu.com/s/1sj2t1yl 这两个目录里面干货还是不少，可以下载了慢慢看。

学习了一写文档后，逐渐对互联网公司的架构挑战需求和现状有了一些了解。下面先聊下这方面的一些理解。
中国规模交易量 什么叫中国规模交易量，以淘宝2014-11-11 双十一当天的数据举例：
[su_list icon=&amp;ldquo;icon: rocket&amp;rdquo;]
  交易创建 80000笔/秒
  支付 38000笔/秒
  24小时完成交易额 571亿元人民币 // 93 亿美元
  [/su_list]
乍一看这个数字可能没什么感觉，可以比较一下美国的情况。全美所有的传统商场在“黑色星期五”一天的销售也仅为91亿美元，即使加上网络销售的24亿美元也比天猫“双十一”多不了太多。也就是说，美国黑五当天全网的电商是中国淘宝/天猫一家的四分之一。
因此中国人口基数大，网民数量大，假如您能激起大众的兴趣的话，你是不缺访问量的。对于意外的大规模的峰值访问量的处理，如果系统架构和应用没有提前经过特别的架构调整、优化；用膝盖都能想到系统挂掉、基础架构崩溃、交易数据出错是必然的事情。
理解到这个潜在的风险、需求和调整，我们所有设计和从事IT基础架构技术服务的人，可以想想，不向前看，不向BAT学习，不站在他们的肩膀上设计和调整自己的应用的话。想保证系统平安，除非业务是失败的业务（没有流量），否则没有平安可言。
架构特点 且不说马云家系统已经多么牛叉，我们看下京东的架构，我们也可以看到其架构设计在两个维度都非常清晰到位。业务架构维度上尽可能的松耦合，所有业务单元分解清晰，貌似莫名的遵循了分布式架构的要求；这样每个业务单元都可以对IT资源的消耗联动，弹性的供给必要的业务处理能力。IT架构维度上分解为三个层次：应用架构、数据架构、基础架构。基本上JD的这个PPT改变了我对这个企业的印象。从我的职业经验告诉我，这份PPT中规中矩，比较专业，堪称教科书式的架构设计。相对马云家的架构师的PPT图画的比较豪放，风格不同。JD这份PPT下载在这里。
[su_button url=&amp;ldquo;http://pan.baidu.com/s/1o6MI0t0&amp;rdquo; target=&amp;ldquo;blank&amp;rdquo; style=&amp;ldquo;stroked&amp;rdquo; size=&amp;ldquo;2&amp;rdquo; icon=&amp;ldquo;icon: cloud-download&amp;rdquo;]AS深圳2014 京东架构设计-吴博[/su_button]
除了分层细致设计业务架构之外，我们还能看到，电商公司多使用多数据中心多活的模式并发处理海量交易量，每个数据中心都可以处理全业务，都能在灾备和并行处理上一石二鸟。这和我们高贵的传统企业不同，他们往往可以实现同城双中心运行，异地数据中心往往是灾备中心；有些灾备切换并不是全业务的切换，有些灾备中只用于灾备切换演练，并不真的运行业务；有些异地灾备中心也会和主数据中心中的一部分业务做周期性的切换运行。这些高贵的客户往往把核心的数据放在主机上，这在他们想扩展到3个或者更多个数据中心的时候，略显尴尬；新增的数据中心也要配置一套新主机系统么？新的主机上数据和应用怎样快速迁移过来？需要多长时间？数据同步的和其他两个数据中心一致么？这些问题的回答都不简单？主机硬件固然是贵？但是所有问题都解决周全的话，可能更贵。
全新的纯X86的架构就在面前，BAT已经证明了它和开源技术组合在一起就是多快好省的架构。因此，IT架构的转型也成了必然选择。试想转型之后的机房，每个机架都是标准化的工作单元，它可能是几种类型：纯物理机计算节点、纯虚拟机计算节点（服务器虚拟化或者OpenStack等）、纯物理机存储节点（软件定义存储）；或运行容器的物理机或者虚拟机。另外机架上的网络设备和核心网络设备必然有他们自己的设计。这是我的一个猜测，有机会还需要和BAT的人多了解。
开源技术 BAT用到的开源技术真的是不甚枚举，也没有必要逐一分析。基本上各个领域里从开发堆栈、到架构堆栈和运维管理堆栈；各个方面的前几位的项目都有实践和应用。
红帽 那么红帽的互联网平台解决方案是什么？红帽的定位是基础架构技术厂商，因此红帽的全套技术框架就是它的互联网解决方案。如下图所示。

有些产品模块需要稍微说明一下，方便和开源项目对应起来。
[su_list icon=&amp;ldquo;icon: linux&amp;rdquo;]
  Red Hat Storage server / ICE : Gluster, Ceph</description>
    </item>
    
    <item>
      <title>开源服务器的时代真到了？</title>
      <link>https://martinliu.cn/2014/02/08/e5bc80e6ba90e69c8de58aa1e599a8e79a84e697b6e4bba3e79c9fe588b0e4ba86efbc9f/</link>
      <pubDate>Sat, 08 Feb 2014 03:17:37 +0000</pubDate>
      
      <guid>https://martinliu.cn/2014/02/08/e5bc80e6ba90e69c8de58aa1e599a8e79a84e697b6e4bba3e79c9fe588b0e4ba86efbc9f/</guid>
      <description>&lt;p&gt;今天广为关注的的新闻末过Facebook的单人管理上万服务器。上网看了一下此新闻的出处：&lt;a href=&#34;http://www.datacenterknowledge.com/archives/2013/11/20/facebook-ops-staffer-manages-20000-servers/&#34;&gt;http://www.datacenterknowledge.com/archives/2013/11/20/facebook-ops-staffer-manages-20000-servers/ &lt;/a&gt; 本文的描述如下：Delfina Eberly, Director of Data Center Operations, Facebook, presented the Tuesday morning keynote about optimizing data center operations. In terms of hardware, Facebook, because it runs such an enormous volume of servers, focuses on serviceability, including starting from the ground up by influencing server design to ensure easiest and least time consuming methods to repair equipment in the data hall.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
