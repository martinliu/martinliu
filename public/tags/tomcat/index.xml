<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tomcat on Hugo Future Imperfect Slim em português</title>
    <link>https://example.com/tags/tomcat/</link>
    <description>Recent content in Tomcat on Hugo Future Imperfect Slim em português</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 07 May 2011 10:31:36 +0000</lastBuildDate><atom:link href="https://example.com/tags/tomcat/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>让Remedy飞一会</title>
      <link>https://example.com/2011/05/07/let-remedy-ars-fly-2/</link>
      <pubDate>Sat, 07 May 2011 10:31:36 +0000</pubDate>
      
      <guid>https://example.com/2011/05/07/let-remedy-ars-fly-2/</guid>
      <description>Remedy应用的性能优化是一个在系统建设过程中需要长期关注的问题，而不是在上线的前一天晚上去解决的问题，我也碰到过很棘手的性能问题，它确实爆发了，而且恰好在上线前夕爆发；之后感觉除了点背之外，感觉比较遗憾的是：为啥这个性能问题不早点爆发！
那么如何持续改进Remedy的性能？首先是硬件环境的准备情况，是否能在项目开始的第一天，就把开发，测试，生产环境统一装好。而不是到上线的前夕才去动生产环境。甚至于有条件的情况下，可不可以直接在生产环境上做开发，这样做的好处：让生产环境上性能优化的时间周期和机会尽可能的多，尽可能的长。当然这种机会毕竟不多，那么是否可以做到生产环境和开发环境的尽早的同步，也就是说：在开发到了一个小的阶段的时候，生产环境就可能就绪，就可以使用，这样把未成型的系统先部署上去，以便有机会做多次的生产系统性能调优。比较生产系统的性能最优化是项目的一大目标，不能等到最后才去仓促应战。曾经听说某行流程平台上线的第二天就挂了一次，这都是血淋淋的教训。总结一下：尽早的建设生产系统，优化生产系统，把开发好的那部分程序尽早迁移到生产上，长期的追逐系统性能，甚至于在生产环境上对此系统做压力测试。这些工作如果能够做的话，我想在上线日我们一定不会紧张。
如何追逐测试系统的性能。可以使用Web profiling工具如Fiddler。使用这种工具对某些特定操作持续的测试，把每次的测试结果保存下来，把时间记录到一个表格中。可以考虑测试如下内容：用户登录、打开事件控制台、创建一个事件单、搜索事件单等等，其他流程也类似。保证每次点击的次数都相同。其实从Fildder的分析数据中也可能得到很有价值的数据，如：那个Web调用的时间消耗最长，那些Web资源的请求出错。找出时间消耗做多的调用，就可以有针对性的优化应用了。总之：使用一种工具，在开发的整个过程中持续测试和优化，记录所有测试结果，这样在上线前对系统的性就能有客观参考依据。
另外要注意Remedy系统是一个标准的3层架构应用，你需要在系统调优的时候，有这样几种人的帮助：压力测试工具高手、JVM调优专家、数据库调优专家和Remed性能调优专家。还需要参考下列的参数配置。
Mid-tier优化参数建议 关于Mid-tier的一点建议，目前普通使用的Java应用服务器都是Tomcat，我一向是开源软件的粉丝，但是，还是建议如果有条件的话，还是上商业的产品，如Weblogic或者Websphere。这样可以获得能多一点的支持。 鉴于大多数系统还都是用的BMC的产品自带的Tomcat，下面是一些建议的参数配置。
1-HTTP keep-alive Keep-alive count: infinite (minimum 5000) Connection timeout:90000 ms (minimum 60000 ms)
2-JVM settings JVM heap：-Xms1024m –Xmx1024m MaxPermSize：-XX:MaxPermSize=256m 以Windows系统为例，可以使用Tomcat的配置界面工具，配置这两个参数。
3-Threads configuration of the application server hosting the mid tier maxThreads：500 acceptCount：100
关于1和3的 参数文件：tomcat dir/conf/sever.xml 的实例代码： [xml]
&amp;lt;Connector URIEncoding=&amp;ldquo;UTF-8&amp;rdquo; acceptCount=&amp;ldquo;100&amp;rdquo; connectionTimeout=&amp;ldquo;90000&amp;rdquo;
maxHttpHeaderSize=&amp;ldquo;8192&amp;rdquo; maxKeepAliveRequests=&amp;quot;-1&amp;quot; maxThreads=&amp;ldquo;500&amp;rdquo;
port=&amp;ldquo;80&amp;rdquo; protocol=&amp;ldquo;HTTP/1.1&amp;rdquo; redirectPort=&amp;ldquo;8443&amp;rdquo;/&amp;gt;
[/xml]
以上参数配置并不是万能的，只是给出一个优化配置的基础，以此为起点调起来可能会更靠谱。
Fine tuning the mid tier Mid tier parameter or service： Recommended value Enable Cache Persistence：Always on for a production environment Prefetch or preload service： Use prefetch only when a specific set of AR System forms are known.</description>
    </item>
    
    <item>
      <title>MartinMark for July 7th</title>
      <link>https://example.com/2009/07/07/martinmark-for-july-7th/</link>
      <pubDate>Tue, 07 Jul 2009 01:51:35 +0000</pubDate>
      
      <guid>https://example.com/2009/07/07/martinmark-for-july-7th/</guid>
      <description>The Apache Tomcat 5.5 Servlet/JSP Container - Load Balancer HOW-TO  [原创] Apache + Tomcat + Load Balancing - ChinaUnix.net  Clustering and Load Balancing in Tomcat 5, Part 1 - O&amp;rsquo;Reilly Media  How to test web load balance  Fronting Tomcat with Apache or IIS - Best practices  The Apache Tomcat Connector - Webserver HowTo IIS HowTo I will try to implement this load balancer (Tomcat and Apache/IIS)</description>
    </item>
    
    <item>
      <title>Tomcat压力测试-挺住200并发</title>
      <link>https://example.com/2009/07/04/tomcate58e8be58a9be6b58be8af95-e68cbae4bd8f200e5b9b6e58f91/</link>
      <pubDate>Sat, 04 Jul 2009 05:37:57 +0000</pubDate>
      
      <guid>https://example.com/2009/07/04/tomcate58e8be58a9be6b58be8af95-e68cbae4bd8f200e5b9b6e58f91/</guid>
      <description>最近在CCB的测试中有一项是住系统登陆页面的压力测试。我一直就很担心是否能通过压力测试，因为一个同事告诉我上次他的结果是80就不行了。总结一下，我这次成功的原因主要就是两个地方：
1）设置Tomcat启动和最大内存使用都是1500MB
2）修改server.xml中关于连接数等参数(回头贴出我的那些配置内容)
我的服务器配置如下：
Dell 2950 1C4核，8GB内存，单块136GB硬盘，Windows2003系统，JDK1.6，Tomcat 5.5.21
另外，我一直以为Loadrunner需要真实Lic文件才能用，没想到的是，我随便在网上搜了一个也能用，真是神奇啊！ 不过还是反对盗版哈哈:)</description>
    </item>
    
    <item>
      <title>For tomcat benchmark testing</title>
      <link>https://example.com/2009/07/04/for-tomcat-benchmark-testing/</link>
      <pubDate>Sat, 04 Jul 2009 05:36:03 +0000</pubDate>
      
      <guid>https://example.com/2009/07/04/for-tomcat-benchmark-testing/</guid>
      <description>Tomcat Configuration 查看一下可以配置的参数设置JVM的参数Setting JVM Options for Tomcat
Edit the /usr/locat/apache-tomcat/bin/catalina.sh file and add the JVM options to the JAVA_OPTS environment variable.JVM Option Value Description
-Xmx 4g The maximum Java heap size.
-Xms 4g The initial Java heap size.
-Xmn 1g The size of young generation.
-XX:+UseParallelGC – To use parallel garbage collection for scavenges.
-XX:PermSize 50m The initial size of permanent generation.
注释：上面两个4g的值，我没试过，我用8GB内存windows的机器1.5GB能启动，超过了Tomcat服务就启动不了了。
配置Tomcat Connector Attributes
Edit the /usr/locat/apache-tomcat/conf/server.xml file and add the attributes listed in Table 3 to the Connector element.</description>
    </item>
    
  </channel>
</rss>
