<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tools on Hugo Future Imperfect Slim em português</title>
    <link>https://example.com/tags/tools/</link>
    <description>Recent content in Tools on Hugo Future Imperfect Slim em português</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 21 Jan 2008 17:34:00 +0000</lastBuildDate><atom:link href="https://example.com/tags/tools/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>网管系统的测试工具</title>
      <link>https://example.com/2008/01/21/trap-tools/</link>
      <pubDate>Mon, 21 Jan 2008 17:34:00 +0000</pubDate>
      
      <guid>https://example.com/2008/01/21/trap-tools/</guid>
      <description>很多网络系统管理软件都有Trap管理的功能，在系统的安装和配置过程中；验证系统是否能正常处理Trap是很麻烦的事情。原因有很多，发送trap的设备没有，设备上的snmp没有启用，或者设备都正常，到网管系统的网络可能有防火墙吧snmp给堵住了。
为了方便的测试和配置网络管理监控系统，需要手工生产和验证trap的发送和接收。最近偶然在网上发现了这样几个免费（非OSS软件）软件工具，可以做这件事。
下载的网站是：http://www.ncomtech.com/ 下面吧我所下载和测试的软件做一个小结，希望对您有所帮助：

 Trap Receiver http://www.trapreceiver.com/ 是一个Windows程序非常小，安装了之后会在windows安装一个服务。程序的启动目录是C:\Program Files\Trap Receiver\TrapRcvr.exe 程序界面非常简单，如下图所示： 
点击configure按钮后可以做一些配置：Action －－当收到某些特定的trap是出发邮件、声音等动作；logging－－把收到的trap信息按照某种格式记录在文件中；Mibs－－导入目标设备的trap文件，让这个接收器能认识到另外的trap格式。还有其他配置信息也非常简单。
  
 **TrapGen **http://www.ncomtech.com/trapgen.html 顾名思义－这就是一个手工生产和发送trap的工具，是一个命令行工具。example: trapgen -d 192.168.2.3；上图中的第一条和第三条就是用这个命令发出的trap。欲知详细帮助信息，使用&amp;quot;trapgen -h&amp;quot;  I/F Spy http://www.ncomtech.com/ifspy.html 是一个网络接口枚举工具，它通过snmp协议去访问目标设备的IFMIB信息，显示所有IFMIB相关信息。  UDP Listen http://www.ncomtech.com/udplisten.html UDP协议的监听程序，是命令行工具，有linux和Solaris版，能用作一个debug工具。  Thingy http://www.ncomtech.com/thingy.html是一个Windows下的GUI工具，能帮你监控三个SNMP指标，采集并做大于等于和小于的逻辑判断然后显示不同的信号灯。 这几个小工具都很小，都能在windows下安装和使用对网络系统监控软件的安装、配置和排错应该有一定的帮助。如果您有什好的小工具也请回复一下本文。  </description>
    </item>
    
    <item>
      <title>Top 100网络安全工具</title>
      <link>https://example.com/2008/01/04/top-100-security-tools/</link>
      <pubDate>Fri, 04 Jan 2008 15:25:00 +0000</pubDate>
      
      <guid>https://example.com/2008/01/04/top-100-security-tools/</guid>
      <description>＃１Nessus : 首要的UNIX 弱点/漏洞评估工具

Nessus是最好的网络漏洞扫描工具之一，此软件最好是运行在UNIX上。它被持续不断地更新，有超过11,000的免费插件(但是需要注册或者接受EULA)。主要的特点包括远程和本地的执行安全检查，带有GTK图形用户界面的client/server架构，一个用来写自己的插件的内置脚本语言。从Nessus 3开始停止开源 now closed source，但是他依然是免费的除非你想要最新的插件。查看所有的漏洞扫描器 vulnerability scanners
＃2 Wireshark :附着在Internet上的嗅探器

Wireshark (在2006年夏之前名为Ethereal )是一个Unix和Windows上fantastic的开源网络协议分析器。它能让你分析在线的网络数据和捕获的数据文件。你能方便的浏览捕获数据，深入研究到你需要级别的数据包的细节。Wireshark还有几个强大功能包括，包括丰富的过滤显示语言和能去查看TCP链接重建的过程。它能支持几百种协议和网络介质类型。一个需要注意的方面是Ethereal现在遭受这很多可远程利用的安全漏洞，因此保持它的更新和提防在非信任的或者敌对的网络上运行它。查看所有包嗅探器 packet sniffers
 
＃3 Snort :所有人都喜欢的开源IDS 这个轻量级网络入侵检测和阻止系统擅长于IP网络上的流量分析和包记录。通过协议分析，内容搜索和各种预处理，Snort能探测上千种蠕虫, 利用漏洞企图，端口扫描和其他可疑行为。Snort使用一个弹性的基于规则的语言去描述它应该收集或者忽略的网络通信流量，和一个模块化的检测引擎。从此链接产看更多的基本分析和安全引擎，有一个Web用户界面来分析Snort告警。开源的Snort被一些个人、小企业和部门用的很不错。它的母公司SourceFire提供了一个非常全的产品线；具有很多的企业级功能和实时规则更新。它们提供了一个免费的（需注册）的5天延迟的规则更新源，你还能在Bleeding Edge Snort找到很多非常好的免费规则。 查看所有入侵检测系统intrusion detection systems
＃4 Netcat :网络瑞士军刀

这个简单的工具通过TCP或者UDP网络链接读写数据。它被设计为一个可靠的后端工具：能被直接和通过其他程序或脚本简单地驱动执行。同时，它也是一个功能丰富的网络调试和探索工具，因为它能生成几乎所有类型的你需要的网络链接，包括接受绑定了端口的外来链接。最初版本的Netcat released 是Hobbit在1995年发布的，但是不论它是多么的流行也没有被持续。它有时候很难被找到nc110.tgz。利用这个工具的弹性和用途去开发了很多其他的Netcat的实现极大的推广了这个工具- 经常的很多现代的功能都不能在原始版本中找到。其中最有趣的是 Socat，扩展Netcat去支持很多其它socket类型、SSL加密、SOCKS代理和更多。它甚至按自己的意图扩展。还有 Chris Gibson&amp;rsquo;s Ncat，提供了甚至更多功能同时能保持可移植性和简洁性。其它流行的Netcat包括 OpenBSD&amp;rsquo;s nc, Cryptcat, Netcat6, PNetcat, SBD, 和 GNU Netcat。查看所有 Netcats
＃5 Metasploit Framework : Hack星球
 Metasploit 在它2004年发布的时候给安全界带来风暴。没有其它什么工具能出现在这个列表的前15中， Metasploit 以第五位进入榜单，超过了很多知名的开发超过10年的工具。它是一个高级的开源平台。The extensible model through which payloads, encoders, no-op generators, and exploits can be integrated has made it possible to use the Metasploit Framework as an outlet for cutting-edge exploitation research.</description>
    </item>
    
  </channel>
</rss>
