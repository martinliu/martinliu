<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Network on DevOps &amp; SRE Blog</title>
    <link>https://martinliu.cn/tags/network/</link>
    <description>Recent content in Network on DevOps &amp; SRE Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 09 Jun 2007 08:56:00 +0000</lastBuildDate><atom:link href="https://martinliu.cn/tags/network/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go Open Source,GO! Vyatta开源软件挺进网络硬件领域</title>
      <link>https://martinliu.cn/2007/06/09/go-open-sourcego-vyatta-network/</link>
      <pubDate>Sat, 09 Jun 2007 08:56:00 +0000</pubDate>
      
      <guid>https://martinliu.cn/2007/06/09/go-open-sourcego-vyatta-network/</guid>
      <description>这是一个比较新的产品，提供开源的软件路由的解决方案；他们的目标直指Cisco这些大牌网络硬件厂商。它能简单的安装和运行在32bit的普通计算机硬件上，实现路由器的几乎所有功能；能支持的硬件平台和路由协议还真不少，请查看 Datasheet；下载网址
在VMWare中安装了一下发现它可以完全满足我需求：
1）在公司中办公网络建立一个隔离的测试网。
2）测试网中提供DHCP,DNS服务
3）提供NAT,Firewall
4）安装简单，硬件需求低
准备在公司实际环境中安装测试，安装和配置信息待续。
现在我正在Vyatta Router后面的小网内更新这个Blog。
上午的安装过程如下：
（硬件准备）
测试机一台 Dell Gx620，主板上带Intel的内置网卡一块TP-LINK TG-3269C，网线若干
（网络环境）
在一台办公网的机器上，寻找一个未使用的IP地址，这个地址会分配给Router的Internet网卡上；然后运行 ipconfig /all 记录下默认网关、默认DNS和子网掩码，这些信息会配置到Router上。
（安装过程）

 下载Vyatta的试用手册 Quick Eval Guide - Boot, Configure &amp;amp; Test the Vyatta software翻到手册的第三页，重新标准出你的网络信息，注意后面的配置跟这里的信息有关。为了简单起见，我就改了对外链接的哪个网卡的IP地址，至于内网么，有什么ip地址范围都无所谓了呵呵  下载刻录Vyatta软件 Vyatta Community Edition 2 - CD-ROM Image 刻录到一张空白CD上  把可好的CD放入机器中，从CDROM启动，这其实是一个livecd。启动过程可以无需关心，看似是一个Linux PE的CD，启动之后用root进入操作系统，root的密码是vyatta。进入后可以查看一下 vi /var/log/dmesg 主要看看你的两个网卡它是否能真确识别。我的测试机是Intel CPU的，不知道AMD的机器是否呢个装，没试过。  其它的配置过程文档中说的非常详细，不用我在多说。 安装之后的小节：
Router有两个网卡，在对外的网卡上做了，NAT，firewall，在对内的网卡上做了DHCP,DNS，现在我的笔记本在Router后的小网里，运行ipconfig /all的结果如下
Ethernet adapter Local Area Connection:
Connection-specific DNS Suffix . : mycompany.com</description>
    </item>
    
  </channel>
</rss>
