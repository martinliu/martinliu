<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DevOps on Hugo Future Imperfect Slim em português</title>
    <link>https://example.com/tags/devops/</link>
    <description>Recent content in DevOps on Hugo Future Imperfect Slim em português</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 26 Sep 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://example.com/tags/devops/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tips for Docker on Mac</title>
      <link>https://example.com/blog/tips-for-docker-on-mac/</link>
      <pubDate>Tue, 26 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/blog/tips-for-docker-on-mac/</guid>
      <description>Tips for Docker on Mac 在macOS上使用Docker很长时间了，本文总结一些我不想忘记的tips，方便自己反复使用的同时，也顺便总结分享一下，留下本文作为长期更新的备忘录。
搭建私有镜像库 运行一个本地镜像库
$ docker run -d -p 5000:5000 --restart=always --name registry registry:2 这条命令会从docker hub 下载 registry:2 镜像，在本机运行一个镜像库服务。
下载一个测试用的镜像。
$ docker pull ubuntu:16.04 给这个镜像打上私有镜像库的标签
$ docker tag ubuntu:16.04 localhost:5000/ubuntu:16.04 push这个测试镜像到本地的镜像库
$ docker push localhost:5000/ubuntu:16.04 这时候你会发现我的本地这样岂不是有了两份相同的镜像了，有这个必要么？是不是多余了？下面几个场景中会用到：
当你用docker-machine在本机启动1个vm的时候，你运行任何docker run或者docker-compose up的时候你可能需要一个之前在本地就有的image，这是一种分享本机image给docker-machine vm的一种方式。
当你用docker-machine在本机启动多个个vm的时候，你可能会把它们作出docker Swarm群集，当你在这个群集上启动一个服务的时候，docker compose文件中的镜像地址可以引用这个本地地址，引用地址类似这样 image: 192.168.99.1:5000/influxdb
当你用 minikube start启动了一个minikube的vm的时候，你可能也需要本机的docker镜像，尤其是在你做demo的时候，这是最快的下载途径。 需要注意的是，以上三种情况都需要指定一下&amp;ndash;engine-insecure-registry 192.168.99.1:5000 这个参数。
自动化创建Docker Swarm群集 在我的文件目录中存放着这个脚本
cat create-swarm.sh docker-machine create manager --engine-insecure-registry 192.168.99.1:5000 docker-machine create agent1 --engine-insecure-registry 192.168.99.1:5000 docker-machine create agent2 --engine-insecure-registry 192.</description>
    </item>
    
    <item>
      <title>关于DevOps 的那些事</title>
      <link>https://example.com/blog/something-you-must-know-about-devops/</link>
      <pubDate>Sat, 23 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/blog/something-you-must-know-about-devops/</guid>
      <description>DevOps是孕育于敏捷社区，又反哺给整个IT技术行业的，是一次彻底而全面的技术和文化运动。本文从它的出处谈起，一直描述到当前国内的现状。最后总结了相关的核心技术和主要实践。
DevOps简史 在2008年多伦多举办的敏捷大会（Velocity Conf 2008 ）上，Patrick DeBois 和AndrewClay Shafer 先生首次提议讨论“敏捷基础架构”这个话题。在第二年的敏捷大会上有一个具有里程碑的意义技术分享，来自Flickr公司《每天部署10次》的分享，它激发了随后Patrick DeBios在同年十月，在比利时的根特市举办的首届DevOpsDays活动，这个活动是两天的日程，为了大家方便在twitter上的传播，人们把DevOpsDays这个词简写为 “#DevOps” 。 此后，“DevOps”一词问世了，这个词所包含的理念和实践一时在越来越广大的人群中产生了共鸣，随后成为全球IT界在各种大会和论坛里热议和讨论的焦点话题，很多大型IT论坛也都开设出了DevOps专题讨论。这就是DevOps这个词的由来。DevOpsDays活动随后在Patrick DeBios等相关核心发起人的推动下，在全球范围内蓬勃发展了起来。2010年在美国山景城(Mountain View) 举办的DevOpsDays 活动中，Damon Edwards先生使用“CAMS”这个缩写，高度概括和诠释了DevOps，即文化（Culture）、自动化（Automation）、度量（Measurement or Metrics）和分享（Sharing）。随后Jez Humble先生将“L”精益 (Lean) 原则也加入其中，最终变成了CALMS。
 Culture（文化）- 是指拥抱变革，促进协作和沟通 Automation（自动化）- 是指将人为干预的环节从价值链中消除 Lean（精益）- 是指通过使用精益原则促使高频率循环周期 Metrics（指标）- 是指衡量每一个环节，并通过数据来改进循环周期 Sharing（分享）- 是指与他人开放分享成功与失败的经验，并在错误中不断学习改进  “CALMS”完全吻合Patrick DeBois先生所一向倡导的“DevOps is a human problem” (DevOps 是关于人的问题) 的理念 。
DevOpsDays活动的现状 从DevOps概念的产生，到如今它在全球范围内的蔓延和认同，已经经历了9个年头的时间。它的火爆推广也伴随着IT行业的迅速变迁和发展，现在已经到了移动互联网时代的后半场，国内的信息化建设已经完成了很多年；如今各行各业的企业也都亟待完成全方位的数字化转型。IT信息技术的先进程度标志着一个企业的核心能力，任何一个成功的企业，敏捷高效的软件开发创新实力和IT管理综合能力不只是门面而已，而是实实在在的市场竞争能力。DevOps倡导打敏捷、持续交付和ITIL三种实践的组合拳，同时应用精益生产理念为基础的管理思想，这正在逐渐地被广泛的接受和认可。
在过去的几年中，国内的各种IT大会也蓬勃发展，其中DevOps相关的专题和分会场也颇受人们的关注。各种云计算、运维等IT技术的社交媒体也都非常重视DevOps这个话题的分享。一个专属于DevOps社群的、国际性的、有影响力的DevOps大会正呼之欲出。在这样的时代背景下DevOpsDays大会北京站在2017年的3月18日来到中国，在同年的8月18日上海，还要举办DevOpsDays Shanghai站的大会。
下面列举一些DevOpsDays大会的相关数据，数据来源于DevOpsDays.org 网站。从2009年到2016年，已经在全球的61个城市/国家成功地举办了117场。
下图是在过去九年中DevOpsDays大会在各个城市/国家的分布和举办次数。
今年也就是2017年预计举办30场，其中已经有18场确定了举办城市和日期；还有12个城市的召开日期待定；这不包括年内还可能会提出申办的城市。以上数据的统计时间在2017年三月。
DevOps在国内的现状 随着国内BAT等互联网巨头的崛起，互联网公司的开发运维经验也越来越多的在国内的各种技术大会上传播。从最近这两年（2016年和2017年）的技术活动日程中可以看出，国内互联网从业人员也不约而同的用DevOps来定位和分享自己的优势和经验。他们是传播和分享运维侧DevOps实践的先头部队。
出了技术论坛的分享之外，很多线上线下的大会、论坛和讨论组也都越来越热议DevOps这一专题。国内其它相关流派的人群，例如敏捷和精益等，也对DevOps的蓬勃发展表示比较惊讶，DevOps与老牌的敏捷和精益等阵营也产生过一些争论。但这一切的发生也都增加了人们对于DevOps的更深入的兴趣。
在培训认证这方面，Exin DevOps Master是一个国际认证的培训；其它公司和组织也正在举办关于DevOps工具链的培训，这些培训则注重于技术实操，关注在构建端到端的流水线的搭建方面。从DevOps的职位招聘方面，可以看到DevOps工程师相关的职位越来越多了，在职位需求中DevOps这个技能成了加分项，DevOps相关工具的技能也或将成为简历的亮点。在IT行业内不管是开发还是运维团队的人，都开始了学习和接受的过程。
据我观察DevOps方面的厂商在最近3年呈现爆炸式的发展。我把他们分为三类：
 搭顺风车型：主要是指所有CaaS容器云平台厂商 。Docker是它是在DevOps的时代背景下产生的，是DevOps技术工具集里不可缺少的一员。国内这些厂商目前的数量在20左右，数目趋于稳定。由于今年（2017）Docker公司商业化版本和开源版本正式的划分开来，这些公司的发展可能或多或少受到一些影响。 直奔主题型：这类厂商专注于开发端到端的、用户体验良好的DevOps流水线平台，这些公司的创始人团队多是来自于BAT公司，因此具有很好的DevOps实战经验，他们开发的产品在持续交付和流水线功能上恰好填补了当前企业在这个方面的工具和技术实践的缺位。目前这类公司的数量还不多，数量呈上升趋势。 BATH型：BAT大家都知道，这里的H指的是华为，这些企业在DevOps平台方面都表现出积极的技术输出的态势。BAT是基于过去的互联网运维的经验做DevOps的产品化。华为是成了独立的研发部门，招募业内这方面的精英前来助阵，打造出一方面可以自用，同时也可以商品化的DevOps产品。  目前国内大部分企业慢慢地开始关注了DevOps，大型传统企业也开始逐渐地从各个角度做试点和尝试。试点的角度和方向各不相同，有的从底层基础架构的容器化开始，有的从交付部署流水线的自动化开始；总的来说还处于初级的尝试阶段，还没有大规模成体系的推广。
综上所述，目前国内DevOps发展的阶段还属于起步阶段。就像是ITIL/ITSM在2003年左右的状态。由于DevOps是去中心化的，所以没有唯一、权威的上游厂商的存在，各种理论实践的争执和PK都将终止与解决问题和提高效率的话题上，因此它具有百花齐放百家争鸣的发展条件。个人认为DevOps的实施和落地也不会完全依赖于传统的大型咨询厂商的咨询工作，由于它应该是在企业的内部，在内驱的作用下，自生长出来的；它必须是服务于企业的业务价值流的优化，加速业务价值产出的；而与之相关的工作和责任的担当，外部力量是很难以等量替换和承担的。
核心技术和工具 在谈这个话题前先看一下DevOps相关工具集的全貌，如下图所示：</description>
    </item>
    
    <item>
      <title>用Minikube体验单节点K8S</title>
      <link>https://example.com/blog/install-minikube-k8s/</link>
      <pubDate>Thu, 21 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/blog/install-minikube-k8s/</guid>
      <description>Minikube为各种操作系统的开发者，提供了运行K8S最简洁的方式。它最小化了安装k8s的需求和工作量。而且在各种操作系统上可以实现相同的体验。本文用精简的语言，描述了从安装minikube到运行容器化应用的过程。主要命令和输出来自macOS。
安装Hypervisor 需要在任何笔记本或者工作上安装一个Hypervisor，因此首先你需要坚持电脑的CPU是否开启了虚拟化的支持，检查BIOS的VT-X或者AMD-v的配置。
 OS X，安装 xhyve driver, VirtualBox 或 VMware Fusion Linux， 安装 VirtualBox 或 KVM Windows， 安装 VirtualBox or Hyper-V  Minikube会生成一个虚拟机，用于运行一个安装和部署好的k8s单节点系统。
安装kubectl kubectl是k8s系统的管理工具，是一个命令行工具，它用于和master交互，完成群集和服务的管理等工作。
kubectl的安装文档： https://kubernetes.io/docs/tasks/tools/install-kubectl/
在macOS上最简单的安装方法是下面这条命令：
brew install kubectl  brew的好处是后续可以帮忙持续的升级。
其它非brew安装方法，见以上安装文档的 Install kubectl binary via curl 部分。
安装 minikube 在macOS上使用的默认的Hypervisor是VirtualBox，如果想要用xhyve需要在启动的时候加上参数 --vm-driver=xhyve
安装最新版本的 minikube 需要参考这个网页 https://github.com/kubernetes/minikube/releases
minikube 是一个命令行工具，它的命令行参数如下：
Minikube is a CLI tool that provisions and manages single-node Kubernetes clusters optimized for development workflows. Usage: minikube [command]</description>
    </item>
    
    <item>
      <title>2017DevOps采用和趋势现状-信息图</title>
      <link>https://example.com/blog/state-devops-adoption-trends-2017/</link>
      <pubDate>Sat, 11 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/blog/state-devops-adoption-trends-2017/</guid>
      <description>在过去的一两年里DevOps持续升温，逐渐成为一场IT行业内的谁不可回避的运动。
DevOps 定义 我个人是一直以来反对给DevOps做一个名词解释样式的定义的。不过这种需求实在强大，摘抄几条供大家参考，上图是一种定义。
 定义2：You cannot buy DevOps and install it. DevOps is not just automation or infrastructure as code. DevOps is people following a process enabled by products to deliver value to end users. &amp;ndash; Donovan Brown, Microsoft DevOps Program Manager
 以上出自：Donovan&amp;rsquo;s blog post on &amp;ldquo;What is DevOps&amp;rdquo;.
 定义3：DevOps（Development和Operations的组合词）是一种重视“软件开发人员（Dev）”和“IT运维技术人员（Ops）”之间沟通合作的文化、运动或惯例。透过自动化“软件交付”和“架构变更”的流程，来使得构建、测试、发布软件能够更加地快捷、频繁和可靠。
 以上出自：维基百科 Wikipedia - DevOps
兴趣和搜索量 以上结果来自Google趋势，上图是从2004年到现在，一共13年的趋势图。下面再看一下最近五年的趋势详情。
最近5年的搜索趋势 国际关注度 相关话题和查询 关注者年龄和性别 上图年龄分布情况。
上图是性别分布情况。
DevOps应用状态  正在应用的:从66%上升到74% 没有应用的:从19%下降到16% 不知道的：从15%下降到6%  DevOps Checklist 不管你做不做DevOps？不管你知不知道你是不是DevOps？不管你从哪个角度入手DevOps？看看这个清单中有几项和您相关，就知道你和DevOps的关系是否密切。 检查清单如下：</description>
    </item>
    
    <item>
      <title>DevOps术语表</title>
      <link>https://example.com/2017/01/07/devops-glossary/</link>
      <pubDate>Sat, 07 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/2017/01/07/devops-glossary/</guid>
      <description>简介 这份术语表的旨在为DevOps实践者提供参考，在重要的专业术语上保持一致。最初的来源是《DevOps Handbook》英文版。译者在翻译的过程中，梳理和总结了一部分。Exin的DOP认证考试基于此书，考试样题也影响和参考了本术语表。本术语表是开放的，欢迎各界业内人士对其修订和增补。目标是形成一份较为完整和准确的参考资料。参与修订的方式见页脚。欢迎但不限于以下方面的专家参与评审和修订：
 敏捷开发 精益/精益UX/精益创业 丰田生产系统 ITIL 互联网公司 传统企业  这个页面的另外一个存在：https://handbook.martinliu.cn/glossary/
变更日志  2017年1月7日，在Martin‘s Blog和Github上发布了第一个版本。有几个人在Github上参与了修订（请参与者通过邮件或者其他方式告诉我，这里希望再次申明致谢。） 2017年12月27日，参与修订的人包括卢梦纯（Exin）、刘征、张乐、Wang Jun和许峰。 本网页当前接受繁体中文的增补，所有参与者名单  术语表    英文 中文     A/B Testing A/B测试   Acceptance Stage 验收阶段   Acceptance Test-Driven Development (Atdd) 验收测试驱动开发   Acceptance Tests 验收测试   Accident 事故   Affinity 亲和   Agile 敏捷   Andon Cord 安灯拉绳   Anomaly Detection Techniques 异常探测技术   Antifragility 抗脆弱性   Application Deployment 应用部署   Artifact Management 构件制品库管理   Artifacts 制品   Automated Tests 自动化测试   Automation 自动化   Backlog 待办事项列表   Bad Apple Theory 坏苹果理论   Bad Paths 失败路径   Batch Sizes 批次尺寸、批量大小   Blame 责备   Blameless Post Mortem 免责事后分析   Blamelessness 免责   Blue-Green Deployment 蓝绿部署   Blue-Green Deployment Pattern 蓝绿部署模式   Branching Strategy 分支策略   Brownfield 棕地   Build 构建   Business Value 业务价值   Canary Release 金丝雀发布   Canary Release Pattern 金丝雀发布模式   Card 卡片   Change Categories 变更类别   Change Schedules 变更计划   Cloud Computing 云计算   Cloud Configuration Files 云配置文件   Cluster Immune System Release Pattern 集群免疫系统发布模式   Code Branch 代码分支   Code Review Forms 代码审查表   Codified Nfr 成文的非功能需求   Collaboration 协作   Commit Stage 提交阶段   Commit Code 提交代码   Compliance Requirement 合规性要求   Compliance Checking 合规性检查   Compliancy Officer 合规检测官   Configuration Management 配置管理   Container(S) 容器   Continuous Deployment 持续部署   Continuous Integration 持续集成(CI)   Continuous Delivery 持续交付(CD)   Conways Law 康威定律   Cycle Time 周期时间   Defect Tracking 缺陷跟踪   Definition Of Done (Dod) 完成的定义   Dev Rituals 开发仪式   Developer 开发人员   Development 开发   Devops Transformation DevOps转型   Downstream/Upstream 下游/上游   Downwards Spiral 恶性循环   E-Mail Pass-Around 电子邮件轮查   Expand/Contract Pattern 扩张/收缩模式   Exploratory Test 探索性测试   Fast Feedback 快速反馈   Feature 特性   Feature Flag 特性标志   Feature Toggles 特性开关   Feedback/Feedback Loop 反馈/反馈回路   Feedforward/Feedforward Loop 前馈/前馈回路   Flow 流   Gated Commit 门控提交   Gaussian Distribution 高斯分布   Green Build 绿色构建   Greenfield 绿地   Handoff 交接   Hand-Off Readiness Review 交接就绪评审   Happy Paths 快乐路径   Hypothesis-Driven Development 假设驱动开发   Incident 事件   Information Radiators 信息辐射器   Infosec 信息安全   Infrastructure Automation 基础架构自动化   Infrastructure As Code 基础设施即代码   Integration Tests 集成测试   I-Shaped, T-Shaped, E-Shaped I型，T型，E型   Iteration 迭代   Itsm (It Service Management) IT服务管理   Ji-Kotei-Kanketsu (Jkk) 质量检查（JKK）   Just Culture 公正文化   Just-In-Time (Jit) 准时制   Kaizen (In Lean) 持续改善   Kaizen Blitz (Or Improvement Blitz) 持续改善闪电战   Kanban 看板   Kata Kata   Large Batch Size Merge 大批量合并   Latent Defects 潜在缺陷   Lauching Guidance 发布指导   Launch Readiness Review 投产就绪评审   Lead Time 前置时间   Lean 精益   Learning Culture 学习文化   Logging Levels 日志级别   Loosely Coupled Architecture 松耦合架构   Micro-Services 微服务   Minimum Viable Product 最小化可行产品   Monitoring Framework 监控框架   Monolithic Applications 单体应用   Monolytics 单体应用   Mttr 平均恢复时间   Non-Functional Requirement (Nfr) 非功能性需求   Non-Functional Requirement (Nfr) Testing 非功能需求测试   (Non) Ideal Testing Pyramid （非）理想测试金字塔模型   One-Piece-Flow 单件流   Operations 运维   Operations Story 运维故事   Ops Liaison 运维联络人   Organisational Typology Model 组织结构模型   Organization Archetypes 组织原型   Organizational Learning 组织级学习   Over-The-Shoulder 观察者评审   Packages 包   Pair Programming 结对编程   Peer Review 同行评审   Pilot 试点   Pipeline 流水线   Plan-Do-Check-Act Cycle (Pdca Cycle) 计划-实施-检查-改进 （戴明环）   Post Mortems 事后回顾   Post-Mortem 事后剖析   Process Time 处理时间   Product Owner 产品负责人   Pull Request Process 拉动请求流程   Qa 质量保证   Reduce Batch Size 降低批次尺寸   Reduce Number Of Handoffs 减少交接次数   Regression Test 回归测试   Release Branch 发布分支   Release Managers 发布经理   Release Patterns 发布模式   Retrospective 回顾   Rhythm 节奏   Roll-Back 回滚   Sad Path 悲伤路径   Safety Culture 安全文化   Safety Conditions 安全条件   Scaling 规模化   Scrum Scrum   Scrum Master Scrum Master   Security Testing 安全测试   Self Service Capability 自服务能力   Service Deployment 服务部署   Service Level Agreement (Sla) 服务级别协议(SLA)   Shared Goals 共享目标   Shared Operations Team (Sot) 共享运维团队   Shared Version Control 共享版本控制   Single Repository 单一存储库   Smoke Testing 冒烟测试   Sprint 冲刺   Staging Staging   Staging Environments, Sit 准生产环境   Stakeholder 利益干系人   Standard Deviation 标准差   Standard Operations 标准运维   Static Code Analysis 静态代码分析   Swarm 聚集、聚焦、会诊、围观（动词）   Swarming 聚集   System Of Engagement (Soe) 交互系统   System Of Records (Sor) 记录系统   Technical Debt 技术债务   Technology Adaption Curve 技术适应曲线   Technology Executives 技术主管   Telemetry 遥测   Test Coverage Analysis 测试覆盖率分析   Test Story 测试故事   Test-Driven Development 测试驱动开发   The Downward Spiral - Tds 下行螺旋   The Agile Manifesto 敏捷宣言   The Lean Movement 精益运动   The Simian Army: Chaos Gorilla, Chaos Kong, Conformity Monkey, Doctor Monkey, Janitor,Monkey, Latency Monkey, Security Monkey 猿猴军团（可靠性监控服务），Chaos Gorilla（混沌大猩猩）， Chaos Kong（混沌金刚）, Conformity Monkey（一致性猴子）, Doctor Monkey（医生猴子）, Janitor Monkey（看门猴子）, Latency Monkey（延迟猴子）, Security Monkey（安全猴子）   The Three Ways 三步工作法   Theory Of Constraints 约束理论   Ticketing System 工单系统   Tightly-Coupled 紧耦合   Tool-Assisted Review 工具辅助评审   Tools 工具   Toyota Production System (Tps) 丰田生产系统   Toyoto Kata 丰田套路   Transformation Team 转型团队   Trunk 主干   User Story 用户故事   Value Stream Mapping 价值流映射   Value Stream 价值流   Velocity 速率   Version Control 版本控制   Virtualized Environment 虚拟化环境   Visible 可视的   Visualisation 可视化   Waste 浪费   Waste Reduction 减少浪费   Waterfall 瀑布式   Wip (Work In Progress / Process) 在制品   Wip Limit 在制品限制   Work Center 工作中心                    参与修订说明 请帮忙改进本术语表，请直接Fork本代码库，然后提交PR；或者发邮件到：liuzh66@gmail.</description>
    </item>
    
    <item>
      <title>Nutanix资源站点清单</title>
      <link>https://example.com/2017/01/07/nutanix-resource-sites/</link>
      <pubDate>Sat, 07 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/2017/01/07/nutanix-resource-sites/</guid>
      <description>做Nutanix的那些不可不知道的资源网站，这里列出了常用的官方和非官方网站。
Nutanix 官方站点 http://portal.nutanix.com/ http://portal.nutanix.com/
 在线文档 在线技术支持，case查看和操作 产品和补丁下载  https://next.nutanix.com/ https://next.nutanix.com/
 产品网上论坛和社区 社区版论坛 博客， Nutanix Connect Blog  技术达人网站和博客 myvirtualcloud.net by Andre Leibovici http://myvirtualcloud.net/nutanix/
Virtual life style by Joep Piscaer https://www.virtuallifestyle.nl/
The Nutanix Bible by Steven Poitras http://nutanixbible.com/
Mark&amp;rsquo;s Blog by Mark Lavi http://mlavi.github.io/
Jeremy Sallee - Nutanix UI/Frontend 设计师 http://salleedesign.com/stuff/sdwip/home/
想知道Prism是怎么设计出来的：点这里
Virtual Dennis by Dennis Laube http://www.virtualdennis.com/category/nutanix/
 如何ova格式的虚拟机导入Nutanix AHV 镜像服务能够支持Web界面上传导入的格式包括：raw, vhd, vmdk, vdi, iso 和 qcow2 磁盘，导入为Disk后，即可用做模板 如何在Nutanix中制作AHV虚拟机模板 使用acli命令：vm.</description>
    </item>
    
    <item>
      <title>DevOps书单</title>
      <link>https://example.com/2017/01/03/devops-booklist/</link>
      <pubDate>Tue, 03 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/2017/01/03/devops-booklist/</guid>
      <description>学习DevOps应该会使用到的书籍清单。
我在豆瓣建立了一个书单，欢迎在豆瓣给我留言，评论和建议。豆瓣书单点这里。
 本清单来自于《DevOps Handbook》书中提到的书，更新到第五本；《看板方法》、《精益思想》、《Implementing Lean Software Development: From Concept to Cash》、《第五项修炼:学习型组织的艺术与实践》、《探索吧!深入理解探索式软件测试》
《看板方法-科技企業漸進變革成功之道》 转自：Rubbyblog.wordpress.com/images/
今天要介紹看板方法的由來， 上面這本書是由看板方法之父 David J. Anderson 於: 2010年 4月所著。簡字版是 2014 年2月出版。這篇文章在我上 TechDays 課程時就想登出來了，想把好書介紹給大家。但由於台灣的書商都沒有進口，所以一直等到我拿到第一批書後，肯定大家可以在坊間買到書時才把他登出來。原文書名: Kanban: Successful Evolutionary Change for Your Technology Business.
看板方法：它是敏捷陣營中實施起來阻力最小，生產力又能大幅提升、前置時間大幅下降，而可預測性又絕佳的敏捷解決方案之一。好神奇喔 … 哈哈! 確實如此，所以我才會這麼急切的推薦給大家。另一個原因是Kanban Method 現在在美國正熱烈風行中，而我們現在開始追正是時候。為此放下了許多手上正在做的工作(包括一本 Scrum的教本)，努力開始推廣希望大家能受用。首先說明: 為何他推廣起來阻力最小?
※ 實施起來阻力最小:
因為David J. Anderson 本身是一個微軟的 PM出身，他跟大家一樣知道變革會讓許多人害怕，人們會認為自己的技術是否落伍了，開始擔心害怕變革會對自己的工作事業帶來不利，這種恐懼常常會帶來一種莫名的對立，因此在還沒開始變革之前就已經採取抵制的態度了。所以他創始的看板方法選擇從哪裡開始實施呢? 就從現在既有的流程開始。由工作者本身最熟悉的地方開始。起步的秘訣是甚麼呢? 是精實精神中從豐田系統中學來的原則，先從不浪費開始，作法: 在識別浪費後消除浪費。
※ 如何能讓生產力大幅提升?
由審視既有流程，依據 Little’s law的最大產出方法，接著找出阻礙最大產能的瓶頸所在，然後正視這個造成瓶頸的問題，把它顯現在看板上面，讓大家一起站在看板前面討論如何解決它，解決之後再持續進行改善的作業。
※ 前置時間大幅下降
過去我們都以為唯有透過良好的規劃及配合才能夠讓前置作業時間下降，但豐田企業的及時(Just In Time)備料讓庫存降至最低，讓半成品減至最少改變了工作流程的前置時間(Lead time)，因此得到大幅下降。
看板還是看板方法 (Kanban or Kanban Method) 英文叫 Kanban，上網去搜尋會得到一大堆有關製造業的看板資料。所以請使用 Kanban Method去搜尋，因此中文就該叫做「看板方法」。簡體版的作者有用心在翻譯因此翻對了，值得買來閱讀。全書分成四部分:</description>
    </item>
    
    <item>
      <title>EXIN DevOps Master 认证考试</title>
      <link>https://example.com/2016/11/07/exin-devops-master-e8aea4e8af81e88083e8af95/</link>
      <pubDate>Mon, 07 Nov 2016 15:19:08 +0000</pubDate>
      
      <guid>https://example.com/2016/11/07/exin-devops-master-e8aea4e8af81e88083e8af95/</guid>
      <description>DevOps这个词在去年参加红帽全球用户大会的时候就深深吸引了我，实际上哪个会上Docker容器的概念要比DevOps还火爆。Docker／openshift相关的session都尝尝是爆满的。从那里开始我逐渐感觉到了开源容器技术的强大和吸引力。
从红帽开始OpenShift的考试就是我在完成RHCA红帽认证架构师之后的一个心结，至今也没有完成。不过这根草我早晚是要拔掉的。主要是由于OpenShift是Docker ＋ kubernetes 的组合；是如今企业级PaaS容器平台的主要技术路线。总之离开红帽是如此的仓促，说实话这也是我职业生涯中的一个不小的遗憾。当时确实觉得 kubernetes 的命令行操作不是很方便，而且在OpenShift并没有降低这个门槛，也即是说在OpenShift里面还是要有一定的工作量和技能的要求在编写kubernetes的yml文件上。在这一点上，及时我熟练掌握了Rancher之后，同样发现编写compose file也是难以逃避的。在推广一步，大部分Docker PaaS平台也都是这样，很多产品也是在界面上提供一个文本输入框，让人输入容器服务定义文件的内容。
在最近的半年中，我的所有技术研究都集中在Docker和其服务编排技术上。与很多用户做过技术交流，PoC测试，有些单子也落地。总结后，有些结果让我感叹。国内的所有企业不区分规模和行业，其实他们对国内原生的创业公司是欢迎的，由于这些公司提供的是国产软件和技术服务。在Docker这个火热的领域中，已经有20多家国内创业公司，我想所有的公司也都已经接受到了这一点的福利了。外国软件通常给人的感觉是：不是国产软件（不要小看国内公司对国产软件的诉求），纯英文操作界面和文档，可能的水土不服，高昂的软件价格和服务费，如果技术太新的化很可能厂商也不具备足够的技术实力和服务力量。
经过了一些Docker容器项目之后，可以断言的是容器市场的火爆和它的技术优势是直接相关的。容器化之后的应用可以通过服务编排工具快速地部署／更新、弹性地伸缩和使用资源，优化其传统应用运维的若干缺陷。容器的轻量和just enough的隔离技术让资源池的管理更加简单，利用率大幅度提升，这对研发部门的环境管理是不小的提升，使CI的过程更加高效和经济。Docker对微服务的支持也深深地诱惑了所有开发者，做系统微服务实施开发者能想到的实施技术大多数会是容器。
以上容器的优势和特性使得国内的这些项目落地和实施的可能性进一步提高，甚至很多项目的速度远远超预期；按照我多年的经验看，一个软件技术型的项目，用户纠结半年到一年以上是很正常的。可能也跟国内企业包容本土化软件公司，追捧新潮技术直接相关；我观察到的一些项目，在2～4个月内落单的屡见不鲜。有些试点的DevOps咨询项目也落地很快。
这些项目都殊途同归地指向了DevOps这个关键词，这让我不得不从去年开始就关注和学习这个最佳实践。当然，我对DevOps的前途非常看好，因此当我听说业内出现了相关认证考试之后，我毫不犹豫地报名参加了。经过2个多月的缜密的准备，我终于幸运地一次通过了这个考试。考试获得了两个证书。
DevOps Master
DevOps Master 认证自由讲师
我参加的是讲师认证培训TTT，很高兴能成为Exin在国内的首批5个认证人员之一。在准备这个考试的过程中我学习了一些书籍，现在还在深度学习的书有两本。
我完成了这本黑皮书的读书笔记，很遗憾的是，我发现它的最新版，把封面改成了白底的了，我不能在叫它黑皮书／黑宝书了。这本书我起码看了两遍；目前正在调试它的书中的代码，代码中的营养还是很高的，计划尽快把所有代码调试通过；从而完成我许下多次的线上分享本书的诺言。
这本书被我称为CD红皮书／红宝书。本书早在10年就出版了，也就是说比Docker早好多年。他给我最大的印象就是，作者每一页上似乎都在介绍这做事情的原则和规矩是什么？我一点也不夸张，他对CD的介绍，就是通过讲解一系列在项目上的经验总结。对作者这种级别的经验，和写书的房子只能用一个词总结“服”。这本书太干，我至今还没有消化完。他让我看到了解决发布和变更风险的终极解决方案，没有一次性解决问题的部署／配置／发布工具，有的是历练和打磨了千万次的持续部署流水线；隐约地觉得没用入手的企业都会慢慢跟上的。
以上是我对DevOps的阶段性总结，跨度有半年之久。这半年中我逐渐看清了我的主要兴趣点，抛除所有其他主题，目前剩下的就是：云计算和DevOps。一方面觉得年纪不饶人，不能可能在和年轻人拼精力、体力和创意；我的背景和经验都让我感觉，在这两个话题上，我还是有很多年的经验和技术积累和总结的。云计算是（公有云＋私有云）未来企业IT基础架构的走向；DevOps是目前看比较正确的运作实践。一个便技术，一个便管理，正好完整覆盖了我的经验；在其对应的开源技术这个分支里，我想它们都还有这很多的为探索和研究的项目。</description>
    </item>
    
    <item>
      <title>红帽媒体日</title>
      <link>https://example.com/2015/07/14/e7baa2e5b8bde5aa92e4bd93e697a5/</link>
      <pubDate>Tue, 14 Jul 2015 14:20:24 +0000</pubDate>
      
      <guid>https://example.com/2015/07/14/e7baa2e5b8bde5aa92e4bd93e697a5/</guid>
      <description>本次演讲用了大约25分钟，超时了大约5分钟多，但是其中有些观点还是没有叙述的很倒位。只能算是我的一种理解和解读，希望对道场的媒体朋友们对认识红帽公司有帮助。
演讲源版slide和录音在这个网页上： http://investors.redhat.com/events.cfm 的这部分：
Jun 24, 2015
10:30 AM - 1:00 PM ET
 Red Hat Analyst Day
Listen to webcast 
View Presentation
12.2 MB
Add to Briefcase
View Additional Information
    我做了Pual这一段的翻译，翻译的文档下载点这里：[RH_Summit_Analyst_Day_Master_20150714_MartinLiu](http://7bv9gn.com1.z0.glb.clouddn.com/wp-content/uploads/2015/07/RH_Summit_Analyst_Day_Master_20150714_MartinLiu.pdf) </description>
    </item>
    
  </channel>
</rss>
