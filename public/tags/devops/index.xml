<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>devops on 刘征的博客</title>
    <link>https://example.com/tags/devops/</link>
    <description>Recent content in devops on 刘征的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 27 Aug 2020 13:54:46 +0800</lastBuildDate><atom:link href="https://example.com/tags/devops/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Elasticsearch 3 节点集群搭建 (7.9.0)</title>
      <link>https://example.com/blog/elasticsearch-3-nodes-cluster-setup/</link>
      <pubDate>Thu, 27 Aug 2020 13:54:46 +0800</pubDate>
      
      <guid>https://example.com/blog/elasticsearch-3-nodes-cluster-setup/</guid>
      <description>最近发布的 Elastic Stack 7.9 ，带来了很多新的特性。Elastic Agent 统一集成数据采集代理是一大亮点。另外还看增加了企业搜索、端点安全防护等组件。Ingest Manager 统一 Beat 配置管理功能让我们向 SaaS 风格的监控工具又迈进了一步。由代理端自行注册到后端，在后端统一纳管所有被管理服务器，将是一种以后非常通用的模式。这样做的好处是：将数据采集端点的配置工作量和复杂度降低到最低。Beats 的各种相关独立模块也在平行的发布，这种双轨模式也可以让用户更弹性的做出选择，能最大程度的保持旧版本部署环境管理模式的延续性。 Ingest manager 的前提条件是：后台 ES 需要启用 api key 安全，启用 ES 客户端的 HTTPS 访问。我们也可以看到这两个功能选项也有其非常广泛的应用需求。本文将用最简单的文字，向你描述一套 3 节点的 ES 集群的搭建方式，这套系统的核心特性如下：
 启用用户名和密码认证 启用集群内 es 节点间 transport.ssl 通讯加密 启用 es 的 http 客户端 http.ssl 加密通讯 安装脚本中包括创建数字证书的必要命令（没猜错的话，大部分人可能会在这一步花费大量时间）  演示环境介绍 我使用的是本地的测试环境，环境配置如下：
 Mac OS vagrant virtualBox - CentOS 8 Elastic Stack 7.9.0 ip 和主机名分配见 Vagrantfile 文件 Vagrant 的 vagrant-hostsupdater 插件实现了 Mac OS 主机和所有虚拟机的 host 文件 DNS 解析的同步，保证所有相关虚拟机都可以解析其它虚拟机的 FQDN，尽量模拟生产环境。  本文所使用的所有配置文件和安装脚本见：https://github.</description>
    </item>
    
    <item>
      <title>腾讯云下部署 Elastic Stack 各种 Beat 的最佳实践</title>
      <link>https://example.com/blog/beats-implement-on-qcloud/</link>
      <pubDate>Fri, 07 Aug 2020 17:14:20 +0800</pubDate>
      
      <guid>https://example.com/blog/beats-implement-on-qcloud/</guid>
      <description>概述 使用 Elastic Stack 的各种 Beats 模块可以彻底的终结在服务器上手工捞日志查指标的扭曲实践。利用腾讯云提供的 Elasticsearch 服务，可以轻松搞定大规模云环境的运维。本文一次性的帮你梳理清楚了，必备的基础操作，确保你能用 Elastic Stack 安全、稳定和扩展的持续监控你的生产环境。
创建 ES 集群 登录腾讯云服务控制台，查询并进入 Elasticsearc 服务，点击新建按钮，创建 Elasticsearch 集群。如下图所示。
集群配置说明：
 北京区 7.5.1 - 白金版 单可用区 冷热模式  本实例其它参数保持默认，可以根据实际业务需求修改这些参数。
点击下一步后，设置 Elasticsearch 集群的超级用户名和密码。
在几分钟之后这个集群就成功创建了。查看下面这些基础的配置。
 启用 Kibana 内网地址： http://es-ot7wei87.internal.kibana.tencentelasticsearch.com:5601 用于 Bests 的 Setup 命令 启用 Kibana 公网地址： https://es-ot7wei87.kibana.tencentelasticsearch.com:5601 用户Elastic Stack 的初始化配置，如创建角色和调整索引生命周期策略等。  这样我们就有了一个安全、可扩展和性能足够的 ES 后台服务。
创建 Beats 写入角色和用户 登录 Kibana ，点击角色和用户管理，创建用于 Beast 配置文件的‘只写’权限用户。
 创建 beats-writer 角色 创建 beats-writer 用户，该用户只赋予beats-writer角色，自定义一个安全的复杂密码。  Beats-write 角色设置如下图所示：</description>
    </item>
    
    <item>
      <title>APM 分布式追踪为何这么难？</title>
      <link>https://example.com/blog/apm-why-it-so-hard/</link>
      <pubDate>Sun, 02 Aug 2020 20:48:30 +0800</pubDate>
      
      <guid>https://example.com/blog/apm-why-it-so-hard/</guid>
      <description>用跟踪的方式调试计算机程序的调用堆栈的实践其实由来已久，这种方法可能仅次于用 print 输出各种信息。在云原生的时代里，我们还会遭遇工具过剩的情况，工具之间的相生相克加剧了实施分布式追踪的难度。
总的来说有三个基础难点：
 生成追踪数据难。对已有应用系统的代码库进行埋点处理的挑战巨大，你的应用程序系统的模式可能也不符合埋点的模式需求。 采集存储追踪数据难。捕获和管理大量追踪数据包，即照顾到查询和使用的需求，又要设定成本合理的数据存储策略，处理数据收集能力的扩缩容。 从数据中获益难。如何理解和使用数据产生可执行行动，如何用它优化微服务的遥测，怎么将它的利益扩展到各个相关团队。  分布式追踪系统的实施结果是落地一条能深度洞察目标系统的工具。让人们能轻松的理解局部和整体的状态，特别是在请求堆栈中的任何局部服务出现故障时，可以最快速的定位故障根源。
上图是用追踪数据生成的服务地图。
上图是一次用户请求的全部细节，还可以一键式的跳转到相应的日志或者指标。
以上三个难点覆盖了部署实施分布式追踪系统的核心领域。
 埋点 OpenTelemetry是目前受到广泛支持的埋点框架，对棕地应用和绿地应用进行埋点处理的挑战是不同的，需要遵循不同的额最佳实践。 部署 在理解了目标追踪应用系统的运行时状态后，最好使用一种弹性的方式收集和存储追踪数据。满足分析数据量需求的同时平衡存储成本。 收益 将其与日志和指标工具关联起来，定义和监控重要有意义的监控点，用于优化系统性能基线，并最小化 MTTR。  在云计算、Kubernetes、容器化大行其道的今天，分布式追踪的实施是不是正处在进退维谷的尴尬境地呢？其实并非如此，特别是监控运维挑战越高的应用，其实越需要需要使用分布式追踪 APM 工具。分布式追踪对云原生的容器化微服务应用尤为适用。APM 对单纯使用日志和指标的场景具有极大的补充和提高作用，而且它是可观测性策略的关键组成部分。
总的来说分布式追踪工具可以通过追踪的方式展现请求在系统中的流动状态。流行的开源埋点框架使之与应用的编程语言、运行时环境无关，可以适配与所有类型的应用和服务。有些 APM 工具可以支持运行时埋点（或称为运行框架埋点），在不改变代码的情况下采集追踪数据。APM 的实施虽然有一定难度，但是当开始实施埋点处理，收集追踪数据以后，相关的价值和收益也就会慢慢显现出来了。
参考：
 https://opentelemetry.io/ https://www.elastic.co/cn/apm  </description>
    </item>
    
    <item>
      <title>应用开发 DBA 技巧集锦</title>
      <link>https://example.com/blog/sql-tricks-application-dba-chinese/</link>
      <pubDate>Fri, 31 Jul 2020 22:23:44 +0800</pubDate>
      
      <guid>https://example.com/blog/sql-tricks-application-dba-chinese/</guid>
      <description>前言 DBA 可能是经常被其它团队依赖的一种角色、团队，因此他们也会有着很长的等待队列，也经常是事故救火中的英雄和常客。DevOps 强调用跨角色的学习和培训来解决这种依赖，也就是 DevOps 工作三步法的第三步，学习与持续改进。 本文写给所有的应用开发者，希望大家能多学习一些 DBA 知识，减少对专家 DBA 的依赖，加速你们的业务的交付，消除由于等待而造成的浪费。
本文转载自：https://hakibenita.com/sql-tricks-application-dba
以下是正文原文：
当我开始我的开发生涯时，我的第一份工作是DBA。那时，在AWS RDS、Azure、Google Cloud和其余云服务之前，有两种类型的DBA。
基础设施 DBA 负责建立数据库配置存储，并负责备份和复制。设置好数据库后，基础架构DBA会时不时地冒出来做一些 &amp;ldquo;实例调整&amp;rdquo;，比如调整缓存的大小。
应用 DBA 从基础架构DBA那里得到了一个干净的数据库，并负责模式设计：创建表、索引、约束和调优SQL。应用DBA也是实现ETL流程和数据迁移的人。在使用存储过程的团队中，应用DBA也会维护这些存储过程。
应用DBA通常是开发团队的一部分。他们会拥有深厚的领域知识，所以通常他们只会在一两个项目上工作。基础架构DBA通常是某个IT团队的一部分，他们会同时在多个项目上工作。
我是一名应用DBA 我从来没有任何欲望去摆弄备份或调整存储（我相信这很迷人！）。直到今天，我都喜欢说自己是一个懂得开发应用的DBA，而不是一个懂得数据库的开发者。
在本文中，我将分享我一路走来收集到的一些关于数据库开发的非浅显技巧。
Be that guy&amp;hellip;
Image by CommitStrip
只更新需要更新的内容 UPDATE是一个相对昂贵的操作。为了加快UPDATE命令的速度，最好确保只更新需要更新的内容。
以这个查询为例，它对电子邮件列进行了标准化处理。
db=# UPDATE users SET email = lower(email); UPDATE 1010000 Time: 1583.935 ms (00:01.584) 看起来很无辜吧，查询更新了1010,000个用户的邮箱。但是，真的需要更新所有的行吗？
db=# UPDATE users SET email = lower(email) db-# WHERE email != lower(email); UPDATE 10000 Time: 299.470 ms 只需要更新10000行。通过减少受影响的行数，执行时间从1.5秒降到了不到300ms。更新的行数少了，也节省了后期的数据库维护工作。
这种类型的大更新在数据迁移脚本中非常常见。所以下次写迁移脚本时，一定要只更新需要更新的内容。
在批量加载过程中禁用约束和索引。 约束是关系型数据库的重要组成部分：它们能保持数据的一致性和可靠性。不过它们的好处是有代价的，在加载或更新大量行时最明显。</description>
    </item>
    
    <item>
      <title>Skaffold 让 K8s 开发者更加酸爽</title>
      <link>https://example.com/blog/skaffold-make-local-k8s-dev-easy/</link>
      <pubDate>Wed, 15 Jul 2020 00:09:53 +0800</pubDate>
      
      <guid>https://example.com/blog/skaffold-make-local-k8s-dev-easy/</guid>
      <description>今天介绍一个本地 Kubernetes 开发的利器 Skaffold。 这是我偶然间发现的一个工具，询问了一下周围的人，居然还没有人用过。测试之后，确实有一种不吐不快的感觉。
简介 Skaffold Google 开发的一个开源项目。是一个非常轻量的命令行工具，就是一个可执行文件。它的主页上是这样的介绍它的。
 轻量：Skaffold只是一个客户端工具。由于集群上不需要任何的相关组件，您的集群没有任何开销或维护负担。 运行在任何地方：Skaffold是与世界分享你的项目的最简单的方法：&amp;ldquo;git clone&amp;rdquo;，然后 &amp;ldquo;skaffold run&amp;rdquo;。此外，你还可以使用配置文件、本地用户配置、环境变量和标志来轻松地集成不同环境的差异。 功能丰富：Skaffold拥有许多Kubernetes原生开发的基本功能，包括基于策略的打镜像标签、资源端口转发和日志、文件同步等。 优化你的开发：Skaffold使内部循环紧密，高度优化，让您在开发的同时得到即时反馈。  客户评价 &amp;ldquo;我们的客户很喜欢[Kubernetes]，但一直给我们反馈说在Kubernetes上开发很麻烦。Skaffold一针见血地解决了这个问题。以前需要几分钟才能部署的docker镜像或配置的更改，现在只需要几秒钟。Skaffold的插件架构使我们能够部署到Helm或Kustomize，并使用各种docker构建插件，如Kaniko。Skaffold用一个精简的工具取代了我们定制的实用程序和脚本集合，并且易于使用。&amp;rdquo; Warren Strange，ForgeRock的工程总监。
&amp;ldquo;当我们评估我们可以使用Kubernetes的工作流程时，Skaffold脱颖而出，成为我们在开发和部署中都想要的工具。它为我们提供了一个跨应用程序的通用入口点，我们也可以为CI/CD重用。现在，我们所有的Kubernetes应用的CI/CD管道在构建和部署时都使用Skaffold。&amp;rdquo; Taylor Barrella，Quora的软件工程师
&amp;ldquo;Skaffold是一个了不起的工具，它为我们简化了开发和交付。Skaffold通过覆盖两个维度，击中了我们的甜蜜点。第一，从本地开发、集成测试到交付的整个开发周期。第二，Skaffold让我们能够在Linux、OSX和Windows上独立开发，不需要特定的平台逻辑。&amp;rdquo; Martin Höfling，TNG技术咨询有限公司首席顾问
推荐首次测试流程 前置条件，你的开发用工作电脑上已经安装了它需要调用的 kubectl 和 docker 命令，kubectl 需要有至少一个可用的配置，这个配置可以指向任一一个你有权限部署的 Kubernetes 集群。
我在 macOS 上，直接运行 ‌brew install skaffold 即可，其它系统参考：https://skaffold.dev/docs/install/
克隆 Skaffold 的代码库到本地，获取必要的测试应用代码。
‌git clone https://github.com/GoogleContainerTools/skaffold
进入代码库中的‘hello world’示例应用。
执行：‌cd skaffold/examples/getting-started
执行 ‌skaffold dev ，你会看到 Skaffold 进入了这个项目的构建和运行的状态，执行结果是持续的输出 ”[getting-started] Hello world!“
现在 Skaffold 就进入了 /getting-started 的监视状态。观察任何代码文件的修改存盘动作，每次代码的变更会触发 Skaffold 流水线的执行，skaffold.yaml 文件中描述了本地流水线中的相关动作：</description>
    </item>
    
    <item>
      <title>如何在墙内正常导入 Vagrant 虚拟机模板</title>
      <link>https://example.com/blog/download-import-vagrant-box/</link>
      <pubDate>Thu, 26 Mar 2020 08:57:57 +0800</pubDate>
      
      <guid>https://example.com/blog/download-import-vagrant-box/</guid>
      <description>当你满心欢喜的安装完了 vagrant 之后，在你第一次 vagrant up 命令的时候，是下载超时么？你的内心是什么感受？想放弃了么？
其实你只需要找到国内的 box 文件镜像服务器，或者下载地址，然后手工下载对应的 Box 文件（操作系统镜像文件），并导入即可，本文将帮你铲除这只官方镜像文件下载失败的拦路虎。
Vagrant 的优势：
 虚拟机对于系统级开发和测试工作具有不可替代的作用 手工安装的虚拟机非常  准备工作 我的测试环境如下，如果你的测试环境和我的不同，但是本操作方法和过程也同样的适用于相似的环境。
环境描述：
 macOS catalina version 10.15.3 vagrant 2.2.4 Virtuabox 6.0.15r135660  如果你也百度了’ vagrant box 国内镜像‘的话，结果会使你很失望，清华大学等站点只是缓存了个别的镜像文件，并没有其它版本特别全面的网站，更没有完整的镜像。如果你知道其它国内的镜像站点请告诉我，我会增加到本文。
Ubuntu 的可以浏览这两个目标下载网址。
https://mirrors.tuna.tsinghua.edu.cn/ubuntu-cloud-images/vagrant/
然后用vagrant 下面的命令就可以将 box 下载并且添加到本地。
 ubuntu 18.04 LTS:  vagrant box add https://mirrors.tuna.tsinghua.edu.cn/ubuntu-cloud-images/bionic/current/bionic-server-cloudimg-amd64-vagrant.box &amp;ndash;name ubuntu18
 ubunt 16.04 LTS：  vagrant box add https://mirrors.tuna.tsinghua.edu.cn/ubuntu-cloud-images/xenial/current/xenial-server-cloudimg-amd64-vagrant.box &amp;ndash;name ubuntu16
 ubuntu14：  vagrant box add https://mirrors.tuna.tsinghua.edu.cn/ubuntu-cloud-images/vagrant/trusty/current/trusty-server-cloudimg-amd64-vagrant-disk1.box &amp;ndash;name ubuntu14</description>
    </item>
    
    <item>
      <title>SLA、SLO 和 SLI 还是傻傻分不清么？</title>
      <link>https://example.com/blog/sre-sla-slo-sli/</link>
      <pubDate>Thu, 05 Mar 2020 17:37:29 +1100</pubDate>
      
      <guid>https://example.com/blog/sre-sla-slo-sli/</guid>
      <description>SLA、SLI 和 SLO 是 SRE 工程实践里非常核心的概念，但是大家在同时提到这些概念的时候，经常容易混淆。
长篇大论的文章反而容易使人更加疑惑，还不如画一张示意图说明一下，帮助大家一次性彻底梳理清楚这些不可以含糊不清的核心概念。说明一下，下图假设所讨论的 SLA 个数为 1，使用了软件工程中 ER 图的表达方式，但也有所变化。
一图讲清 SLA、SLO、SLI
本文不讲 why，只是帮助大家梳理清楚这些概念在以上人机系统中的相互关系。虽然不想做名词解释。但是为了方便起见，整理一个术语清单。
 SLA = Service Level Agreement = 服务质量/水平协议 SLO = Service Level Objective = 服务质量/水平目标 SLI = Services Level Indicator = 服务质量/水平指标  下面用人、事、物的逻辑进行阐释。
人和事 用从上到下，从左到右的顺序。
客户 - 每 1 个客户在使用产品服务时，都显性或隐性的基于某 1 个 SLA，SLA 和客户之间是一种 1 对 1 的文档关系，这份协议文档就显性或者隐性的存在于系统中。客户使用 1 种，或者 n 种连接方式访问产品服务的 1 个或者 n 个应用系统。
销售 - SLA 本身是所销售产品服务的一部分，它规定了承诺给客户的产品功用和质量。基于 SLA，客户可以选择用付费或者免费的方式使用产品。1 个/份 SLA 的销售工作可以由 1 到 n 位销售完成。销售和客户都幻想着几乎完美的 SLA，这样代表企业利益的销售，以及产品的客户就都可以达到双赢的局面，皆大欢喜。</description>
    </item>
    
    <item>
      <title>怎样使用两个DevOps研究模型？</title>
      <link>https://example.com/blog/2019-state-devops-report-insight-2/</link>
      <pubDate>Sun, 01 Sep 2019 17:27:16 +0800</pubDate>
      
      <guid>https://example.com/blog/2019-state-devops-report-insight-2/</guid>
      <description>本文要覆盖的章节是《 How to use the research models》 这一章。双模型在今年的报告中首次出现了，它们是效能模型和生产力模型。为什么会存在两个模型？有什么区别？有什么相似之处？最重要的问题是，你怎么用它们来指导你的DevOps工作？
本文的阅读建议：
 下载我整理的最新版的《DevOps能力成长模型》，含双模型分解图。 阅读和参考前5年的DevOps状态调查报告，了解今年这份报告的历史和发展历程。以前的文章中有下载链接/二维码。 阅读2019年的调查问卷的中文版，感谢中国DevOps社区翻译团队对英文原版问卷的翻译工作，如果你都不知道这些调查结果是通过什么问卷调查得出的，那真的是很可惜。如果你想用这套问卷工具在企业内部做调研，请使用前文中的免费调查服务申请流程。样例问卷的访问地址：https://www.wjx.cn/jq/43837840.aspx 在Google的网站上做极简版DevOps行业基础测试，它是6年行业调查结果数据库的首次对外开放。  模型是怎么诞生的？ 首先，我们需要了解一下这份持续了6年的报告是谁主导并开发的？这是一个怎样的团队？从DORA公司网站的这个页面上，可以看到团队人员介绍。https://devops-research.com/about.html 如下所示。
不做其它任何解读和评论，只想请大家关注一下分析报告的主持者的title : Dr Nicole Forsgren, CEO and Chief Scientist ; 翻译一下 Nicole Forsgren 博士，CEO和首席科学家。她是一个长期的IT行业从业人员，最早专注于DevOps的行业调研员。她持有管理信息系统的博士学位和会计硕士学位。从社交媒体上可以看出她和行业大咖Jez Humber和Gene Kim都是好朋友。
其次，如果你也回顾了所有往届的DevOps状态调查报告，我们应该能体会到这场历时6年行业调研的基本逻辑和脉络。在第一年就已经提出了四大黄金度量指标，并且以此为主线；每年反复验证状态，以及其他相关影响因素。使用了穷举的逻辑，每年根据行业的发展动态，根据和其它业内大咖的讨论，适当的加入新的调查点。当然每个调查的能力点也是需要每年反复确认和验证，调查点之间的逻辑关系也越来越明显，经过二次研究之后就形成了DevOps能力成长模型。
最后，DevOps能力成长模型诞生于《Accelerate:The Science of Lean Software and DevOps: Building and Scaling High Performing Technology Organizations 》这本书。 https://www.amazon.com/Accelerate-Software-Performing-Technology-Organizations/dp/1942788339
在这本书里分模块（局部）的介绍了DevOps能力模型的影响逻辑关系，从转型型领导力一直推导出模型的最右侧：组织效能和非商业效能。这个模型应该就是历届DevOps状态调查研究背后的理论基础，当然它也应该是慢慢发展和完善出来的，起码数字转型这个话题是2018年才出现的热点。模型的数值计算算法，见近两年报告的附录部分。这个模型在本书中是从各个不同的局部关系逐渐介绍的。如下图所示：
Accelerate全书的逻辑不仅在于介绍各种DevOp实践、技术、文化、领导力等等相关因素有哪些，更重要的是揭示出这些影响因素（能力点）之间的关联关系。在书的最后展示了DevOps能力成长模型的全图，如下图所示：
Accelerate这本书也提供了这幅图的电子版下载链接：https://devops-research.com/assets/transformation_practices.pdf
这是一份非常棒的学习资料，如果你还没有买本书的话，也可以下载学习这份精华资料。这份文档的总标题是：”调研总体策划“，除了模型之外该文档还提供了一张全面复杂的表格，表格的名字：”高效能团队，管理、领导力行为和实践调查表，由Steve Bell，Karen Whitley Bell“；如果你想对自己的组织进行全面的调研的话，这也是一份优秀的调研方案。调研的矩阵如下：
 纵向：文化、组织结构、直接学习和对齐价值、部署策略、通过分析提高流动性和训练有素的问题解决、工作方式节奏化&amp;amp;日常化 横向：团队实践、管理实践、领导力实践。  我很有幸2017年在北京DevOpsDays大会上参加Jez先生的培训，并获赠了Jez先生的签名版《Accelerate》纸版书，其实在这以前我已经购买了Kindle的电子版和Audible的有声书版。我反复研读了这本书的各种版本，再次强烈推荐所有DevOps相关的管理者一定要学习这本书。
以书中的模型为基础，2018年的DevOps状态报告里以又进一步做了各种扩展，如果你读过去年的报告，你可以看到如下的各种局部的扩展。
大家注意看2018年的这个局部模型图的标题”精益和敏捷实践“，这里也包含敏捷开发实践。我在反复琢磨这个模型之后，用Twitter私信问过Nicole博士。我问他为何没有专项调查过敏捷开发实践？模型上为何不给敏捷开发一个位置？她的回复是，我们之前已经调研过了，而且模型上也提到了。可能在全球的软件开发工程水平看，有可能Nicole博士团队认为敏捷开发应该是比较基础的软件开发实践，据我个人了解国外高水平公司要么都已经规范照做了，要么也有像Google这样的高水平公司确实也不显性的宣传自己是敏捷开发，甚至吐槽敏捷的。
2018年对模型的扩展力度还是很大的，提出了很多新的调查项；为了能看到方便的看到一个DevOps能力模型的全景视图，我使用OmniGraffle软件基于《Accelerate》书中的模型，扩充绘制了如下的模型图：
这幅图向我们完整的揭示了到2018年以来的所有DevOps调研点，有些点是经过多年反复验证的，有些是2018年新引入的。这幅图花了我几天时间，在这个过程中也反复的推敲了其中的逻辑关系。这幅图仅代表我个人的观点，不代表DORA和《Accelerate》书籍的任何观点；需要声明的是：我绘制的DevOps能力成长模型并非我的个人著作，引用了DORA和《Accelerate》的著作，但我力求精确无误的表达整个模型。再次声明，这个模型图非官方出品，是我的个人研究。
研究模型的研究逻辑是穷举法，是从左到右的推导和影响关系。最新发布的2019年DevOps状态调查报告显示了新的变化，这触发了对以上模型的更新。本文将提供最新版高清大图的下载。
为何两个模型？ 为何2019年会分化出两个模型，简单的讲：穷举的范围越来越大了，生产力作为一个新的全局共享目标进入了调查问卷的范围。我们之前社区的小伙伴已经将2019年的近100道调查题问题翻译成中文了，敬请参阅参考DevOps状态调研问卷。在翻译完那些题目后，我并没有意识到今年可能会新增出这样一个全局共享目标的调研对象，真的以为：这个效能模型（组织效能和非商业效能）会一条道走到最后。</description>
    </item>
    
    <item>
      <title>如何做横向行业的DevOps表现基准测试？</title>
      <link>https://example.com/blog/2019-state-devops-report-insight-1/</link>
      <pubDate>Wed, 28 Aug 2019 07:27:16 +0800</pubDate>
      
      <guid>https://example.com/blog/2019-state-devops-report-insight-1/</guid>
      <description>长期关注我的blog和微信公众号（DevOps教练）的朋友可以发现，我今年从这个调查问卷开始，陆续发布了一些列文章。如果给这些文章一个文集标题的话，那么应该是：死磕2019年加速度全球DevOps状态调查报告系列。 为了帮助大家充分利用这份优秀的行业报告，我会用一些列文章，分章节的解读这份长达80多页的报告。上一篇文章如果你已经解读了该报告的核心重要发现和看点。本文要覆盖的章节是 How do we compare 这一章。
本文的阅读建议：
 先阅读和参考前5年的DevOps状态调查报告，了解今年这份报告的历史和发展历程。以前的文章中有下载链接/二维码。 阅读2019年的调查问卷的中文版，感谢中国DevOps社区翻译团队对英文原版问卷的翻译工作，如果你都不知道这些调查结果是通过什么问卷调查得出的，那真的是很可惜。如果你想用这套问卷工具在企业内部做调研，请使用前文中的免费调查服务申请流程。样例问卷的访问地址：https://www.wjx.cn/jq/43837840.aspx 在Google的网站上做极简版DevOps行业基础测试，它是6年行业调查结果数据库的首次对外开放。  WHY DEVOPS？ 这是一个可以持续反复问自己的问题，首先让我们澄清一件事情：为什么要做DevOps？
是否是为了提高研发效能？是否是为了提高生产力？是否是为了提高效率？这些答案可能都对，也可都不对。对于一个组织而言：如果IT对它的使命和目标至关重要的情况下，组织对IT会产生强依赖关系，DevOps才对该组织才有意义。历年来的DevOps状态调查告诉我们：DevOps对于那些以IT为命脉的组织而言直观重要，对所有从事软件交付的组织广泛有效。
从DevOps能力成长模型中可以看出，图中的诸多能力项都正向贡献/预测到最右侧的两个组织级别目标，他们是：组织效能和非商业效能（商业和非商业目标），它们是：
 盈利能力 （商业） 生产力 市场份额 （商业） 客户数量 （商业） 产品或服务的数量 （商业） 运营效率 客户满意度 （商业） 提供的产品或服务的质量 （商业） 实现组织或使命目标  如果你的某项/某几项DevOps实践能够直接贡献到以上的商业目标，或者说能持续的创造客户价值，即商业价值；那么你的DevOps就是成功的。反之，如果你仅仅期望研发效能、生产力、效率能够就等同于创造出了很多的客户价值，那是一种幻觉；这就像是：你经过了很多预赛和体能的准备，而在冠军争夺赛中，你依然名落孙山，当你的组织的绩效远远低于预期的商业目标的时候，你的各种XXX效率都是无用的。
四大黄金度量指标 6年来的DevOps状态调查报告（我只关注DORA主导和执行的这个）已经在用量化的方式，帮助我们作出了精英表现者的画像，当然还有其它的落后者。可以明确的一点是：强者从四个维度上同时都表现强劲。（去年已经打破了常见的一个误区：过度的保守主义导致在组织四个指标之中做折中选择，常见的是牺牲吞吐量指标，确保稳定性，可是后果往往是相反的。）
先来回顾和梳理所谓的四大黄金度量指标的分类：
 吞吐量&amp;ndash;部署频率：对于您工作的主要应用程序或服务，您的组织在生产环境进行代码部署或向最终用户做发布的频率。调查这个指标的问题见2019年加速度DevOps状态调查问卷中的第二部分的第二题。 吞吐量&amp;ndash;前置时间：对于您工作的主要应用程序或服务，从代码提交到在生产中成功运行的过程需要的时间。调查这个指标的问题见2019年加速度DevOps状态调查问卷中的第二部分的第一题。 稳定性&amp;ndash;服务恢复时间：对于您工作的主要应用程序或服务，当服务中断或出现影响用户Bug时（如：计划外中断、服务受损），恢复服务通常需要的时间。调查这个指标的问题见2019年加速度DevOps状态调查问卷中的第二部分的第四题。 稳定性&amp;ndash;变更失败率：对于您所工作的主要应用程序或服务，对于生产变更，或向最终用户发版的变更，百分之多少会导致服务质量下降（如：服务受损或服务中断），并需要进行后续的修复工作（需要热补丁、回滚，前向修复，打补丁修复）。调查这个指标的问题见2019年加速度DevOps状态调查问卷中的第二部分的第五题。  上面的四个指标是DevOps状态调查报告使用cluster算法做受众分类的主要依据，这个类聚分析的结果就是那张四大DevOps等级的泡泡图。
在这个泡泡图中，我们可以看到有多少比例的受访者处于精英、高效、中等和低效的阵营。复述一下今年的一个重大发现：精英表现者已经从去年的高效能表现者集团中脱颖而出，他们在指标的绝对值和总体数量上都增长迅敏，增长率高达将近3倍。【DevOps教练点评：回顾一下这份报告的标题中加入的加速度的关键字，一旦某个组织的实施方法得当，一个持续优化的组织的整体效能就可能做上火箭，加速度的飞离地球。而加速度不足的企业则处于持续跌回地面的窘境。】
这四大黄金度量指标的采集方法就是调查问卷中那些四个问题。对所有实践DevOps的组织而言，我们需要的是持续实施和优化追踪这些度量指标的方法和系统，确保能实时查看这四个指标的状态是最完美的。可是目前几乎还没有什么企业能够做到，手工分别统计上报，定期公布到全体IT部门也是非常可取的做法。总之，没有度量就不存在管理，就无从系统性的改进。
我在行业里的表现如何？ 这是我写作本文想要回答的核心问题。如果你能够度量自己的四个黄金指标了，也能够随时拿出一组确切的数据，我们就能做行业基准测试比较了。
这可能是Google收编DORA团队所买到的最有价值的一部分资产，历年来的DevOps调查问卷参与者的问卷答案数据库。Google今年将这个数据库向公众开放了，网址在 https://beta.devops-research.com/performance.html (这个网址应该不用科学上网，会出现证书错误提示，请忽略继续访问该页面)。在你回答了下面的五个问题后，就可以获得一份自己的行业基准测试报告。
最后一个问题是，从13个行业中选择出一个最合适的所在行业。
下图是你在整个所有行业里的横向对比。
下图是你在所在行业里的横向对比。
下图是四个黄金指标在四个表现级别/集团上的度量；表明你每个指标处于哪个等级。
经过以上的最简版DevOps表现状态基准测试以后，你就看到了你在所有行业中和所在行业中的横向比较。当然，我们也能预测一下自己处于那个阵营和等级。然而，这并不是你的DevOps旅程的剧终情节。
所有DevOps的实践者一旦上路以后，都是一条不归路的感觉，我们可以定期的关注我们的基准测试结果，并观察自己在动态变化的行业基线中的位置，而更重要的是：找到每个现阶段的改进空间，并且持续突破自己DevOps的能力瓶颈和极限。持续的无限制的加速度发展所有DevOps能力点才是这个DevOps旅程的终极意义。
关于服务运维效能 服务效能指标是在去年的效能报告中新引进的，而在去年和今年的调查问卷和结果报告中并没有直接的关于这项指标的采集数据和结果。
从上图中我们可以直接的理解一下，左侧的四大黄金指标都关乎于软件开发部门，而这个指标关乎于服务运维部门。去年并没有给出关于可用性指标的度量方法，今年也没有在调查问卷中做直接/显性的问题设置。只是在今年2019年的报告中做了进一步的解释，说这个可用性指标的实施方法论是SRE套路。我正在翻译SRE Workbook，这本书比起之前翻译的DevOps Handbook，更具有实操性。我们拭目以待，明年的状态调查问卷是如何对可用性设问和调查分析的。关于SRE的基础概念和实施方法，心急的朋友不妨参加中国DevOps社区今年10月在杭州举办的年度大会，我有一个关于SRE的主题分享，让我们一起讨论SRE的落地套路，让用SRE套路使我们的DevOps故事闭环。
总之我们实践DevOps的时候要全局的关注“软件交付和运维效能”，简称SDO效能（software delivery and operational performance）；有O了才完整的闭环了。
总结 本文写道这里，我认为你可以无障碍的阅读2019年加速度全球DevOps状态调查报告到第25页了。我们总结一下，你应该能理解吞吐量和稳定性的四大黄金度量指标的定义；持续度量和关注这些指标的正确方法；使用Google所提供的极简版度量工具，找到自己在行业中的定位和所处的效能级别。关注SDO效能的完整性，尝试了解和实践SRE实践，让你的DevOps体验闭环和完整起来。下一期死磕2019年加速度全球DevOps状态调查报告系列将为你呈现更新版本的DevOps能力成长模型，进一步讲解如何应用今年分化出来的两个研究模型：SDO和组织效能模型与生产力模型。</description>
    </item>
    
    <item>
      <title>2019年加速度DevOps状态调查报告-导读</title>
      <link>https://example.com/blog/2019-state-devops-survey-report/</link>
      <pubDate>Thu, 22 Aug 2019 07:27:16 +0800</pubDate>
      
      <guid>https://example.com/blog/2019-state-devops-survey-report/</guid>
      <description>凭借六年多的来自全球31,000多名专业人士的数据的研究，2019年加速发展状态报告是同类研究中规模最大、持续时间最长的研究。2019年加速度DevOps状态调查首发，首发的位置在Google Cloud网站上的Blog栏目，发布于产品新闻分类下。
  文章使用的主标签 DevOps 、SRE。    文章地址：https://cloud.google.com/blog/products/devops-sre/the-2019-accelerate-state-of-devops-elite-performance-productivity-and-scaling  下文为对Google文章原文的翻译和整理。并且加入了我本人的各种判断和见解。
关于今年的DevOps状态调查报告有什么更新和变化？报告文章中给我们了一句话的概要介绍：今年会对部署工具链、云计算、灾难恢复和工作方式等主题进行深度调查。更详细的情况，详细的参过问卷调查的您自有评判。
‘DevOps之研究和评估’（DORA）是通过数据驱动的洞察力，帮助组织实现DevOps和高效能组织的先驱，而Google Cloud很高兴地宣布推出2019年加速DevOps报告 。（前期文章介绍过DORA加入Google Cloud的细节） 该报告提供了DevOps行业的全景视图，为各种规模和所有行业的组织提供可操作的指导，从而提高他们的软件交付效能，最终使之成为精英DevOps实践者。
2019年的新洞见 我们看到：有持续的证据表明了软件的速度、稳定性和可用性有助于提高组织绩效，今年我们能够发现一些关于推动DevOps高绩效表现，以及实践和功能的新洞见。 部分如下所示：
 DevOps已经‘跨越了鸿沟’：各个行业的组织继续地提高着他们的DevOps专业知识，特别是在表现最高那部分人群中。 精英表现者的比例几乎提高了两倍，目前他们占所有组织的20％。 这也得到了其他行业分析师报告的证实。【教练解读：精英表现者实现了从7%到20%的增长。】    精英表现者更有可能使用云计算 ：快速自动扩缩容、成本可见性和可靠性是云计算提供的一些关键优势。更具国家标准与技术研究院（NIST）定义的云计算所具有的五项特征功能，效能最高的DevOps团队比低效能团队在这些方面执行的可能性高24倍，5大特性包括按需的自助服务、广泛的网络访问、资源池，快速弹性和可度量的服务。 【教练解读：你们家使用的云计算是假的。】
  大多数云计算用户并未充分发挥其潜力 ：只有29％的使用云计算的受访者符合NIST上述的五项标准特征。 这证明了这样一个事实，即声称使用云计算的组织，未必采用了所有必要的云计算特征模式来实现精英水平的业绩，这也有可能会阻碍他们通过云计算获益。 【教练解读：你号称的优势正在阻碍你。】
  首次呈现出了行业差异性 ：在今年的报告中，零售行业在速度和稳定性方面都展示出了更好的表现。然而，与前几年保持一致的是，根据持续的证据表明，DevOps更好或更差的表现，并没有其行业的差异性。这依然表明：各种类型和规模的组织，包括金融服务、政府和零售等高度监管的行业，也都是可以通过应用DevOps实践来实现高水平的绩效。【教练解读：今年零售业做的很突出，还是你们进来刷榜了？】
  DevOps走进企业 - 第1部分 ：我们首次发现，根据证据显示大型企业组织（员工人数超过5,000人）的效能低于小型企业（员工人数少少于5,000人）。重量级的流程和控制措施，以及紧耦合的体系架构是导致较低速度，以及相关不稳定性的部分原因。【教练解读：大型组织的坑也更大。】
  DevOps走进企业 - 第2部分 ：我们的分析显示最高能的DevOps表现者（即高级和精英表现者），专注于通过结构化的解决方案来构建DevOps社区，这些解决方案包括以下四种模式之一：社区建设者、大学、涌现和实验者（Community Builders, University, Emergent, and Experimenters）。【教练解读：需要给它山之石提供存在的土壤。】
  没有“一刀切”的方法，成功有赖于一致的努力付出 ：在投资于DevOps的各项能力时，特别是在大型组织中，需要同时关注团队级别和组织级别的工作成果。在团队层面上，持续集成、自动化测试和监控等实践的一些工作投入运作良好。组织级能力包括：在多个部门和团队之间，设置系统体系结构或变更审批策略的能力。 该报告分解了这些能力并概述了应该采取的策略，因此您也可以执行相关的DevOps策略，并从中获得最大的效果。【教练解读：单纯的刷某个团队或者项目也是然并卵。】
  表现较差的组织比高级和精英表现者使用的软件更多 ：维护和支持私有商业软件的成本可能过高，这促使高级和精英表现者使用开源解决方案。 这和以前报告中的结果一致。 事实上， 2018年的加速度 DevOps报告就表明，精英表现者大量使用开源组件、库和平台的可能性是其它组织的 1.</description>
    </item>
    
    <item>
      <title>中文版：2019年DevOps状态调查问卷</title>
      <link>https://example.com/blog/2019-state-devops-survey-chinese-version/</link>
      <pubDate>Mon, 06 May 2019 12:27:16 +0800</pubDate>
      
      <guid>https://example.com/blog/2019-state-devops-survey-chinese-version/</guid>
      <description>本文是中文版《2019年加速度DevOps状态调查》问卷。如果你还没有填写该问卷的话，可以在线上填写英文版，点击这个链接 https://bit.ly/2UzLMH2 ，进入问卷调查网站。本文可以作为你的帮助文档。
 译者团队：刘征、张晔、刘頲、朱婷、王英伟、王虹、李建芳、沈越飞、井建宇、申屠欣欣
 本文由以上翻译团队经过两周的时间，在业余时间翻译完成，如果对本文有任何改进建议请发邮件到 martin AT DevOpsCoach.org
发布本文的另外一个原因：作为历时6年，被称之为DevOps界之科学的调查研究，我们可以透过这套问卷，洞察如何用问卷的方式定量的度量DevOps的现状。对于已经实施了多年DevOps企业，本问卷可谓是一道营养丰富的大餐。
历年来的DevOps状态报告 如果你需要下载学习的话，请点击下面的链接（扫码二维码），这里还有历年来英文版报告全集和部分中文版本。
 下面是2019年DevOps状态调查问卷的简体中文版译文。
第一部分 欢迎参加2019年全球DevOps全球行业调查。
 我们有兴趣了解您的工作方式以及工作环境。  答案并没有对错。  如果您不知道答案，可以选择“我不知道或不适用”，您的作答将被忽略。  非常感谢您花时间帮助我们去探索那些能使技术进步的秘密！
1. 您的组织主要属于哪个行业？  教育 能源 金融服务 政府 医疗保健和制药 工业与制造业 保险 媒体/娱乐 非盈利 零售/消费品/电子商务 技术 电信 其他。请明确说明： [____]  2. 有多少员工在您的组织里工作？  1-4 5-9 10-19 20-99 100-499 500-1,999 2,000-4,999 5,000-9,999 10,000+ 我不知道  3. 你们的服务器上都部署了哪些操作系统？   Windows 2003 / 2003R2 Windows 2008 / 2008R2 Windows 2012 / 2012R2 Windows 其他 Linux Debian / Ubuntu变种 Linux Enterprise Linux变体（RHEL，Oracle，CentOS） Linux Fedora Linux SUSE Linux Enterprise Server Linux OpenSUSE Linux Arch Linux其他 其他的UNIX FreeBSD / NetBSD / OpenBSD系统 AIX Solaris 其他  4.</description>
    </item>
    
    <item>
      <title>2019年DevOps状态调查问卷开放中</title>
      <link>https://example.com/blog/2019-state-devops-survey-open/</link>
      <pubDate>Sat, 20 Apr 2019 22:27:16 +0800</pubDate>
      
      <guid>https://example.com/blog/2019-state-devops-survey-open/</guid>
      <description>2019年加速度DevOps状态调查首发，首发的位置在Google Cloud网站上的Blog栏目，发布于产品新闻分类下。
 文章使用的主标签 DevOps 、SRE。 文章地址：https://cloud.google.com/blog/products/devops-sre/make-your-voice-heard-take-the-2019-accelerate-state-of-devops-survey  关于今年的状态调查有什么更新和变化，文章中只给出了一句话的概况：今年会对部署工具链、云计算、灾难恢复和工作方式等主题进行深度调查。更详细的情况，详细你参与完问卷调查只有自由评判。
如何参与2019年DevOps状态调查 点击这个链接 https://bit.ly/2UzLMH2 ，进入问卷调查网站。
从围观到参与是一种积极的态度。与其观望这份行业报告的产生过程，倒不如参与其中。由于今年这个问卷调查是Google发起的，可能会有更多的人会参与。
精通英文的人应该能在半个小时内完成这个调查。如果英文不好的话，最多也用不了2个小时，以上推测，基于我去年的填写经历。
我还想发起一个基于这个调查的兴趣小组，请符合以下条件之一的人进微信群交流：
 正在认证填写这份问卷，想从群里获得必要的帮助，从而可以能正确的作答。 想研究这份文件的题库，大家共同分析DORA设问的目标和结构。 跟进一步的，交流关于DevOps度量方面的话题  关于2018年的DevOps状态报告 有幸去年策划和参与了这份报告的翻译工作。也算是相对其他人更深入的学习和研究了去年的结果。并对它的总结和推论都有非常深刻的印象，也受益匪浅。
2018年DevOps状态调查报告的中文版本，在2018年DevOpsDays 深圳大会上做了发布，我也在台上和张乐一起向与会者做了简短的分享。如果你需要下载学习的话，请点击下面的链接（扫码二维码），这里还有历年来英文版报告全集和部分中文版本。
在2018年里Nicole Forsgren博士发布了《Accelerate》这本书，书里算是对这场从2014年开始的，持续对年的行业专项调查研究的一个总结。书中对度量DevOps这个主题做了详解科学的解读，它是那些需要度量DevOps成果的组织的一本很好的参考书。中文版本据说在翻译的过程中，期待它的出版。等不及的话可以去国外买英文电子版，这本书我是读了不下三遍，也做了相关的分享演讲，确实有很多收获。
分享几个我观察到的小细节：
 DORA在2018年结束了与Puppet公司的合作调查，因此2018年的报告标题中增加了一个单词“加速度”，即：2018 Acclerate State of DevOps Report； 以前的都叫做 xxxx年 State of DevOps Report。 Puppet公司也没有闲着，Puppet和Splunk公司携手也进行了状态调查和分析，也发布了名为《2018 State of DevOps Report》，问卷的问题肯定和以前无法延续和持续的，但是报告的命名保持下来了。我猜这也是为何DORA的报告需要加一个词的原因，  总结一下，由Nicole Forsgren博士主持进行的DevOps状态调查报告的下载站点都在 https://puppet.com/resources/whitepaper ， 在这里依然可以下载到名为 2018 State of DevOps Report 的报告，但是这一个和Nicole博士无关；所有她主持的报告下载地址在她的DORA网站上 https://devops-research.com/research.html 。 在DORA加入了Google Cloud以后，Nicole博士主持的调查问卷名为“ Accelerate State of DevOps Report” ； 相信我们所期待的最终的分析结果的标题应该是“ 2019 Accelerate State of DevOps Report” ； 而Puppet公司应该还是会持续发布名为“2019 State of DevOps Report”的报告。我相信肯定会有很多人在2018年去年就有点晕了，怎么出来两个名字相似，可是内容大相径庭的DevOps状态报告。</description>
    </item>
    
    <item>
      <title>2019年关于DevOps的几个预测</title>
      <link>https://example.com/blog/predictions-for-devops-in-2019/</link>
      <pubDate>Sat, 09 Mar 2019 22:27:16 +0800</pubDate>
      
      <guid>https://example.com/blog/predictions-for-devops-in-2019/</guid>
      <description>本文汇聚了来自3个网站的预测文章，他们分别是XebiaLabs、G20Group和Veritis。在总共22项预测中，个别预测是相同的。DevOps是一个持续进化和发展的过程，同时也受到目前各种新技术的影响。
XebiaLabs的7个预测 英文原文： https://blog.xebialabs.com/2019/01/10/7-predictions-for-devops-in-2019/
1. 持续集将成作为流水线的重要代办事项 如果企业希望提高团队用在功能开发上的可用时间，从而加速向生产环境中交付的话，那么在整个DevOps流水线中，引进持续集成CI部分将成为高优先级且重要的事项。监控CI流水线相关的数据、活动和流程的能力将变得非常重要，这样可以使发布流程中的所有人都能看到最新的流程状态，从而减少开发人员花费在无关任务上的时间。 【来自：XebiaLabs产品开发副总裁Andreas Prins】
2. 价值流映射将被广泛使用 目前，随着软件交付的速度和质量正成为大型企业的巨大竞争优势，越来越多的组织将会探索价值流映射（Value stream mapping）的使用方式，从而确保他们的软件开发是和整体业务价值保持一致的。这种转变将会减少软件发布流水线中的浪费，并创建出更强大的跨职能团队协作。【来自：Lisa Wells，XebiaLabs产品营销副总裁】
3. 实时挖掘软件交付流水线所产生的数据 在2019年，IT部门通过软件持续不断创造业务价值的压力将会越来越高。因此，组织将用各种方法挖掘在软件交付流程中大量的由机器所生成的数据，而不只是在事后才进行分析，甚至还包括DevOps的可预测性。这样才能够更好地预测软件交付流程和基础架构中所发生的问题，而这些问题可能对应用程序的质量和安全性产生负面影响，可能会使产品上市时间延期。【来自： Lisa Wells，XebiaLabs产品营销副总裁】
4. 在人和流程中培养责任共但文化 DevOps同时关乎于人、流程和工具。对于任何DevOps实施计划而言，需要将人和流程视为首要的交付价值的因素。在2019年，我们将看到企业会越来越重视培养承担责任的文化，团队在复杂的应用程序交付流水线中共同承担质量和效率的责任。各个团队需要及时了解协作和进度。关键是在项目的进展过程中，及时的与整个公司分享那些取得了成功的措施和及其成果。除了证明他们的努力能够带来重大成果之外，毕竟，也没有什么比这种方式更能激励团队的了。【来自：T.J. Randall，客户成功副总裁，XebiaLabs】
5. 自服务部署将成为主流 随着自动化部署已经成为企业的标准实践，随着组织逐渐地意识到可以将信息安全和合规性也融入到他们的交付流程中，在2019年，自助服务式部署会成为主流的工作实践。【来自：T.J. Randall，客户成功副总裁，XebiaLabs】
6. 建立自己的DevOps能力度量组合 随着DevOps的投资增加，管理层将需要更多的投资回报率证据。团队需要建立他们基于全局测量（不仅仅是单个团队或个人）和结果（具有速度和稳定性的软件交付）的组合来测量DevOps（DevOps Intelligence）的能力。【来自：Vincent Lussenburg，DevOps战略总监，XebiaLabs】
7. DevSecOps融入到DevOps流程中 对信息安全“前置（左移）”的需求将会在DevOps实践中得到更好的理解和更有效的应用。在2018年，“前置（左移）”经常被滥用，被误以为会把软件的安全性责任推给开发人员。在2019年，DevSecOps将成为DevOps的另一个自然的选择，将安全性融入到流程中的每个阶段，并且所有人都对安全性有责任。【来自：Vincent Lussenburg, Director of DevOps Strategy, XebiaLabs】
G20Group的5个预测 原文：https://www.go2group.com/blog/devops-trends-2019-our-top-five-predictions-for-the-year/
由于文章比较长，下面是核心观点的概述。
 使用AI加速/优化的DevOps将开始被逐渐应用。基于AI的预测性可以被用在CI或者CD栋流水线过程中，确保交付流程的有效性。这个趋势将加速应用开发者和数据科学家之间的协作。 容器化应用不在是新鲜事物了。DevOps和多云架构加速了容器相关的技术在大型企业中国的使用。越来越巨大的软件开发和部署规模也进一步提高了容器生产环境集群的规模和复杂性。Kubernets的广泛使用也进一步加速了应用容器化的进程。 Functions-as-a-Service (FaaS) 将会崭露头角。随着越来越多的专业人士在生产环境中广泛的使用容器技术。相信FaaS也会逐渐被应用起来，它也比称之为无服务器计算。这种技术的实现包括：AWS Lambda、Google Cloud Functions, Microsoft Azure Functions, IBM 等。 DevSecOps会变得更加重要。随着企业应用DevOps的范围逐渐扩大化，将安全性和合规性无缝的集成到DevOps转型过程中也得到了广泛的接受。主流的DevOps实践者会把安全性视为代码，安全团队会在DevOps工作流中和各种团队携手打造安全性。 自动化将会依然非常重要。企业越来越意识到在软件开发周中提高响应速度、运维的可恢复性、更快的上市时间的重要性；这需要将软件开发和运维工作通过自动化更好的链接起来。组织在复杂的生态系统中扩大自动化的应用还是有些难度。  来自Veritis的10个预测 原文： https://www.veritis.com/blog/devops-trends-top-10-predictions-for-devops-in-2019/</description>
    </item>
    
    <item>
      <title>产品管理遇上Devops</title>
      <link>https://example.com/blog/csg-product-meet-devops/</link>
      <pubDate>Thu, 07 Mar 2019 12:27:16 +0800</pubDate>
      
      <guid>https://example.com/blog/csg-product-meet-devops/</guid>
      <description>DevOps企业峰会是历史悠久的DevOps主题企业级峰会，近年来在北美的拉斯维加斯和欧洲的伦敦每年各举办一次。 这个大会的官网：https://events.itrevolution.com/ 2019年的会议时间已经发布，感兴趣的可以参加。
CSG公司连续多年参加DevOps企业峰会，本分享主题是CSG在2018年美国拉斯维加斯的峰会上的主旨演讲之一。本文是对这个演讲的视频回放的整理，该视频已经上传到了腾讯视频。

CSG International公司简介 CSG是一个基于SaaS的客户支持和计费公司。CSG是美国最大的账单打印和呼叫中心公司。帮助他们的合作伙伴公司完成水电费、宽带费、通信费等相关业务的收款工作，并为最终客户提供热线电话支持。
CSG的技术堆栈范围广泛，从Mainframe主机到Linux开放系统到AWS云服务，CSG认为如果正确的运用DevOps技术的话，技术堆栈并不是阻力和限制。
CSG的DevOps旅程经历了如下几个阶段。
2012年 敏捷转型 敏捷转型历经四年，进行了组织结构调整，在这个过程中关注点和亮点如下：
 应用精益思想消除了各种等待队列 应用康威定律重组重组了团队 重组团队之后形成跨职能团队，将设计团队，开发和测试团队融为一体 实施持续集成技术，落地持续部署流水线作为业务开发的基础设施 实施了测试自动化 实施了共享的遥测数据，这就是今天所热议的可观察性 将作业批量尺寸缩减为以前的一半 成立了多个独立于研发团队的共享的运维团队【注意：运维还没有和研发团队融为一体，共享运维团队管理所有IT环境并和所有产品团队协作】  敏捷转型的效果：
 发布影响业务的事件数量下降（在固定的时间周期里统计由于发布导致的影响客户服务的事件数量） 变更失败率下降  2012-2015 敏捷转型和DevOps早期 在敏捷转型的持续集成的基础上，CSG实施了持续部署实践，持续部署被视为应用DevOps实践的标志性动作，将所有部署转为为可重复执行的自动化部署。
上图是运维工程师们在工作时段里进行日间部署的场景，但是平均每天进行15.1个部署，71个面向最终用户的特性发布。在部署期间，运维工程师们在信心满满的打着电动。由于每一个生产环境的部署都已经做过了大量的自动化测试，且在其它环境中至少部署过7遍了。
2016 反作用力和挣扎期 上图的情形应该很常见，CSG也经历了这个阶段。
开发团队追逐：
 交付速度 更好、更快的环境 更好的服务请求工具 憎恨变更请求队列（流程）  运维团队追逐：
 稳定性！ 高质量代码 更敏捷的工具 憎恨变更请求队列（流程）  开发和运维团队都厌恶的：
 变更管理流程 发布管理流程 生产环境的运维部门 PMO项目经理  客户想要的是：“更快得到高质量的特性！”
2016 DevOps团队融合阶段 大家一起反思这个问题：“我们为何不站在同一条战线上，一起追逐相同的目标？”
设置共同（共享）目标：更快、更稳定和更安全！融为同一个团队，为了更好的服务客户而努力奋斗。
2016~2018 后DevOps时代 为了化解在的研发和运维之间的依然持续存的矛盾现象，在大家反思之后；进行了再次的团队组织结构调整，消除了所有共享的运维团队，将运维团队的工程师融入了各个研发团队。
CSG的DevOps转型阶段的重点：
 运用了不同于双模IT的模型，即”统模IT“，在DevOps实践面前，各种类型的IT架构都一视同仁 转型后的开发团队统一负责产品的构建、测试、运行和服务质量 下放变更管理委员会（CAB）职责到各个开发团队，成立本地化的CAB（详见ITIL的术语表） 建立了群策群力的服务支持响应机制（参考精益思想的安灯拉绳），因此大幅度缩短了MTTR时间 实施了反向布兰特操作，消除大量普遍存在的布兰特（这是一个比喻，详见《凤凰项目》的人物布兰特） 建立整合的Backlog，将开发、测试和运维的工作统筹管理 实施基础设施自动化 将运维问题（目标不一致、反作用力、部门墙）视为工程实践问题：更好的工程实践，更少的苦活累活！  【注意】如上图所示，新增了一个度量指标：Inc/Mo 每月的事件数量（ITIL的术语），这是生产环境中每月发生的事件单的数量，数量的降低说明了生产环境的稳定性的提高。</description>
    </item>
    
    <item>
      <title>成熟度模型已死</title>
      <link>https://example.com/blog/maturity-is-dead/</link>
      <pubDate>Wed, 27 Jun 2018 21:34:04 +0800</pubDate>
      
      <guid>https://example.com/blog/maturity-is-dead/</guid>
      <description>上一篇文章重要观点回顾：
 应用DevOps的企业不应该使用成熟度模型度量 应用DevOps的不同企业/部门不会参考某个所谓标准 应用DevOps的不同企业/部门应该参考5大类24项的能力成长模型，来度量其发展进度，在磨练这些能力的过程中，选择符合自身业务需求的，且优先级别高能力先发展。  成熟度模型已死 这个模型在各行各业都可能存在，而且可能是最容易被人接受的模型之一。对于很多新生的领域，如法炮制的套用这个模型合适么？无论合适与否，它还是会出现在DevOps的领域中。为了避免实践者试错，我们不得来分析一下这种模型的特点。
特征1 它总是阶梯式的，而且从来都是5个等级，人们经常戏称为Golden 5。常见的5级成熟度模型有下列几种。
CMMI 能力成熟度模型集成
ITIL/ITSM的成熟度模型
IT与业务融合的成熟度 http://www.cio.com.cn/eyan/1431.html
德勤网络安全合规成熟度示意图
持续交付流程成熟度
如果你百度“成熟度模型”，还可以轻易地找到很多类似模型。客观的讲，这个模型是被广泛应用的神五级。
这个模型对于任何使用的组织来说都是统一的，不会说对于有些企业是8级的，对于另外一些企业是10级的。
这种模型的另外一个代名词是“XXX标准”，或者“XX行业标准”。
特征2 通常对于每个等级上还可以定义出3到7个不同的维度。维度的数量少则3个级别，多字7到10个维度；可以要在每一个级别的不同维度上进行评价。这些维度一旦确定下来，也通常是十年如一日的静止不变。
只是一种纵横交叉的矩阵的模式，如以上的持续交付流程成熟度、德勤网络安全合规成熟度示意图和IT与业务融合的成熟度都是这样。
维度和等级往往都是静态的，通常模型发布之后，在很长一段时间里，不会发生改变。
特征3 这些模型对于不同的组织而言，组织的目标都是一致而单纯的，即“通过/到达”某个级别。请你回忆一下以前的经历。一个软件开发组织经过一年的奋斗，他们通过了CMMI3级认证；第二年的时候，项目组一狠心，一跺脚一次性通过了5级认证。请问他们为什么一定要在第二年通过5级？在第三年里，相比以前，软件开发的质量提高了么？在第四年，有没有可能出现倒退的现象？如果你回答不了这些问题的话，可以尝试请教一个更资深一些的，工作10年以上的朋友或者同事。
成熟度模型的局限性 根据以上的三个主要特征，这种模型的局限性大概有以下几个方面：
每一个企业的自身条件、业务环境、资源约束都是不同的。让他们都对标一个统一的静态成熟度模型是不合适的。这就像是目前某些国家的教育体制一样。
IT行业每天都在发生着巨大的变化，这就是我么经常提到的乌卡时代，今年流行的技术，很快就会过时，明年也将出现新的、未知的技术领域。很多行业的特点就是，在不断反复的被颠覆。而这些成熟度模型通常是永恒不变的。
成熟度模型通常是在微观上进行考察，对很多考察点做孤立的分析和评测。这样做只能度量到技术、工具或者流程本身的一些方面。而忽视了组织通过它们所获得的总体成果产出。举个例子一个企业在通过了CMMI5级之后，发现收入/利润比以前还下降了；解释CMMI到达顶级的企业，业务收入还退步了，这本来就是一件比较尴尬的事情。
如果一个集团企业，在所有IT组织/部门中强推某种成熟度模型的话，还有可能出现停滞不前的博弈现象。某些组织可能会宁愿待在中间的某个不成熟等级，并不愿意快速的提升到最高等级。那样的话，他们将失去每年一定数量的，用于提高成熟度等级的资源和预算。从最大化局部利益的角度考虑，最高级的成熟度可能等于最低级的资源支持。
最后，无论到达了那个等级的成熟度，这种明确而清晰的满足感，滋生出了锚定效应。这其实阻碍了组织持续的探索和尝试未知领域，组织因此学习的知识就会越来越少。甚至于出现能力的下滑和倒退。
综上所述，在DevOps的领域里，成熟度模型和统一标准已经过时了，它不适合用于DevOps的度量；而且，纵观整个行业，国际上目前还没有那一个适用的DevOps成熟度模型被应用于任何组织。那么还有什么其他DevOps适用的模型？
DevOps能力成长模型 这个模型是在《Accelerate-加速器》这本书里被提出的。相信大家对Nicole博士联合Puppet Lab发起的DevOps状态调查和年度报告并不陌生。这本书分析了DevOps状态报告四年的历史数据，书里所展示的内容，其实也正好是作者Nicole Forsgren博士对DevOps现状调研的第一个迭代的阶段性成果。
这本书的目标是解密高效能组织的高明之处，以及背后的原因。从探寻影响组织绩效的因素为起点，经过了四年的不断调研，Nicole博士向我们展示了一个相对比较完整的，各种影响因素的关系网。特别说明的是：下图来自于《加速器》这本书，这个形态是经过4年演进出来的，我们无法猜测2018年Nicole博士究竟怎样地拓展了调研的范围；更无法猜测的是：在2018年的状态报告结果中，这幅图会变成什么样子？
Nicole博士总结出了DevOps能力的5大分类，包含的能力点有24项。
第一类：持续交付  对生产环境的所有工件进行版本控制 运用自动化部署流程 实施持续集成 运用基于主干的开发方法 实施测试自动化 进行测试数据管理 前置信息安全管理 实施持续交付  第二类：系统架构  应用松耦合的架构设计 授权团队进行架构重构的决策  第三类：产品和流程  收集和实施客户反馈 运用价值流模式可视化工作流 运用小批量的工作模式 培养和赋能团队进行试验  第四类：精益管理和监控  应用轻量变更审批流程 业务决策得到从应用到基础架构的全堆栈支持 前瞻性地监控系统的状况 应用WIP来进行价值流的工作管理 通过可视化来监控团队工作质量和进行沟通  第五类：企业文化  发展并支持生机型企业文化 鼓励和支持学习 支持和辅助团队间的协作 提供工作所需要的资源和工具 支持和落实领导力转型  DevOps能力成长模型的特点 首先，这个模型是基于4年以上的、科学的调查分析而来的。Nicole博士和全球最顶尖的DevOps公司，以及各种业内大咖，历经了多年的协作。其次，此模型是演变出来的，而且一定会持续更新。最后，分析一下这个模型的特点。</description>
    </item>
    
    <item>
      <title>参与2018年DevOps状态调查报告</title>
      <link>https://example.com/blog/2018-devops-survey/</link>
      <pubDate>Wed, 27 Jun 2018 00:09:21 +0800</pubDate>
      
      <guid>https://example.com/blog/2018-devops-survey/</guid>
      <description>听说这里有一个15分钟就能完成的DevOps调查问卷，有25位参与者或将得到总值为3200美元的亚马逊购物券。一年也就是这一次机会。问卷调查将在10天后就关闭。
这是DevOps状态报告调查问卷的第七年。在过去的6年里，已经有两万七千多人参与了这项调查。这项调查已经获得了丰硕的成果，主要是帮助你了解在DevOps之旅上当前的进展。今年又扩展了调查的范围，再度加深了对DevOps之旅的调研。
我已经帮你把问题的套路摸清楚了，其实问题都很清晰直白，很容易和你所在企业的DevOps状态做匹配。填写问卷调查也是一个学习的过程，可以用开放的心态去了解一下，调查报告对DevOps的观察角度都有哪些？
对其中的部分问题做出了简要的说明，预祝你在参加这项全球性著名调查的过程中，有一个愉快的体验。
今年的看点 据说DevOps状态调查报告的一个最大的价值就是：在你的组织中，你可以用这些数据展示出DevOps的价值，从而取得管理层的支持，并启动DevOps项目。
在今年的调查研究工作中，新加入的，对在企业中应用和推广DevOps有深度洞察的专家包括：
 Andi Mann, the chief technology advocate at Splunk and co-author of Visible Ops – Private Cloud and and The Innovative CIO. Michael Stahnke, a director of engineering at Puppet and the author of Pro OpenSSH. Alanna Brown, the director of product marketing at Puppet and creator of the first State of DevOps Report in 2013.  参加这项问卷调查将有25人会得到亚马逊购物券，价值 $100, $200 或 $500 ； 抽奖说明：</description>
    </item>
    
    <item>
      <title>Kops on Aws</title>
      <link>https://example.com/blog/kops-on-aws/</link>
      <pubDate>Mon, 02 Apr 2018 00:22:44 +0800</pubDate>
      
      <guid>https://example.com/blog/kops-on-aws/</guid>
      <description>kops这种方式是我找到的最佳的，最适合于培训课堂需要的安装方式，当然对有类似需求的人有帮助。
Route53 DNS配置 kops需要使用DNS服务，用主机名提供k8s的相关服务访问。配置的注意点：
 域名还是有必要有一个的，没有的话注册一个也不贵，以后用着也方便 建议在aws的Route53里做一个二级域名，例如：k8s.devopscoach.org 这个二级域名最好是能被正常公网解析的，为了便于直接访问集群里的服务 用 dig NS k8s.devopscoach.org 可以能正常解析（Mac上是这个命令）  由于全球的域名同步会需要一些时间，因此可以先做这一步，用到的时候，可能就已经同步好了。
kops会将所有主机的域名解析都自动化的添加A记录到这里。
安装工具准备 需要安装的工具包括 kubectl, kops 和 AWS CLI 工具。kops需要调用 AWS CLI来创建所需要的资源。我觉得简单的方法是：在目标的Region里创建一台Amazon AMI的虚拟机，这样AWS CLI就不用装了，而且在云里的话，执行kops的时候，由于有一大堆资源创建更新的api调用，感觉速度比在本机快很多，而且还用担心断网。
可以启动一台t2.micro规格的Amazon AMI即可，另外需要给这个实例配置如下IAM用户权限，在启动的时候选择合适的IAM Role。
 AmazonEC2FullAccess AmazonRoute53FullAccess AmazonS3FullAccess IAMFullAccess AmazonVPCFullAccess  这台虚拟机启动之后，安装kubectl和kops。
curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl sudo chmod +x kubectl sudo mv kubectl /usr/local/bin/kubectl wget https://github.com/kubernetes/kops/releases/download/1.8.0/kops-linux-amd64 sudo chmod +x kops-linux-amd64 sudo mv kops-linux-amd64 /usr/local/bin/kops 准备ssh登陆秘钥，用户ssh登录各个ec2实例
[ec2-user@ip-172-31-27-182 ~]$ ssh-keygen Generating public/private rsa key pair.</description>
    </item>
    
    <item>
      <title>容器化应用的设计原则</title>
      <link>https://example.com/blog/cloud-native-container-design/</link>
      <pubDate>Sat, 24 Mar 2018 20:51:01 +0800</pubDate>
      
      <guid>https://example.com/blog/cloud-native-container-design/</guid>
      <description>本文来自于Red Hat咨询顾问Bilgin Ibryam所编写的一篇白皮书，名为《PRINCIPLES OF CONTAINER-BASED APPLICATION DESIGN》。这篇文章在作者的Blog上发表后，作者的twitter被Kubernetes官方twitter转发。白皮书在Red Hat官网的下载地址：https://www.redhat.com/en/resources/cloud-native-container-design-whitepaper 文本是对这篇文章的学习和整理。
先回顾经典的软件设计原则：
 保持简单，愚蠢（KISS） 不要重复自己（DRY） 你不会需要它 （YAGNI） 关注点分离（SoC） Single responsibility, Open/closed, Liskov substitution, Interface segregation, Dependency inversion （SOLID）  然后是Red Hat的云原生容器设计原则：
 唯一关注性原则（SCP） 高度可观测性原则（HOP） 生命周期一致性原则（LCP） 镜像不可变性原则（IIP） 进程可处置性原则（PDP） 自包含性原则（S-CP） 运行时约束性原则（RCP）  很多组织都理解云原生的重要性和必要性，但是并不知道从哪里开始。那么请确保：云原生平台和容器化应用能无缝的运行在一起，并且具备抵御故障的能力，甚至在底层的基础架构出现宕机的时候，也能通过过弹性扩展的方式表现出可靠性。本文描述了容器化应用时需要遵循的基本准则，实施这些原则有助于使之与云原生平台Kubernetes更加适配。
唯一关注性原则 SINGLE CONCERN PRINCIPLE（SCP） 在许多方面，唯一关注性原则与来自SOLID的SRP是类似的，它建议一个类应该只有一个责任。SRP背后的动机是每个责任是变更的一个轴心，一个类应该有，且也只有一个需要改变的理由。SCP原则中的“关注”一词强调关注是一种更高层次的抽象的责任，而且它更好地将范围描述为一个容器而不是一个类。虽然SRP的主要动机是变化原因的唯一性，而SCP的主要动机是容器镜像重用和可替换性。如果你创建一个解决单个问题的容器，并且以功能完整的方式来实现，不同应用程序中的容器镜像重用的可能性就会更高。
因此，SCP原则规定每个集容器都应该解决一个问题，并做得很好。 实现这一点，通常比在面向对象的世界中实现SRP更容易，容器通常管理的一个单一的进程，大多数情况下一个进程解决一个问题。
如果你的容器化微服务需要解决多个问题，它可以使用这样的模式，将多个容器用sidecar和init-containers的模式合并成一个部署单元（pod），这样每个容器仍然是处理单个问题。同样，您可以替换处理同样问题的容器。 例如，将Web服务器容器或队列实现容器，更新为更具可扩展性的容器。
高度可观测性原则 HIGH OBSERVABILITY PRINCIPLE（HOP） 容器提供了一种统一的方式来打包和运行应用程序，将它们视为一个黑盒子对象。 但任何旨在成为云原生公民的容器都必须提供API支持，要为运行时环境编写接口（API），以观察容器的健康状况和行为。 这是自动化容器更新和生命周期回收的基本先决条件和统一的方式，从而提高系统的弹性和用户体验。
实际上，您的容器化应用程序必须至少为其提供不同类型的健康检查的API&amp;ndash;活动和就绪等状态。更好的应用程序的行为则必须提供其他手段来观察容器化应用程序的状态。应用程序应该将重要事件记录到标准错误（STDERR）和标准输出（STDOUT）中，从而通过统一的日志聚合工具（诸如Fluentd和Logstash之类的工具）进行分析，并与跟踪和指标收集库相结合，例如OpenTracing，Prometheus等。
将您的应用程序视为黑盒子，但实施所有必要的API以帮助平台对其进行观测，并以最佳方式管理您的应用程序。
生命周期一致性原则 LIFE-CYCLE CONFORMANCE PRINCIPLE（LCP） HOP规定了你的容器提供供平台观测的API。 LCP则规定：您的应用程序有办法读取来自平台的事件。 此外，除了获得事件以外，容器还应该对这些事件相应地作出反应。这就是此原则名字由来。这几乎就像在应用程序通过一个“写入API”与平台进行交互。
来自管理平台的各种事件都是为了帮助您管理您的容器的生命周期的。决定处理哪些事件取决于您的应用程序 以及是否对这些事件做出反应。
但有些事件比其他事件更重要。例如，任何需要一个干净的关闭进程，这就需要捕获信号：终止（SIGTERM）消息，并尽可能迅速关闭。 这是为了避免通过强制关闭信号：kill（SIGKILL），之后跟随一个SIGTERM。
还有其他事件，例如PostStart和PreStop，可能对您的应用程序生命周期管理也非常重要。 例如，某些应用程序需要在服务之前进行预热请求和一些需要在关闭干净之前释放资源。</description>
    </item>
    
    <item>
      <title>7种DevOps工程师必备技能</title>
      <link>https://example.com/blog/7-skills-devops-engineer/</link>
      <pubDate>Sat, 24 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/blog/7-skills-devops-engineer/</guid>
      <description>使用DevOps的目的是改变和改善开发与IT运营之间的关系，倡导两个部门之间更好的沟通与协作。虽然这看起来有些简单，然后，DevOps工程师还需要做更多的工作，才能成功部署代码，并将Dev和Ops两个部分成功地绑定在一起。
从应付DevOps压力的角度出发，DevOps工程师除了需要日常技能的基础，每个工程师都必须具备多种技能。DevOps工程师除了要对脚本和编码有着强烈的热情之外，还必须具有开放的思想和协作精神，才能成功地执行该过程。
“DevOps教练”参考一些文献，已经为你设计了一个清单，列出了下面的7种必备技能，公司的DevOps工程师的招聘需求里，应该明确提出下列所有品质。
1. 灵活性 编码是一个持续的过程，不断变化，总是需要更新。要成为一个成功而有效的DevOps工程师，理想的候选人必须有能力不断地开发新的系统，并将其集成到主干代码中。DevOps工程师必须具有灵活的工作技能并适应不断变化的代码。
无论是集成、测试、发布还是部署，工程师都必须能够轻松地从一个软件构建领域迁移到另一个领域。例如，持续集成需要具备快速有效地管理变更的技术技能，并且能够在团队中协作，以保证每个人都朝着共同的目标努力。
2. 安全技能 与许多其他所熟练的领域一样，安全始终是最重要的，尤其是在编码方面。黑客进入系统的一个简单方法是利用漏洞，破坏现有的系统并获取数据。 DevOps带来了更快的代码开发和部署周期，这意味着漏洞也比以前更容易引入代码。因此，工程师必须具备编写安全代码的技能，以保护应用程序免受不期望的攻击，此外还要确保系统针对常见的网络安全漏洞建立防御机制。
DevOps工程师在受雇时必须具备安全技能，因为软件从部署一开始就内置了安全性(而不是在以后添加)是至关重要。如果从一开始就没有安全措施，那么黑客就有更多的机会通过网络注入破坏性代码。因此，在招聘下一位DevOps工程师时，确保安全性是技能列表中最重要的一项。
3. 协作 对于一个成功的DevOps工程师来说，不具备八面玲珑的和周围打成一片的能力是不行的——协作实际上是DevOps概念的核心，它将软件开发和软件运维结合在一起。DevOps工程师必须具备团队合作的能力，在DevOps流程中协作提供了更多的跨职能的联动。
4. 脚本编写技巧 尽管这一点听起来很显然，但任何开发人员都必须具备编写代码的高超技能。无论是JavaScript、Python、Perl还是Ruby，一个成功的开发工程师都必须能够编写代码。
从编写手动代码到替换手动操作流程(如分配IP地址或DNS代码)，必须团队里必须具有能够编写这些代码的人员，这是完美的候选人应该能够做到的。
5. 决策 一个优柔寡断的候选人不是你想要的业务开发工程师。一个成功DevOps工程师候选人将有能力自信而迅速地作出决定，即使是在繁忙的环境工作。
代码不断变化的特性使得必须快速决定如何修复代码中任何不连贯的元素。果断性必须是雇用DevOps工程师时要考虑的一个因素，因为快速决策允许工程师保持快速开发和部署新编码更改的能力。
6. 基础架构知识 脚本编写只是开发人员应具备的关键技能之一，仅次于云和基础架构的经验。工程师应该对基于数据中心和云基础架构的各种组件的工作方式有一定了解。这包括软件如何联网、并运行在虚拟网络上等要素。
如果没有理解基础架构的能力，要成为全栈软件开发工程师可能会有些困难。整合基础架构技能将使有效的DevOps工程师能够使用最佳的平台，有效地设计和部署应用程序。还能提出优化建议。
7. 软技能 如上所述，当一名DevOps工程师不是一个人在工作，所以在这种情况下，任何未来的员工必须具备软技能和技术。在信任的前提下，DevOps文化使所有员工能够与流程进行沟通和理解，在需要的时候作出变化。
当开发人员有效地相互沟通时，应用程序可以在比某些工作人员不在上下文中的情况里要短得多的时间内交付。以及更快的进入市场，良好的通信将导致更少的错误，从而降低成本并提高代码质量。</description>
    </item>
    
    <item>
      <title>2018年必须认识到的6个DevOps趋势</title>
      <link>https://example.com/blog/6-devops-trends-aware/</link>
      <pubDate>Fri, 23 Mar 2018 17:50:25 +0800</pubDate>
      
      <guid>https://example.com/blog/6-devops-trends-aware/</guid>
      <description>DevOps已经出现了很长时间，我们中的很多人都认为它只是一个时髦词。现在我们知道这并不是一个神话。DevOps已经成为一个IT主流的焦点，并且在过去的几年里一直在重塑着软件世界。专家表示，DevOps将成为主流，2018年DevOps的人气将达到顶峰。
下面是术语“DevOps”在Google趋势里的现状，以及对2018年预计增长的假设。 谈到统计数据，从2015年到2016年，DevOps的应用企业数增加了约8%，预计2018年这一数字将大幅增长，如上所示。
你可以阅读RightScale的整个报告。甚至Forrester的报告也明确提到2018年将是DevOps的一年。
最近发表的关于DevOps的事实和统计数据的文章得到了DevOps爱好者的热烈响应，它只是表明许多技术布道者者对了解更多DevOps并在他们的组织中实施DevOps很感兴趣。
今天，我们将看到以下事实将塑造DevOps的未来。
1 将重心从CI流水线移到DevOps装配线 通过CI流水线可以显示应用程序从源代码管理到生产的完整可视化。你可以在一个统一的视图上看到一切。它不仅仅只关于CI，它更多是作为CD (连续交付)的基础；组织正在投入时间和精力来进一步了解自动化其完整的软件开发流程。2018年，第一大DevOps转变将是从单纯的CI流水线转变为DevOps的装配线链接是Shippable关于装配线的描述。
2 自动化将成为主要关注点 在DevOps中，我们经常谈论自动化。如果可能，对服务器的零接触自动化将是未来的趋势。这并不意味着你必须自动化一切，但如果你必须这样做，那么你应该能够做到。了解DevOps循环的6个C，并确保在这些阶段之间应用自动化是关键，这将是2018年的主要目标。
3 测试人员需要学会编写代码 在DevOps中，需要测试人员知道如何编写自动化脚本来测试各种情况。如果您是一名测试人员，如果在是否学习编码的问题上进退两难，那么我建议您学习编码。了解不同的DevOps工具和自动化脚本，在当今的软件开发中起着至关重要的作用，这将在2018年占据主导地位。
如果测试人员不学习自己编写自动化测试脚本，他们将会灭亡。手动测试将在2018年过时，它将占用大量时间。自动化测试不仅可以提高效率，还可以确保功能更快地交付给市场。
4 微服务体系结构应用的增加 DevOps和微服务最近正是天作之合。微服务是独立的实体，因此不会在出现问题时由于任何依赖关系而中断其他系统。微服务体系结构可帮助公司轻松进行部署和添加新功能。预计公司将转向微服务体系结构，以提高其运行时间和效率。不要因为别人采用了微服务体系结构就跟着他们走，点这个文章：了解自己并理解为什么应该采用微服务体系结构。
5 预计将有更多的公司选择企业版DevOps工具 目前有许多公司仍然处于建造还是购买的两难境地。但是，我们建议您做您最擅长的事情，并根据您的要求购买工具。这不仅有助于您专注于自己的目标，而且通过完全依赖第三方平台来提高工作效率。许多公司现在都在寻求企业版本，以获得自己的DevOps基础架构，并确保安全性尽可能掌握在最佳人员手中。
6 KUBERNETES将会大行其道 Kubernetes因其优异的功能性和易用性，从而成为增长最快的容器技术。kubernetes围绕它建立了一个伟大的开源社区。在全球范围内，许多首席信息官和技术人员都采用了Kubernetes，采用比例预计将在2018年进一步提升。
最近，在KubeCon + CloudberNativeCon北美( 2017年12月6日至8日)之前，云计算基金会进行了一项调查，并分享了容器编排环境正在发生的变化和向Kubernetes的转变。
来源:容器业务流程环境正在更改。
以上是将在2018年复现的DevOps的6个趋势。</description>
    </item>
    
    <item>
      <title>2018值得关注的15个DevOps大会</title>
      <link>https://example.com/blog/2018-best-devops-event/</link>
      <pubDate>Thu, 22 Mar 2018 08:30:13 +0800</pubDate>
      
      <guid>https://example.com/blog/2018-best-devops-event/</guid>
      <description>本文向你简要介绍2018年DevOps界的15大最重要的大会活动。DevOps的一个方面就是持续&amp;hellip;&amp;hellip;.参加大会学习！全球范围内看，基本上每个月都至少有一个我们值得重点关注的大会。我们不能奢望都你有机会参加，但是作为DevOps业内人士，如果你不了解这个大会的情况，你就Out了。
这些大会中有些社偏技术的、有些是注重社交和体验；根据你的业务需求和学习目标，今年走出去参加最高端DevOps盛会的奢望可以有。不提前做功课，怎么能说服领导支持你呢？万一领导批准了呢？
1. Cloud &amp;amp; DevOps World June 12-14, London
cloud&amp;amp;DevOps World是techxl 8的一部分，是一系列各种技术会议、网络机会和博览会的一部分。cloud&amp;amp;DevOps World涵盖云创新和管理微服务、DevOps、容器、无服务器体系结构和监管实践。云与云世界的一大亮点是，您可以通过展览的其他部分(如物联网和虚拟现实会议)看到云概念和云概念在发挥作用。
与会者还可以向观众演示他们的云解决方案，并享受联网、交互式会话和讨论面板。在去年的展会上，有300多家参展商和15000多名与会者参加，使这成为业界最大的展会之一。
2. DevOps Enterprise Summit (DOES) June 25-26, London
DevOps企业峰会针对的是参与DevOps革命的主要企业的高级经理。该大会深入探讨了各种重要的主题，一方面涉及技术和架构问题，另一方面涉及领导力挑战。DevOps Enterprise Summit的主题演讲、专题小组讨论、聊天室、社交圈区和展览大厅。
伦敦活动的讲演者包括来自IBM、Puppet、微软和各行各业的资深人士。DOES是一项每年举办两次的活动，地点在美国和欧洲之间变化。上一次在旧金山举行的展览有1400多人参加。
3. O’Reilly Velocity Conference June 11-14, San Jose
Velocity会议是本列表上排名第三的活动，由O’Reilly Media欧莱利媒体公司举办，该公司是一家技术媒体公司，在各种技术领域举办了无数的展览。Velocity会议在讨论站点可靠性工程、基础架构(如代码)、混沌工程、自动化、连续交付、恢复能力和安全性时，吸引了web ops、系统工程师和开发专家。圣何塞展览(今年在不同城市实际上有三个Velocity会议)的演讲者包括来自微软、Netflix、亚马逊和谷歌的代表。
4. ChefConf May 22-25, Chicago
ChefConf面向开发、自动化和法规遵从性感兴趣的管理员和开发人员。ChefConf关注处理整个应用程序开发和管理生命周期所需的策略和技能。本次活动侧重于实践和经验，以涵盖构建云应用程序、持续法规遵从性和广泛的自动化等活动。去年的ChefConf吸引了大约1，500名与会者，来自Chef和其他重要科技公司的演讲者。
5. Continuous Lifecycle May 15-18, London
Continuous Lifecycle每年在伦敦举行，主要集中在开发、容器化、连续交付和敏捷方面。这是一个为期三天的活动，包括会议和研讨会，与会者包括开发负责人、架构师、开发人员、CTO、工程师和工具/基础架构专家。每一个行业都有代表，从高技术的最高水平到制造企业。
6. DevOps Con May 28-31, Berlin
你是德国人吗？就算你只能说有点德文，DevOps Con也是值得一游的。它可能被认为是一年中最重要的持续交付会议，在微服务、Docker、云计算和精益业务方面进行了出色的讨论。今年的演讲者包括优步、红帽和西门子的高级职员。DevOps Con演讲者使用德语和英语，让与会者忙于实际的研讨会、会议和主旨演讲。
7. DevOps Days 今年DevOpsDays在国内举办三场：北京-5月，上海-8月，深圳-11月。
如果你还不能参加一个DevOps Days会议，那你肯定是住在了月球上。从亚特兰大到苏黎世，DevOps日一年四季都在不断发生，一个月内有多达几十个大会活动，遍布全球。DevOps Days活动关注软件开发和IT基础架构运营，重点关注自动化、测试、安全性和组织文化。
每场大会的地点都不尽相同，因此如果您有特定的感兴趣区域，请确保您注册了最感兴趣的城市，以便充分利用2018年DevOps的重大活动。DevOps Days甚至鼓励专业人士在大会上组织自己的日程。</description>
    </item>
    
    <item>
      <title>基础架构的持续集成和应用部署</title>
      <link>https://example.com/blog/devops-infrastructure-ci-app-deployment/</link>
      <pubDate>Sat, 17 Mar 2018 10:50:57 +0800</pubDate>
      
      <guid>https://example.com/blog/devops-infrastructure-ci-app-deployment/</guid>
      <description>持续集成通常是针对应用而言的，可是基础架构的持续集成应该怎么做？基础架构的持续集成应该属于持续交付/部署的基础。贯串本文的一个问题，或者在阅读本文时，您应该不断地问自己这个问题：我们的应用部署流程是怎样的？
在回答这个问题之前，我们先来回顾一下，目前几乎所有人正在使用的手工环境和资源交付流程。在源码被编译打包了以后，安装包文件被上传保存到了内部的某个文件服务器上。Ops团队的某个组/人被分配到工单，根据工单描述的需求，它在测试或者生产环境中开始工作：
 用图形界面进行虚拟机模板的手工克隆工作，或者由于没有相应的权限或者自助服务，不得不给虚拟化管理员发任务单，然后等待回复。 获取用户名和密码手工登录服务器，有些企业还要是等待领导的审批，才能得到密码信封和所需要的访问密码。 根据工单（变更单）里的描述和自己的经验对虚拟机的操作系统进行配置，在这个过程中，Ops往往可能还需和需求方进行不止一次的沟通，确认相关参数。 手工的下载应用安装包，然后分别手工上传到目标的服务器，凭经验和工单信息部署应用，然后测试部署结果，可能是看下页面有没有正常显示，或者服务起没起. 手工测试和确认这些虚拟机的服务和状态，凭经验觉得OK了以后，回复工单，关闭工单。  以上的工作场景，可能是Ops人员很常规的一天，或者是几天内的工作，当然在这个过程中，他们还需要参与一些救火行动；他们在这个过程中也可能会有疑问，也可能会对此工作结果不确定；但是，日常的工作经验告诉他，差不多了，关闭任务单要紧，还有好多项目催活呢！就这样，配置并不精确的虚拟机环境就交给了下游的需求方。
以上工作过程的问题如下：
 工作周期长，速度慢。实际上工作周期拖延的越久，工作结果的质量就越差，而并不是我们想想中的慢工出细活。 所有步骤都是纯手工操作，不仅费事费力，而且出错几率高，也几乎不可能无痛的回退。可能有人会说了，我们不需要那么快，我们也不是互联网公司；可是从精益思想的角度看，以上这些工作都属于对业务价值的交付贡献为零的工作；你可能是由于公司给你发着工资，才错误的感觉到，这项工作活动应该有它的价值。 上游传递来的信息可能不全面，不准确，因此Ops很有可能造成错误配置，因此会返工。 传递给下游的虚拟机很可能会在后续的部署过程中，由于应用需求的变化，而需要下游的人员对其重新配置，产生重复的劳动。   手工部署的时间和代价 = 应的数量 X 应用版本数量 X 环境数量
 对以上工作系统进行优化的原则：如果某一项活动的重复频率越高，那么对它进行优化，所产生的回报也会越明显；这里还要参考限制理论，优化的顺序要正确。
我们从这个角度出发，就可以来设定基础架构持续集成和应用部署流程的改进目标了：
 减少总体人工工作时间和代价 提高交付的速度、可靠性和频率 能进行应用部署，能进行数据库Schema的更新 能够实现部署流程的自服务，让任何需要部署应用的人能一键式部署任何版本  到了这里我们就必须将上述手工劳动，变为自动化的过程。因此，基础架构即代码IaC （Infrastructure as code）和相关的配置管理工具就会用到。
上图是一个典型的持续交付流水线模型，在此我们对它的关注点如下：
 代码的变更被Jenkins自动化的构建（CI是基础），打包后的安装包被存储在Artifactory里，Artifactory里面还可以存储应用包的其它相关元数据，如测试结果，能否可以用于下一步部署的标签等等。 Jenkins自动化的搭建所需要的环境，调用虚拟化或者公有云资源池的API，制备虚拟机资源，然后调用Chef完成对虚拟机的配置，完成应用包部署所需要的所有层次的配置。 环境配置完成后，应用正常运行了，在相关的测试工具对部署后的环境做验收测试，Chef具有支持测试驱动的相关工具。  基础架构的持续集成 为了实现完整的基础架构持续集成流程，以上持续交付流水线必须具备的能力和概念包括：分层的系统管理、基础架构即代码IaC、配置管理、Chef工具等。下面详细对它们进行描述。
分层的系统管理 系统管理的层次涉及到OS相关的三个层次。下面自下而上地简单描述一下。
 制备管理：涉及到虚拟化层，这一层是资源表达层，目前所有主流的虚拟化都支持标准的Rest API，包括VMWare、EC2和Nuanix等。大多数主流配置管理工具都具备用于虚拟机生命周期管理（从生成、到开机、到删除等）的API功能，能按需的获得任何数量、规模、网络和操作系统类型的部署环境。 配置管理：在任何类型的操作系统里自动化的安装和配置软件包，将所有配置参数配置好以后，持续保持这些配置点的状态。对于简单应用，来说按配置参数启动服务即任务完成。 应用编排管理：对于复杂的分布式系统，由于各个自服务之间存在着依赖关系，所有自服务之前需要互通一些配置参数才能实现，应用程序整体的正常运行，配置应用服务器的odbc数据库连接，配置web前端的ldap认证服务器等等。目前微服务所涉及的服务发现和路由，是应用编排必备的配套设施。  不同的DevOps配置管理工具也都力求能覆盖以上三个层次，但是他们所追求的方向，或者想解决的主要问题并不相同。因此各个工具之间功能上有重叠。
因此在运用这些工具的时候，不仅要追求其卓越的功能，还要能意识到，并有意的在不同层面上做取舍。
基础架构即代码 IaC这个概念最早是被Chef这类工具提出并实现，它的基本想法就是让Ops人员象开发人员一样的，工作在基础架构的代码上，而不是面对着数十个图形和文字终端界面。使用类似于开发应用程序的方式，开发和管理基础架构环境，因此基础架构能通过API访问和操控是基础，目前所有主流的虚拟化/云计算平台都具备很好的API接口；可惜的是在传统的企业环境中，这些资源池的API功能几乎没有被用到。
像开发应用代码一样的管理IT基础架构，基础架构的开发和管理也需要遵循与应用开发类似的原则，这些原则包括：
 一切从源代码开始:并对其进行严格的版本管理，要对基础架构变更，就需要对相应的代码进行变更和测试，最后发布这些代码。从而力求做到服务器的无人登录运维。 模块化设计:不同应用底层所使用的基础架构有着大量的相似之处，模块化的设计不仅意味着标准化，也意味着更少的重复代码。我所用过的Terraform、Chef和Puppet这三种工具，都具有高度的模块化特性。 抽象能力：能够使用不同的模块和参数对任何特征的应用进行建模，用IaC代码进行表达，基础架构的代码开发也就是借助这种抽象能力，将所有管理对象（配置管理项）具体化地描述为应用服务模型。编写出来的基础架构代码，不仅包含了所有对应用配置描述性的语义，而且还是能够被执行的代码，在IaC代码执行之后，你就得到了所期望的虚拟机、应用配置和应用服务。 可测试性：这是一个经常忽略的能力，而在了解之后，你会发现IaC也是编程语言，就是对基础架构进行高级的编程，而且IaC代码本身和它的运行结果都是可以测试的。在执行前对其语义语法测试，在运行以后对其运行结果测试。Chef在这方面表现的尤为突出。  配置管理 我可能是最早的一批进行ITIL配置管理实践，CMDB建设的这批人；我以前和甲方客户有着大量的关于配置管理和CMDB的对话，所经历过的项目也非常煎熬。而在DevOps场景下，感觉以前的经历也是很有意思的，只是我现在说到的CI，在没有特指的情况下，是持续集成的概念，还不是配置项了。
 Process for establishing and maintaining consistency of a product’s performance, functional and physical attributes with its requirements, design and operational information throughout its life。</description>
    </item>
    
    <item>
      <title>DevOps on Nutanix[Beta]</title>
      <link>https://example.com/blog/devops-on-nutanix/</link>
      <pubDate>Mon, 26 Feb 2018 11:08:53 +0800</pubDate>
      
      <guid>https://example.com/blog/devops-on-nutanix/</guid>
      <description>Nutanix是什么？中文名字是路坦力，是我目前所在的公司；我负责运营商行业以及与云服务商的合作业务，解决客户在售前、架构和DevOps等方面的问题，我是Nutanix Calm产品的专家。
之前也发过一些介绍Nutanix和超融合技术的文章，本文会是一篇持续更新的文章，我会把在Nutanix上开展超融合的方法，持续的更新在这里。
本文上属于Beta版本，会持续更新，欢迎各种类型的反馈信息，发邮件到： martin.liu@nutanix.com
变更日志：
 2018-2-26，发表了相关概况介绍性内容  什么是DevOps？  我的定义：DevOps是为了将软件开发、运维和质量保证等部门紧密地协作和集成在一起，而运用的一组成熟的、相互融合在一起的最佳实践。它使人们能准时/及时地生产软件产品或服务，从而满足企业的某个业务目标，开发与运维工作将在一个统一的目标之下协同工作，它是对IT组织内部各个角色之间的相互依存关系的一种新的理解。这个实践集合主要包含了四种最佳实践，如下图所示：
 注意：上图里Nutanix的定位在持续交付，超融合平台能高速平滑的交付IT服务。
来自网络的其它定义还有如下。
 定义2：You cannot buy DevOps and install it. DevOps is not just automation or infrastructure as code. DevOps is people following a process enabled by products to deliver value to end users. &amp;ndash; Donovan Brown, Microsoft DevOps Program Manager
 以上出自：Donovan&amp;rsquo;s blog post on &amp;ldquo;What is DevOps&amp;rdquo;.
 定义3：DevOps（Development和Operations的组合词）是一种重视“软件开发人员（Dev）”和“IT运维技术人员（Ops）”之间沟通合作的文化、运动或惯例。透过自动化“软件交付”和“架构变更”的流程，来使得构建、测试、发布软件能够更加地快捷、频繁和可靠。
 以上出自：维基百科 Wikipedia - DevOps
什么是HCI-超融合基础架构 我对超融合的定义：将计算、存储和网络这三种资源的至少两种融合在一起的技术就可以称之为超融合技术。Nutanix是将计算和存储融合在了一个系统只能，这里说的系统可以理解一个物理的机箱，并且在这个机箱里搭载了目前业内最通用的KVM虚拟化功能。Nutanix的超融合系统是开箱即用的IaaS平台，可以无节点数限制的水平扩展，能够支持服务器虚拟化、VDI、Oracle RAC等关键性数据库、企业核心业务系统、大数据和私有云等工作负载。在性能和功能上是专门为HCI而打造的。HCI技术正在颠覆着传统的三层架构技术堆栈（指的是：服务器-存储网络-集中存储）。</description>
    </item>
    
    <item>
      <title>Devops Handbook《DevOps实践指南》简介</title>
      <link>https://example.com/blog/devops-handbook/</link>
      <pubDate>Sun, 25 Feb 2018 22:27:16 +0800</pubDate>
      
      <guid>https://example.com/blog/devops-handbook/</guid>
      <description>企业如何通过DevOps实践提高盈利能力，改善工作文化，实现卓越的生产力目标。如今这些高绩效管理技术比以往的任何时候都要更加重要，由于这对于企业的商业竞争力而言是至关重的，数十年以来，技术组织的领导者们始终在努力地维持这IT系统的敏捷性、可靠性和安全性。然后惨痛的案例依然比比皆是&amp;ndash;不论是healthcare.gov的崩溃，持卡人数据的泄露；还是在云计算环境中大数据的丢失。
然而，那些运用DevOps原则的高绩效企业（例如Google，Amazon，Facebook，Etsy和Netflix）则每天都可以在生产环境中成百上千次频繁地部署代码。那么DevOps理论、原则和实践到底是何等的殊胜呢？相信所有人在看了本书之后一定会得到答案。
通过数字看这本书 基础数据 原作者4人 Jene Kim是这本书的主要作者，他在出版了《凤凰项目》之后，开始与其他三位作者编写本书的。Jez Humble是《持续交付》的作者，是持续交付实践和概念的重要发起人。Patrick Debios是DevOpsDays大会的发起人，是他最早在Twiter是用 #DevOps 这个短标签的，是DevOps运动和社区的重要人物。John Willis是DevOps社区早期的推动者之一，曾任Docker公司生态系统发展总监。
译者4人 在我和人民邮电出版社联系并进行试译之后，组织了翻译小组。王磊和马博文是我这几年结识的DevOps圈内的技术大拿；曾朝京是IT管理领域的资深专家，是我的前同事。王磊的著作有《微服务架构与实践》；马博文翻译的书籍有《DevOps 实践》
 刘征，Nutanix路坦力资深架构师。Exin首批国内DevOps Master和DevOps Professional认证讲师。持有红帽RHCA认证和AWS高级架构师认证。谙熟企业数据中心的IT服务管理。目前致力于推广DevOps相关的理念和实践，在DevOps社区中积极地参与培训和研讨会等活动，DevOpsDays大会活动在中国的核心组织者。
  王磊，前ThoughtWorks首席咨询师，EXIN首批国内DevOps Master认证教练。较早倡导和实践微服务的先行者，著有国内首本微服务架构相关书籍《微服务架构与实践》一书。超过10年以上的软件行业经验，对服务化架构、持续交付以及DevOps转型等有丰富的实践经验，同时他也是西安DevOpsMeetup联合发起人，西安GDCR组织者，并译有《Ruby Gems开发实战》一书。
  马博文, 前ThoughtWorks 高级咨询师，AWS助理架构师。曾从事多年web开发和DevOps，熟悉持续交付，微服务。参与翻译《Scala编程实战》、《DevOps实践》等书，是西安DevOps Meetup活动的发起人。
  曾朝京，Micro Focus资深解决方案顾问，参加Exin首批国内Devops Master讲师认证培训。长期从事IT运维管理领域咨询工作，曾为能源、金融、航空运输、政府行业中的多个大型企业提供 IT 运维管理规划。目前致力于探索Devops理念在企业IT部门的实践。
 翻译小组完成翻译，并提交给出版社的日期是2017年12月8日。
目录提前曝光 本书目前（本文的发布日期）正处于出版社编辑阶段。预计在五月份左右正式出版。下面是本书的目录。
 序言 前言 导言：展望DevOps新世界 第一部分 三步工作法  第1章 敏捷、持续交付和三步法 第2章 第一步，流动原则 第3章 第二步，反馈原则 第4章 第三步，持续学习与实验原则   第二部分 从何处开始  第5章 选择合适的价值流作为切入点 第6章 理解、可视化和运用价值流 第7章 参考康威定律设计组织结构 第8章 将运维融入日常开发工作   第三部分 第一步：流的技术实践  第9章 为部署流水线奠定基础 第10章 实现快速可靠的自动化测试 第11章 应用和实践持续集成 第12章 自动化和低风险发布 第13章 降低发布风险的架构   第四部分 第二步：反馈的技术实践  第14章 建立能发现并解决问题的遥测系统 第15章 分析遥测数据以更好地预测故障和实现目标 第16章 应用反馈实现安全部署 第17章 将假设驱动的开发和A/B测试融入日常工作 第18章 建立评审和协作流程以提升当前工作的质量   第五部分 第三步：持续学习与实验的技术实践  第19章 将学习融入每天的工作中 第20章 将局部经验转化为全局改进 第21章 预留组织学习和改进的时间   第六部分 集成信息安全、变更管理和合规性的技术实践  第22章 将信息安全融入每个人的日常工作 第23章 保护部署流水线   行动起来 - DevOps手册总结 附录 附加资源  以上目录标题有可能在出版社的编辑过程中会有所调整。不过已经可以看出其主要内容。</description>
    </item>
    
    <item>
      <title>DevOps工作三步法：第一步流动原则</title>
      <link>https://example.com/blog/devops-first-way-flow/</link>
      <pubDate>Wed, 21 Feb 2018 23:10:01 +0800</pubDate>
      
      <guid>https://example.com/blog/devops-first-way-flow/</guid>
      <description>本文内容主要来源于《DevOps Handbook》-DevOps实践指南，本文概述的原则是DevOps工作三步法的第一步，它的目标是先建立最底层的基础，即：DevOps技术实践和合理的应用架构；只有这样才能使工作快速而稳定地从开发端流动到运维端；与此同时还能保证不会给生产环境带来混乱，不会中断客户的服务。这就意味着需要降低在生产环境中部署和发布变更的风险。可以通过 持续交付 的技术实践来实现这个目标。
持续交付基于稳定的自动化部署流水线，团队能够使用自动化测试持续验证代码，确保代码始终处于可部署的状态，开发人员要保证每天都向主干提交代码，以及设计和实现有利于实施低发布风险的环境和软件架构。
在流动原则的指导下，需要开展的重要的工作内容如下：
 奠定部署流水线的基础 实现快速、可靠的自动化测试 实现并实践持续集成和持续测试 通过自动化、架构解耦等方式实现低风险发布  以上技术实践能够有效地缩短创建类生产环境的前置时间。同时，持续测试可以为所有团队成员提供快速的反馈，使小型团队能够安全、独立地开发、测试和向生产环境部署代码，从而将生产环境的部署和发布作为日常工作的一部分。
此外，通过将QA人员和运维人员的任务集成到DevOps实施团队的日常工作中，能够减少救火、困境以及繁琐的重复劳动的发生，使团队成员的工作高效且充满乐趣。这不仅能提升团队的工作质量，还能提高组织的竞争力。
流动原则相关的详细技术实践请参考请《DevOps实践指南》一书的第三部分，这部分包含第10章到第13章，一共描述了5个技术实践。
在流动原则里我们强调的而是全局的目标而不是局部的目标，局部目标的例子如下所示：
 特性开发完成率 测试发现/修复缺陷的比例 运维的可用性指标  我们需要减少价值流中的工作交接的次数，由于当交接次数多到一定程度时，所有人就会彻底的迷失，无法回答工作的上下文联系是什么？也不清楚我们要解决的是什么问题？或者组织的全局目标是什么？
价值流的应用实例 如果我们选择做DevOps转型的项目是棕地项目，我们就需要对当前的工作，进行细致的值流研讨和分析；需要画出当前的状态。如下图的示例所示（注：这是一个示例，你的棕地项目分析完之后并非如此）。
为了在实施DevOps的过程中持续的度量和改进，我们需要分析出当前价值流的核心定量指标：
 总计前置时间 = 求和价值流中每个工作步骤里的LT 【这个指标是DevOps项目的北极星】 总计增值时间 = 求和值流中每个工作步骤里的VA 完成且精确百分比 = 连乘值流中每个工作步骤的%C/A  如果是绿地项目，我们在第一个工作周里，价值流图是没有这些数值的。我们需要每天都在CI/CD流水线工具中采集相关数据，在每个人的日常工作中关注和记录相关数据，在第二周和后续的每一周里度量和分析以上指标，最好用仪表板展示工具，将这些数据实时地显示在所有项目组成员都可以轻松看到的位置。
对这个价值流进行持续的优化，使它更高效的工作，并不断的进化和改进。如果是棕地项目，那么在分析完以上的机制流之后，可以定制新的进化版的价值流图，并按照新版本的价值流图重新开始项目的执行。如下图的示例所示（注：这是一个示例，你的棕地项目改进优化完之后并非如此）。
优化和改进日常工作 Goldratt博士的约束理论(TOC) 在实践运用流动原则的技术实践时，可以使用Goldratt博士给出的方法，随时识别并解决价值流中的约束点，这个五步法如下：
 识别系统的约束点。 决定如何利用这个系统约束点。 基于上述决定，考虑全局工作。 改善系统的约束点。 如果约束点已经突破了，请回到第一步，但要杜绝惯性导致的系统约束。  以上五步法是DevOps实施项目组日常工作的必备流程优化工具。
常见的4个约束点 传统企业或者团队里最容易发生的约束点有一定的共性，一般可能会按照以下顺序逐个攻克和优化：
 环境搭建 代码部署 测试的准备和执行 紧密耦合的架构  可以清楚的看到大多数约束点比较偏Ops这一侧，而攻克所有这些约束点需要Dev和Ops一起协作完成。
常见的9中浪费 在DevOps工作团队里需要尽快能地避免以下浪费现象的发生：
 半成品 额外/多余工序 额外/多余功能 任务切换 等待 移动 缺陷 非标准或手工操作 填坑侠  以上浪费现象最早是从制造行业的精益管理中总结出来的，这些也是完全可以应用到技术价值流中，IT相关的工作能对每一条有很多痛点清晰的解读，你可以尝试在自己的工作环境中寻找以上所有浪费现象。</description>
    </item>
    
    <item>
      <title>DevOps登山指南</title>
      <link>https://example.com/blog/devops-climbing-guide/</link>
      <pubDate>Tue, 20 Feb 2018 00:34:09 +0800</pubDate>
      
      <guid>https://example.com/blog/devops-climbing-guide/</guid>
      <description>全美互惠保险公司(Nationwide)美国公司。在2017年6月7日，《财富》2017年美国500强排行榜发布，全美互惠保险公司排名第68位。营业收入40074.1百万美元。
这家公司是DevOps Handbook（DevOps实践指南）书中的案例研究之一。这是一家DevOps水平较高的企业，是DevOpsDays大会上分享嘉宾的常客，也是各个DevOps工具厂商（New Relic）经常邀请的案例分享嘉宾。他们也经常参加DevOps企业峰会，曾多次做过自己的DevOps应用状况案例分享。
本文分析和整理了他们在2017年11月旧金山站DevOps企业峰会上他们的演讲，主题为《DevOps Handbook Experiments in Accelerating Delivery - Nationwide》（翻译：使用DevOps Handbook在加速开发交付的过程中的实验）
本文根据这个演讲的YouTube视频整理而成。视频已经上传到腾讯视频，点这里观看该视频。
 DevOps登山指南手册 我在翻译DevOps Handbook的过程中，感觉书中所描述的这家公司的案例研究，并不像本演讲里所说的这样的精彩。
而时光已经很快的流转到了将近2018年，他们的DevOps也经过了几年的发展，本文案例向我们展示了一个金融行业（我们往往认为不太容易实施DevOps的行业）企业，在很大的企业规模了，所取得的令人敬佩的成就。
下面这张图是本文的精华，先给各位呈现出来。他们使用攀登珠穆朗玛峰做为比喻，对DevOps的实施做了生动的诠释。
本图在Nationwide公司内部的使用场景如下：
 本图将DevOps实施核心团对指导产品开发团队（也可以说是业务团队、服务团队、这样的团队他们有200多个）取得的经验总结在一张纸上，供其它有实施DevOps想法的团队参考。 该登山指南简化了对其它非DevOps团队的教育和指引。 他们将DevOps的实施分成三个阶段，分别用大本营、北坡营地和顶峰作比喻。 这三个阶段里的技术实践都来自于DevOps Handbook，通过他们的筛选和整理，并根据自己的经验做了分阶段的规划。  为了知其所以然，我们将继续向下发掘，详细了解这个案例分享所讲的主要内容。下面的内容也包含了我对他们的分析和评论，欲了解原始资料，请请参看我上传到腾讯的视频。
 主题：DevOps Handbook-在加速交付中的各种实验 分享者介绍。
这个演讲距2018年2月也就是三个月，还算是很新鲜的一个案例。Cindy是DevOps团队中的核心人员之一，她的头衔是Director，角色是夏尔巴人（后面会详细解释这个比喻的含义），为业务产品组提供内部的DevOps咨询和辅导。Jim属于业务条线/BU的Dev这一侧，他是业务部门的解决方案架构师。
Nationwide的核心价值：保护对你最有价值的 公司简介和状况。
 在很多险种上Nationwide都在业内排名第一名，包括：宠物保险、农场保险、公司寿险等等。 这是一家有90年历史的老店 汽车保险也行业排名第八（后面就是用这个业务为例，来佐证DevOps实施的效果） 不光在财富500强企业排名68，还是财富所评选的前100个最佳的工作企业。   Nationwide IT的规模很大 IT组织的特点和相关数据。
 IT组织庞大，结构复杂，业务条线众多 在选择应用某个DevOps实践的时候，总是要考虑到规模因素，需要评估该实践是否能在200多个业务开发团队的规模上全面地推广和实施 IT人员总数超过5100人，其中程序员和测试人员的数量超过2600人；在电脑世界的IT最佳工作地点的排行帮上位居第51名 该公司有用200多个产品开发团队，他们服务于23个业务部门BU   Nationwide IT的组织结构 典型、复杂和庞大的组织结构
 I&amp;amp;O是基础架构和操作运维团队，该组织不仅运维了所有的IT服务，还服务于所有的业务开发团队。 多个共享服务团队提供企业级的共享服务，包括Scrum测试等传统开发服务，同时也为企业内部的DevOps实践提供技术咨询，他们支持所有类型的企业应用堆栈 业务部门如前所述有23个，有200多个开发团队，Jim服务于金融业务BU 该公司的架构模型近似于典型的Dev、QA和Ops架构；他们的Ops组织也是集中式的；如此复杂的架构带来了DevOps流水线的复杂度方面的挑战，为某个业务BU实施的持续交付流水线会横跨多个BU，有时候甚至需要三个BU的CIO级别领导一起来参与决策，这里也会出现项目投资方和项目决策方不统一的难题。   从哪里开始 应用DevOps的企业环境背景和定位。
 IT组织十年以来追求的战略目标：构建具有全球竞争力的内包式软件开发能力；为此而采用了不同的管理框架和实践，应用和开始的时间点也不同  Agile：敏捷软件开发是10年前就开始的，定位和目标是通过敏捷软件开发交付高质量的软件 DevOps：今年加入了DevOps实践，定位是如何实现速度、效率和降低风险。 Lean IT：定位是确保将IT管理的各种实践（包括以上的敏捷和DevOps）提升和推广到企业级规模。（他们认为在团队级别上任何敏捷和DevOps相关的实践都是很容易实现的，而企业级规模的推广是更高等级的管理，是不容易达到的） CMMI：使用行业规范的软件开发成熟度标准评价和考量自身的软件开发能力，为自身的不断提高提供标准参考。   该公司DevOps实践是最晚开始应用的，其它的三个方面使用的历史比较长了，为了达成一个战略目标，需要4个战术层面实践的支持，这些战术的采用时期和定位不同；4个战术从不同的侧面支持了战略目标的实现。该企业也在Lean IT的论坛上分享和演讲过。   从哪里开始（续） 应用DevOps的时间轨迹和历程，各个时期的关键词。</description>
    </item>
    
    <item>
      <title>Kubecon 2017演讲稿和视频下载</title>
      <link>https://example.com/blog/2018-1-kubecon17/</link>
      <pubDate>Wed, 03 Jan 2018 00:00:00 +0800</pubDate>
      
      <guid>https://example.com/blog/2018-1-kubecon17/</guid>
      <description>KubeCon 2017演讲稿和视频下载 Kubernetes无疑当下最火热的技术之一，Google公司围绕着它下了更大的一盘棋CNCF。这是在国际寡头IT软件公司的统治局面渐渐退去之后，各种新鲜技术百花齐放了一段时间以后，再通过CNCF的形式又逐渐集中化起来的趋势。KubeCon的人气很旺，演讲分享的人很多。
最近一次的KubeCon，2017年在奥斯汀站的演讲稿和视频下载的清单已经发布出来了：
https://github.com/cloudyuga/kubecon17
我在YouTube里听了一部分视频，感觉确实有很多新鲜的工程实践经验的分享。下面分享一个觉得不错的实战案例分享。
Box公司分享持续交付实战经验 关于这个分享的看点：
 Box公司全面实施Kubernetes的案例，涵盖了所有的环境：Dev、Staging和Prod 遇到的挑战和问题共性强 Jenkins流水线+金丝雀部署+持续交付的组合 解决问题的模式值得借鉴 工具集里开发出来的核心组件已经开业分享在Github上  分享者经典语录：
 我们是软件工程师，我们不是坐在那按按钮的猴子！
 以上分享的持续交付方案里kube-applier的源代码分享：
https://github.com/box/kube-applier
PS：非常敬佩这种开放和分享的工程式文化。很符合开源的精神，爱分享的人，不把东西分享出来的话可能会不爽。
延伸阅读：
 https://blog.box.com/blog/introducing-kube-applier-declarative-configuration-for-kubernetes/ https://blog.box.com/blog/kubernetes-box-microservices-maximum-velocity/   观看以上演讲视频</description>
    </item>
    
    <item>
      <title>Tips for Docker on Mac</title>
      <link>https://example.com/blog/tips-for-docker-on-mac/</link>
      <pubDate>Tue, 26 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/blog/tips-for-docker-on-mac/</guid>
      <description>Tips for Docker on Mac 在macOS上使用Docker很长时间了，本文总结一些我不想忘记的tips，方便自己反复使用的同时，也顺便总结分享一下，留下本文作为长期更新的备忘录。
搭建私有镜像库 运行一个本地镜像库
$ docker run -d -p 5000:5000 --restart=always --name registry registry:2 这条命令会从docker hub 下载 registry:2 镜像，在本机运行一个镜像库服务。
下载一个测试用的镜像。
$ docker pull ubuntu:16.04 给这个镜像打上私有镜像库的标签
$ docker tag ubuntu:16.04 localhost:5000/ubuntu:16.04 push这个测试镜像到本地的镜像库
$ docker push localhost:5000/ubuntu:16.04 这时候你会发现我的本地这样岂不是有了两份相同的镜像了，有这个必要么？是不是多余了？下面几个场景中会用到：
当你用docker-machine在本机启动1个vm的时候，你运行任何docker run或者docker-compose up的时候你可能需要一个之前在本地就有的image，这是一种分享本机image给docker-machine vm的一种方式。
当你用docker-machine在本机启动多个个vm的时候，你可能会把它们作出docker Swarm群集，当你在这个群集上启动一个服务的时候，docker compose文件中的镜像地址可以引用这个本地地址，引用地址类似这样 image: 192.168.99.1:5000/influxdb
当你用 minikube start启动了一个minikube的vm的时候，你可能也需要本机的docker镜像，尤其是在你做demo的时候，这是最快的下载途径。 需要注意的是，以上三种情况都需要指定一下&amp;ndash;engine-insecure-registry 192.168.99.1:5000 这个参数。
自动化创建Docker Swarm群集 在我的文件目录中存放着这个脚本
cat create-swarm.sh docker-machine create manager --engine-insecure-registry 192.168.99.1:5000 docker-machine create agent1 --engine-insecure-registry 192.168.99.1:5000 docker-machine create agent2 --engine-insecure-registry 192.</description>
    </item>
    
    <item>
      <title>关于DevOps 的那些事</title>
      <link>https://example.com/blog/something-you-must-know-about-devops/</link>
      <pubDate>Sat, 23 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/blog/something-you-must-know-about-devops/</guid>
      <description>DevOps是孕育于敏捷社区，又反哺给整个IT技术行业的，是一次彻底而全面的技术和文化运动。本文从它的出处谈起，一直描述到当前国内的现状。最后总结了相关的核心技术和主要实践。
DevOps简史 在2008年多伦多举办的敏捷大会（Velocity Conf 2008 ）上，Patrick DeBois 和AndrewClay Shafer 先生首次提议讨论“敏捷基础架构”这个话题。在第二年的敏捷大会上有一个具有里程碑的意义技术分享，来自Flickr公司《每天部署10次》的分享，它激发了随后Patrick DeBios在同年十月，在比利时的根特市举办的首届DevOpsDays活动，这个活动是两天的日程，为了大家方便在twitter上的传播，人们把DevOpsDays这个词简写为 “#DevOps” 。 此后，“DevOps”一词问世了，这个词所包含的理念和实践一时在越来越广大的人群中产生了共鸣，随后成为全球IT界在各种大会和论坛里热议和讨论的焦点话题，很多大型IT论坛也都开设出了DevOps专题讨论。这就是DevOps这个词的由来。DevOpsDays活动随后在Patrick DeBios等相关核心发起人的推动下，在全球范围内蓬勃发展了起来。2010年在美国山景城(Mountain View) 举办的DevOpsDays 活动中，Damon Edwards先生使用“CAMS”这个缩写，高度概括和诠释了DevOps，即文化（Culture）、自动化（Automation）、度量（Measurement or Metrics）和分享（Sharing）。随后Jez Humble先生将“L”精益 (Lean) 原则也加入其中，最终变成了CALMS。
 Culture（文化）- 是指拥抱变革，促进协作和沟通 Automation（自动化）- 是指将人为干预的环节从价值链中消除 Lean（精益）- 是指通过使用精益原则促使高频率循环周期 Metrics（指标）- 是指衡量每一个环节，并通过数据来改进循环周期 Sharing（分享）- 是指与他人开放分享成功与失败的经验，并在错误中不断学习改进  “CALMS”完全吻合Patrick DeBois先生所一向倡导的“DevOps is a human problem” (DevOps 是关于人的问题) 的理念 。
DevOpsDays活动的现状 从DevOps概念的产生，到如今它在全球范围内的蔓延和认同，已经经历了9个年头的时间。它的火爆推广也伴随着IT行业的迅速变迁和发展，现在已经到了移动互联网时代的后半场，国内的信息化建设已经完成了很多年；如今各行各业的企业也都亟待完成全方位的数字化转型。IT信息技术的先进程度标志着一个企业的核心能力，任何一个成功的企业，敏捷高效的软件开发创新实力和IT管理综合能力不只是门面而已，而是实实在在的市场竞争能力。DevOps倡导打敏捷、持续交付和ITIL三种实践的组合拳，同时应用精益生产理念为基础的管理思想，这正在逐渐地被广泛的接受和认可。
在过去的几年中，国内的各种IT大会也蓬勃发展，其中DevOps相关的专题和分会场也颇受人们的关注。各种云计算、运维等IT技术的社交媒体也都非常重视DevOps这个话题的分享。一个专属于DevOps社群的、国际性的、有影响力的DevOps大会正呼之欲出。在这样的时代背景下DevOpsDays大会北京站在2017年的3月18日来到中国，在同年的8月18日上海，还要举办DevOpsDays Shanghai站的大会。
下面列举一些DevOpsDays大会的相关数据，数据来源于DevOpsDays.org 网站。从2009年到2016年，已经在全球的61个城市/国家成功地举办了117场。
下图是在过去九年中DevOpsDays大会在各个城市/国家的分布和举办次数。
今年也就是2017年预计举办30场，其中已经有18场确定了举办城市和日期；还有12个城市的召开日期待定；这不包括年内还可能会提出申办的城市。以上数据的统计时间在2017年三月。
DevOps在国内的现状 随着国内BAT等互联网巨头的崛起，互联网公司的开发运维经验也越来越多的在国内的各种技术大会上传播。从最近这两年（2016年和2017年）的技术活动日程中可以看出，国内互联网从业人员也不约而同的用DevOps来定位和分享自己的优势和经验。他们是传播和分享运维侧DevOps实践的先头部队。
出了技术论坛的分享之外，很多线上线下的大会、论坛和讨论组也都越来越热议DevOps这一专题。国内其它相关流派的人群，例如敏捷和精益等，也对DevOps的蓬勃发展表示比较惊讶，DevOps与老牌的敏捷和精益等阵营也产生过一些争论。但这一切的发生也都增加了人们对于DevOps的更深入的兴趣。
在培训认证这方面，Exin DevOps Master是一个国际认证的培训；其它公司和组织也正在举办关于DevOps工具链的培训，这些培训则注重于技术实操，关注在构建端到端的流水线的搭建方面。从DevOps的职位招聘方面，可以看到DevOps工程师相关的职位越来越多了，在职位需求中DevOps这个技能成了加分项，DevOps相关工具的技能也或将成为简历的亮点。在IT行业内不管是开发还是运维团队的人，都开始了学习和接受的过程。
据我观察DevOps方面的厂商在最近3年呈现爆炸式的发展。我把他们分为三类：
 搭顺风车型：主要是指所有CaaS容器云平台厂商 。Docker是它是在DevOps的时代背景下产生的，是DevOps技术工具集里不可缺少的一员。国内这些厂商目前的数量在20左右，数目趋于稳定。由于今年（2017）Docker公司商业化版本和开源版本正式的划分开来，这些公司的发展可能或多或少受到一些影响。 直奔主题型：这类厂商专注于开发端到端的、用户体验良好的DevOps流水线平台，这些公司的创始人团队多是来自于BAT公司，因此具有很好的DevOps实战经验，他们开发的产品在持续交付和流水线功能上恰好填补了当前企业在这个方面的工具和技术实践的缺位。目前这类公司的数量还不多，数量呈上升趋势。 BATH型：BAT大家都知道，这里的H指的是华为，这些企业在DevOps平台方面都表现出积极的技术输出的态势。BAT是基于过去的互联网运维的经验做DevOps的产品化。华为是成了独立的研发部门，招募业内这方面的精英前来助阵，打造出一方面可以自用，同时也可以商品化的DevOps产品。  目前国内大部分企业慢慢地开始关注了DevOps，大型传统企业也开始逐渐地从各个角度做试点和尝试。试点的角度和方向各不相同，有的从底层基础架构的容器化开始，有的从交付部署流水线的自动化开始；总的来说还处于初级的尝试阶段，还没有大规模成体系的推广。
综上所述，目前国内DevOps发展的阶段还属于起步阶段。就像是ITIL/ITSM在2003年左右的状态。由于DevOps是去中心化的，所以没有唯一、权威的上游厂商的存在，各种理论实践的争执和PK都将终止与解决问题和提高效率的话题上，因此它具有百花齐放百家争鸣的发展条件。个人认为DevOps的实施和落地也不会完全依赖于传统的大型咨询厂商的咨询工作，由于它应该是在企业的内部，在内驱的作用下，自生长出来的；它必须是服务于企业的业务价值流的优化，加速业务价值产出的；而与之相关的工作和责任的担当，外部力量是很难以等量替换和承担的。
核心技术和工具 在谈这个话题前先看一下DevOps相关工具集的全貌，如下图所示：</description>
    </item>
    
    <item>
      <title>用Minikube体验单节点K8S</title>
      <link>https://example.com/blog/install-minikube-k8s/</link>
      <pubDate>Thu, 21 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/blog/install-minikube-k8s/</guid>
      <description>Minikube为各种操作系统的开发者，提供了运行K8S最简洁的方式。它最小化了安装k8s的需求和工作量。而且在各种操作系统上可以实现相同的体验。本文用精简的语言，描述了从安装minikube到运行容器化应用的过程。主要命令和输出来自macOS。
安装Hypervisor 需要在任何笔记本或者工作上安装一个Hypervisor，因此首先你需要坚持电脑的CPU是否开启了虚拟化的支持，检查BIOS的VT-X或者AMD-v的配置。
 OS X，安装 xhyve driver, VirtualBox 或 VMware Fusion Linux， 安装 VirtualBox 或 KVM Windows， 安装 VirtualBox or Hyper-V  Minikube会生成一个虚拟机，用于运行一个安装和部署好的k8s单节点系统。
安装kubectl kubectl是k8s系统的管理工具，是一个命令行工具，它用于和master交互，完成群集和服务的管理等工作。
kubectl的安装文档： https://kubernetes.io/docs/tasks/tools/install-kubectl/
在macOS上最简单的安装方法是下面这条命令：
brew install kubectl  brew的好处是后续可以帮忙持续的升级。
其它非brew安装方法，见以上安装文档的 Install kubectl binary via curl 部分。
安装 minikube 在macOS上使用的默认的Hypervisor是VirtualBox，如果想要用xhyve需要在启动的时候加上参数 --vm-driver=xhyve
安装最新版本的 minikube 需要参考这个网页 https://github.com/kubernetes/minikube/releases
minikube 是一个命令行工具，它的命令行参数如下：
Minikube is a CLI tool that provisions and manages single-node Kubernetes clusters optimized for development workflows. Usage: minikube [command]</description>
    </item>
    
    <item>
      <title>2017DevOps采用和趋势现状-信息图</title>
      <link>https://example.com/blog/state-devops-adoption-trends-2017/</link>
      <pubDate>Sat, 11 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/blog/state-devops-adoption-trends-2017/</guid>
      <description>在过去的一两年里DevOps持续升温，逐渐成为一场IT行业内的谁不可回避的运动。
DevOps 定义 我个人是一直以来反对给DevOps做一个名词解释样式的定义的。不过这种需求实在强大，摘抄几条供大家参考，上图是一种定义。
 定义2：You cannot buy DevOps and install it. DevOps is not just automation or infrastructure as code. DevOps is people following a process enabled by products to deliver value to end users. &amp;ndash; Donovan Brown, Microsoft DevOps Program Manager
 以上出自：Donovan&amp;rsquo;s blog post on &amp;ldquo;What is DevOps&amp;rdquo;.
 定义3：DevOps（Development和Operations的组合词）是一种重视“软件开发人员（Dev）”和“IT运维技术人员（Ops）”之间沟通合作的文化、运动或惯例。透过自动化“软件交付”和“架构变更”的流程，来使得构建、测试、发布软件能够更加地快捷、频繁和可靠。
 以上出自：维基百科 Wikipedia - DevOps
兴趣和搜索量 以上结果来自Google趋势，上图是从2004年到现在，一共13年的趋势图。下面再看一下最近五年的趋势详情。
最近5年的搜索趋势 国际关注度 相关话题和查询 关注者年龄和性别 上图年龄分布情况。
上图是性别分布情况。
DevOps应用状态  正在应用的:从66%上升到74% 没有应用的:从19%下降到16% 不知道的：从15%下降到6%  DevOps Checklist 不管你做不做DevOps？不管你知不知道你是不是DevOps？不管你从哪个角度入手DevOps？看看这个清单中有几项和您相关，就知道你和DevOps的关系是否密切。 检查清单如下：</description>
    </item>
    
    <item>
      <title>DevOps术语表</title>
      <link>https://example.com/2017/01/07/devops-glossary/</link>
      <pubDate>Sat, 07 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/2017/01/07/devops-glossary/</guid>
      <description>简介 这份术语表的旨在为DevOps实践者提供参考，在重要的专业术语上保持一致。最初的来源是《DevOps Handbook》英文版。译者在翻译的过程中，梳理和总结了一部分。Exin的DOP认证考试基于此书，考试样题也影响和参考了本术语表。本术语表是开放的，欢迎各界业内人士对其修订和增补。目标是形成一份较为完整和准确的参考资料。参与修订的方式见页脚。欢迎但不限于以下方面的专家参与评审和修订：
 敏捷开发 精益/精益UX/精益创业 丰田生产系统 ITIL 互联网公司 传统企业  这个页面的另外一个存在：https://handbook.martinliu.cn/glossary/
变更日志  2017年1月7日，在Martin‘s Blog和Github上发布了第一个版本。有几个人在Github上参与了修订（请参与者通过邮件或者其他方式告诉我，这里希望再次申明致谢。） 2017年12月27日，参与修订的人包括卢梦纯（Exin）、刘征、张乐、Wang Jun和许峰。 本网页当前接受繁体中文的增补，所有参与者名单  术语表    英文 中文     A/B Testing A/B测试   Acceptance Stage 验收阶段   Acceptance Test-Driven Development (Atdd) 验收测试驱动开发   Acceptance Tests 验收测试   Accident 事故   Affinity 亲和   Agile 敏捷   Andon Cord 安灯拉绳   Anomaly Detection Techniques 异常探测技术   Antifragility 抗脆弱性   Application Deployment 应用部署   Artifact Management 构件制品库管理   Artifacts 制品   Automated Tests 自动化测试   Automation 自动化   Backlog 待办事项列表   Bad Apple Theory 坏苹果理论   Bad Paths 失败路径   Batch Sizes 批次尺寸、批量大小   Blame 责备   Blameless Post Mortem 免责事后分析   Blamelessness 免责   Blue-Green Deployment 蓝绿部署   Blue-Green Deployment Pattern 蓝绿部署模式   Branching Strategy 分支策略   Brownfield 棕地   Build 构建   Business Value 业务价值   Canary Release 金丝雀发布   Canary Release Pattern 金丝雀发布模式   Card 卡片   Change Categories 变更类别   Change Schedules 变更计划   Cloud Computing 云计算   Cloud Configuration Files 云配置文件   Cluster Immune System Release Pattern 集群免疫系统发布模式   Code Branch 代码分支   Code Review Forms 代码审查表   Codified Nfr 成文的非功能需求   Collaboration 协作   Commit Stage 提交阶段   Commit Code 提交代码   Compliance Requirement 合规性要求   Compliance Checking 合规性检查   Compliancy Officer 合规检测官   Configuration Management 配置管理   Container(S) 容器   Continuous Deployment 持续部署   Continuous Integration 持续集成(CI)   Continuous Delivery 持续交付(CD)   Conways Law 康威定律   Cycle Time 周期时间   Defect Tracking 缺陷跟踪   Definition Of Done (Dod) 完成的定义   Dev Rituals 开发仪式   Developer 开发人员   Development 开发   Devops Transformation DevOps转型   Downstream/Upstream 下游/上游   Downwards Spiral 恶性循环   E-Mail Pass-Around 电子邮件轮查   Expand/Contract Pattern 扩张/收缩模式   Exploratory Test 探索性测试   Fast Feedback 快速反馈   Feature 特性   Feature Flag 特性标志   Feature Toggles 特性开关   Feedback/Feedback Loop 反馈/反馈回路   Feedforward/Feedforward Loop 前馈/前馈回路   Flow 流   Gated Commit 门控提交   Gaussian Distribution 高斯分布   Green Build 绿色构建   Greenfield 绿地   Handoff 交接   Hand-Off Readiness Review 交接就绪评审   Happy Paths 快乐路径   Hypothesis-Driven Development 假设驱动开发   Incident 事件   Information Radiators 信息辐射器   Infosec 信息安全   Infrastructure Automation 基础架构自动化   Infrastructure As Code 基础设施即代码   Integration Tests 集成测试   I-Shaped, T-Shaped, E-Shaped I型，T型，E型   Iteration 迭代   Itsm (It Service Management) IT服务管理   Ji-Kotei-Kanketsu (Jkk) 质量检查（JKK）   Just Culture 公正文化   Just-In-Time (Jit) 准时制   Kaizen (In Lean) 持续改善   Kaizen Blitz (Or Improvement Blitz) 持续改善闪电战   Kanban 看板   Kata Kata   Large Batch Size Merge 大批量合并   Latent Defects 潜在缺陷   Lauching Guidance 发布指导   Launch Readiness Review 投产就绪评审   Lead Time 前置时间   Lean 精益   Learning Culture 学习文化   Logging Levels 日志级别   Loosely Coupled Architecture 松耦合架构   Micro-Services 微服务   Minimum Viable Product 最小化可行产品   Monitoring Framework 监控框架   Monolithic Applications 单体应用   Monolytics 单体应用   Mttr 平均恢复时间   Non-Functional Requirement (Nfr) 非功能性需求   Non-Functional Requirement (Nfr) Testing 非功能需求测试   (Non) Ideal Testing Pyramid （非）理想测试金字塔模型   One-Piece-Flow 单件流   Operations 运维   Operations Story 运维故事   Ops Liaison 运维联络人   Organisational Typology Model 组织结构模型   Organization Archetypes 组织原型   Organizational Learning 组织级学习   Over-The-Shoulder 观察者评审   Packages 包   Pair Programming 结对编程   Peer Review 同行评审   Pilot 试点   Pipeline 流水线   Plan-Do-Check-Act Cycle (Pdca Cycle) 计划-实施-检查-改进 （戴明环）   Post Mortems 事后回顾   Post-Mortem 事后剖析   Process Time 处理时间   Product Owner 产品负责人   Pull Request Process 拉动请求流程   Qa 质量保证   Reduce Batch Size 降低批次尺寸   Reduce Number Of Handoffs 减少交接次数   Regression Test 回归测试   Release Branch 发布分支   Release Managers 发布经理   Release Patterns 发布模式   Retrospective 回顾   Rhythm 节奏   Roll-Back 回滚   Sad Path 悲伤路径   Safety Culture 安全文化   Safety Conditions 安全条件   Scaling 规模化   Scrum Scrum   Scrum Master Scrum Master   Security Testing 安全测试   Self Service Capability 自服务能力   Service Deployment 服务部署   Service Level Agreement (Sla) 服务级别协议(SLA)   Shared Goals 共享目标   Shared Operations Team (Sot) 共享运维团队   Shared Version Control 共享版本控制   Single Repository 单一存储库   Smoke Testing 冒烟测试   Sprint 冲刺   Staging Staging   Staging Environments, Sit 准生产环境   Stakeholder 利益干系人   Standard Deviation 标准差   Standard Operations 标准运维   Static Code Analysis 静态代码分析   Swarm 聚集、聚焦、会诊、围观（动词）   Swarming 聚集   System Of Engagement (Soe) 交互系统   System Of Records (Sor) 记录系统   Technical Debt 技术债务   Technology Adaption Curve 技术适应曲线   Technology Executives 技术主管   Telemetry 遥测   Test Coverage Analysis 测试覆盖率分析   Test Story 测试故事   Test-Driven Development 测试驱动开发   The Downward Spiral - Tds 下行螺旋   The Agile Manifesto 敏捷宣言   The Lean Movement 精益运动   The Simian Army: Chaos Gorilla, Chaos Kong, Conformity Monkey, Doctor Monkey, Janitor,Monkey, Latency Monkey, Security Monkey 猿猴军团（可靠性监控服务），Chaos Gorilla（混沌大猩猩）， Chaos Kong（混沌金刚）, Conformity Monkey（一致性猴子）, Doctor Monkey（医生猴子）, Janitor Monkey（看门猴子）, Latency Monkey（延迟猴子）, Security Monkey（安全猴子）   The Three Ways 三步工作法   Theory Of Constraints 约束理论   Ticketing System 工单系统   Tightly-Coupled 紧耦合   Tool-Assisted Review 工具辅助评审   Tools 工具   Toyota Production System (Tps) 丰田生产系统   Toyoto Kata 丰田套路   Transformation Team 转型团队   Trunk 主干   User Story 用户故事   Value Stream Mapping 价值流映射   Value Stream 价值流   Velocity 速率   Version Control 版本控制   Virtualized Environment 虚拟化环境   Visible 可视的   Visualisation 可视化   Waste 浪费   Waste Reduction 减少浪费   Waterfall 瀑布式   Wip (Work In Progress / Process) 在制品   Wip Limit 在制品限制   Work Center 工作中心                    参与修订说明 请帮忙改进本术语表，请直接Fork本代码库，然后提交PR；或者发邮件到：liuzh66@gmail.</description>
    </item>
    
    <item>
      <title>Nutanix资源站点清单</title>
      <link>https://example.com/2017/01/07/nutanix-resource-sites/</link>
      <pubDate>Sat, 07 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/2017/01/07/nutanix-resource-sites/</guid>
      <description>做Nutanix的那些不可不知道的资源网站，这里列出了常用的官方和非官方网站。
Nutanix 官方站点 http://portal.nutanix.com/ http://portal.nutanix.com/
 在线文档 在线技术支持，case查看和操作 产品和补丁下载  https://next.nutanix.com/ https://next.nutanix.com/
 产品网上论坛和社区 社区版论坛 博客， Nutanix Connect Blog  技术达人网站和博客 myvirtualcloud.net by Andre Leibovici http://myvirtualcloud.net/nutanix/
Virtual life style by Joep Piscaer https://www.virtuallifestyle.nl/
The Nutanix Bible by Steven Poitras http://nutanixbible.com/
Mark&amp;rsquo;s Blog by Mark Lavi http://mlavi.github.io/
Jeremy Sallee - Nutanix UI/Frontend 设计师 http://salleedesign.com/stuff/sdwip/home/
想知道Prism是怎么设计出来的：点这里
Virtual Dennis by Dennis Laube http://www.virtualdennis.com/category/nutanix/
 如何ova格式的虚拟机导入Nutanix AHV 镜像服务能够支持Web界面上传导入的格式包括：raw, vhd, vmdk, vdi, iso 和 qcow2 磁盘，导入为Disk后，即可用做模板 如何在Nutanix中制作AHV虚拟机模板 使用acli命令：vm.</description>
    </item>
    
    <item>
      <title>DevOps书单</title>
      <link>https://example.com/2017/01/03/devops-booklist/</link>
      <pubDate>Tue, 03 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/2017/01/03/devops-booklist/</guid>
      <description>学习DevOps应该会使用到的书籍清单。
我在豆瓣建立了一个书单，欢迎在豆瓣给我留言，评论和建议。豆瓣书单点这里。
 本清单来自于《DevOps Handbook》书中提到的书，更新到第五本；《看板方法》、《精益思想》、《Implementing Lean Software Development: From Concept to Cash》、《第五项修炼:学习型组织的艺术与实践》、《探索吧!深入理解探索式软件测试》
《看板方法-科技企業漸進變革成功之道》 转自：Rubbyblog.wordpress.com/images/
今天要介紹看板方法的由來， 上面這本書是由看板方法之父 David J. Anderson 於: 2010年 4月所著。簡字版是 2014 年2月出版。這篇文章在我上 TechDays 課程時就想登出來了，想把好書介紹給大家。但由於台灣的書商都沒有進口，所以一直等到我拿到第一批書後，肯定大家可以在坊間買到書時才把他登出來。原文書名: Kanban: Successful Evolutionary Change for Your Technology Business.
看板方法：它是敏捷陣營中實施起來阻力最小，生產力又能大幅提升、前置時間大幅下降，而可預測性又絕佳的敏捷解決方案之一。好神奇喔 … 哈哈! 確實如此，所以我才會這麼急切的推薦給大家。另一個原因是Kanban Method 現在在美國正熱烈風行中，而我們現在開始追正是時候。為此放下了許多手上正在做的工作(包括一本 Scrum的教本)，努力開始推廣希望大家能受用。首先說明: 為何他推廣起來阻力最小?
※ 實施起來阻力最小:
因為David J. Anderson 本身是一個微軟的 PM出身，他跟大家一樣知道變革會讓許多人害怕，人們會認為自己的技術是否落伍了，開始擔心害怕變革會對自己的工作事業帶來不利，這種恐懼常常會帶來一種莫名的對立，因此在還沒開始變革之前就已經採取抵制的態度了。所以他創始的看板方法選擇從哪裡開始實施呢? 就從現在既有的流程開始。由工作者本身最熟悉的地方開始。起步的秘訣是甚麼呢? 是精實精神中從豐田系統中學來的原則，先從不浪費開始，作法: 在識別浪費後消除浪費。
※ 如何能讓生產力大幅提升?
由審視既有流程，依據 Little’s law的最大產出方法，接著找出阻礙最大產能的瓶頸所在，然後正視這個造成瓶頸的問題，把它顯現在看板上面，讓大家一起站在看板前面討論如何解決它，解決之後再持續進行改善的作業。
※ 前置時間大幅下降
過去我們都以為唯有透過良好的規劃及配合才能夠讓前置作業時間下降，但豐田企業的及時(Just In Time)備料讓庫存降至最低，讓半成品減至最少改變了工作流程的前置時間(Lead time)，因此得到大幅下降。
看板還是看板方法 (Kanban or Kanban Method) 英文叫 Kanban，上網去搜尋會得到一大堆有關製造業的看板資料。所以請使用 Kanban Method去搜尋，因此中文就該叫做「看板方法」。簡體版的作者有用心在翻譯因此翻對了，值得買來閱讀。全書分成四部分:</description>
    </item>
    
    <item>
      <title>EXIN DevOps Master 认证考试</title>
      <link>https://example.com/2016/11/07/exin-devops-master-e8aea4e8af81e88083e8af95/</link>
      <pubDate>Mon, 07 Nov 2016 15:19:08 +0000</pubDate>
      
      <guid>https://example.com/2016/11/07/exin-devops-master-e8aea4e8af81e88083e8af95/</guid>
      <description>DevOps这个词在去年参加红帽全球用户大会的时候就深深吸引了我，实际上哪个会上Docker容器的概念要比DevOps还火爆。Docker／openshift相关的session都尝尝是爆满的。从那里开始我逐渐感觉到了开源容器技术的强大和吸引力。
从红帽开始OpenShift的考试就是我在完成RHCA红帽认证架构师之后的一个心结，至今也没有完成。不过这根草我早晚是要拔掉的。主要是由于OpenShift是Docker ＋ kubernetes 的组合；是如今企业级PaaS容器平台的主要技术路线。总之离开红帽是如此的仓促，说实话这也是我职业生涯中的一个不小的遗憾。当时确实觉得 kubernetes 的命令行操作不是很方便，而且在OpenShift并没有降低这个门槛，也即是说在OpenShift里面还是要有一定的工作量和技能的要求在编写kubernetes的yml文件上。在这一点上，及时我熟练掌握了Rancher之后，同样发现编写compose file也是难以逃避的。在推广一步，大部分Docker PaaS平台也都是这样，很多产品也是在界面上提供一个文本输入框，让人输入容器服务定义文件的内容。
在最近的半年中，我的所有技术研究都集中在Docker和其服务编排技术上。与很多用户做过技术交流，PoC测试，有些单子也落地。总结后，有些结果让我感叹。国内的所有企业不区分规模和行业，其实他们对国内原生的创业公司是欢迎的，由于这些公司提供的是国产软件和技术服务。在Docker这个火热的领域中，已经有20多家国内创业公司，我想所有的公司也都已经接受到了这一点的福利了。外国软件通常给人的感觉是：不是国产软件（不要小看国内公司对国产软件的诉求），纯英文操作界面和文档，可能的水土不服，高昂的软件价格和服务费，如果技术太新的化很可能厂商也不具备足够的技术实力和服务力量。
经过了一些Docker容器项目之后，可以断言的是容器市场的火爆和它的技术优势是直接相关的。容器化之后的应用可以通过服务编排工具快速地部署／更新、弹性地伸缩和使用资源，优化其传统应用运维的若干缺陷。容器的轻量和just enough的隔离技术让资源池的管理更加简单，利用率大幅度提升，这对研发部门的环境管理是不小的提升，使CI的过程更加高效和经济。Docker对微服务的支持也深深地诱惑了所有开发者，做系统微服务实施开发者能想到的实施技术大多数会是容器。
以上容器的优势和特性使得国内的这些项目落地和实施的可能性进一步提高，甚至很多项目的速度远远超预期；按照我多年的经验看，一个软件技术型的项目，用户纠结半年到一年以上是很正常的。可能也跟国内企业包容本土化软件公司，追捧新潮技术直接相关；我观察到的一些项目，在2～4个月内落单的屡见不鲜。有些试点的DevOps咨询项目也落地很快。
这些项目都殊途同归地指向了DevOps这个关键词，这让我不得不从去年开始就关注和学习这个最佳实践。当然，我对DevOps的前途非常看好，因此当我听说业内出现了相关认证考试之后，我毫不犹豫地报名参加了。经过2个多月的缜密的准备，我终于幸运地一次通过了这个考试。考试获得了两个证书。
DevOps Master
DevOps Master 认证自由讲师
我参加的是讲师认证培训TTT，很高兴能成为Exin在国内的首批5个认证人员之一。在准备这个考试的过程中我学习了一些书籍，现在还在深度学习的书有两本。
我完成了这本黑皮书的读书笔记，很遗憾的是，我发现它的最新版，把封面改成了白底的了，我不能在叫它黑皮书／黑宝书了。这本书我起码看了两遍；目前正在调试它的书中的代码，代码中的营养还是很高的，计划尽快把所有代码调试通过；从而完成我许下多次的线上分享本书的诺言。
这本书被我称为CD红皮书／红宝书。本书早在10年就出版了，也就是说比Docker早好多年。他给我最大的印象就是，作者每一页上似乎都在介绍这做事情的原则和规矩是什么？我一点也不夸张，他对CD的介绍，就是通过讲解一系列在项目上的经验总结。对作者这种级别的经验，和写书的房子只能用一个词总结“服”。这本书太干，我至今还没有消化完。他让我看到了解决发布和变更风险的终极解决方案，没有一次性解决问题的部署／配置／发布工具，有的是历练和打磨了千万次的持续部署流水线；隐约地觉得没用入手的企业都会慢慢跟上的。
以上是我对DevOps的阶段性总结，跨度有半年之久。这半年中我逐渐看清了我的主要兴趣点，抛除所有其他主题，目前剩下的就是：云计算和DevOps。一方面觉得年纪不饶人，不能可能在和年轻人拼精力、体力和创意；我的背景和经验都让我感觉，在这两个话题上，我还是有很多年的经验和技术积累和总结的。云计算是（公有云＋私有云）未来企业IT基础架构的走向；DevOps是目前看比较正确的运作实践。一个便技术，一个便管理，正好完整覆盖了我的经验；在其对应的开源技术这个分支里，我想它们都还有这很多的为探索和研究的项目。</description>
    </item>
    
    <item>
      <title>红帽媒体日</title>
      <link>https://example.com/2015/07/14/e7baa2e5b8bde5aa92e4bd93e697a5/</link>
      <pubDate>Tue, 14 Jul 2015 14:20:24 +0000</pubDate>
      
      <guid>https://example.com/2015/07/14/e7baa2e5b8bde5aa92e4bd93e697a5/</guid>
      <description>本次演讲用了大约25分钟，超时了大约5分钟多，但是其中有些观点还是没有叙述的很倒位。只能算是我的一种理解和解读，希望对道场的媒体朋友们对认识红帽公司有帮助。
演讲源版slide和录音在这个网页上： http://investors.redhat.com/events.cfm 的这部分：
Jun 24, 2015
10:30 AM - 1:00 PM ET
 Red Hat Analyst Day
Listen to webcast 
View Presentation
12.2 MB
Add to Briefcase
View Additional Information
    我做了Pual这一段的翻译，翻译的文档下载点这里：[RH_Summit_Analyst_Day_Master_20150714_MartinLiu](http://7bv9gn.com1.z0.glb.clouddn.com/wp-content/uploads/2015/07/RH_Summit_Analyst_Day_Master_20150714_MartinLiu.pdf) </description>
    </item>
    
  </channel>
</rss>
