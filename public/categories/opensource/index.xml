<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>opensource on DevOps &amp; SRE Blog</title>
    <link>https://martinliu.cn/categories/opensource/</link>
    <description>Recent content in opensource on DevOps &amp; SRE Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 02 Apr 2018 00:22:44 +0800</lastBuildDate><atom:link href="https://martinliu.cn/categories/opensource/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kops on Aws</title>
      <link>https://martinliu.cn/blog/kops-on-aws/</link>
      <pubDate>Mon, 02 Apr 2018 00:22:44 +0800</pubDate>
      
      <guid>https://martinliu.cn/blog/kops-on-aws/</guid>
      <description>kops这种方式是我找到的最佳的，最适合于培训课堂需要的安装方式，当然对有类似需求的人有帮助。
Route53 DNS配置 kops需要使用DNS服务，用主机名提供k8s的相关服务访问。配置的注意点：
 域名还是有必要有一个的，没有的话注册一个也不贵，以后用着也方便 建议在aws的Route53里做一个二级域名，例如：k8s.devopscoach.org 这个二级域名最好是能被正常公网解析的，为了便于直接访问集群里的服务 用 dig NS k8s.devopscoach.org 可以能正常解析（Mac上是这个命令）  由于全球的域名同步会需要一些时间，因此可以先做这一步，用到的时候，可能就已经同步好了。
kops会将所有主机的域名解析都自动化的添加A记录到这里。
安装工具准备 需要安装的工具包括 kubectl, kops 和 AWS CLI 工具。kops需要调用 AWS CLI来创建所需要的资源。我觉得简单的方法是：在目标的Region里创建一台Amazon AMI的虚拟机，这样AWS CLI就不用装了，而且在云里的话，执行kops的时候，由于有一大堆资源创建更新的api调用，感觉速度比在本机快很多，而且还用担心断网。
可以启动一台t2.micro规格的Amazon AMI即可，另外需要给这个实例配置如下IAM用户权限，在启动的时候选择合适的IAM Role。
 AmazonEC2FullAccess AmazonRoute53FullAccess AmazonS3FullAccess IAMFullAccess AmazonVPCFullAccess  这台虚拟机启动之后，安装kubectl和kops。
curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl sudo chmod +x kubectl sudo mv kubectl /usr/local/bin/kubectl wget https://github.com/kubernetes/kops/releases/download/1.8.0/kops-linux-amd64 sudo chmod +x kops-linux-amd64 sudo mv kops-linux-amd64 /usr/local/bin/kops 准备ssh登陆秘钥，用户ssh登录各个ec2实例
[ec2-user@ip-172-31-27-182 ~]$ ssh-keygen Generating public/private rsa key pair.</description>
    </item>
    
    <item>
      <title>EXIN DevOps Master 认证考试</title>
      <link>https://martinliu.cn/2016/11/07/exin-devops-master-e8aea4e8af81e88083e8af95/</link>
      <pubDate>Mon, 07 Nov 2016 15:19:08 +0000</pubDate>
      
      <guid>https://martinliu.cn/2016/11/07/exin-devops-master-e8aea4e8af81e88083e8af95/</guid>
      <description>DevOps这个词在去年参加红帽全球用户大会的时候就深深吸引了我，实际上哪个会上Docker容器的概念要比DevOps还火爆。Docker／openshift相关的session都尝尝是爆满的。从那里开始我逐渐感觉到了开源容器技术的强大和吸引力。
从红帽开始OpenShift的考试就是我在完成RHCA红帽认证架构师之后的一个心结，至今也没有完成。不过这根草我早晚是要拔掉的。主要是由于OpenShift是Docker ＋ kubernetes 的组合；是如今企业级PaaS容器平台的主要技术路线。总之离开红帽是如此的仓促，说实话这也是我职业生涯中的一个不小的遗憾。当时确实觉得 kubernetes 的命令行操作不是很方便，而且在OpenShift并没有降低这个门槛，也即是说在OpenShift里面还是要有一定的工作量和技能的要求在编写kubernetes的yml文件上。在这一点上，及时我熟练掌握了Rancher之后，同样发现编写compose file也是难以逃避的。在推广一步，大部分Docker PaaS平台也都是这样，很多产品也是在界面上提供一个文本输入框，让人输入容器服务定义文件的内容。
在最近的半年中，我的所有技术研究都集中在Docker和其服务编排技术上。与很多用户做过技术交流，PoC测试，有些单子也落地。总结后，有些结果让我感叹。国内的所有企业不区分规模和行业，其实他们对国内原生的创业公司是欢迎的，由于这些公司提供的是国产软件和技术服务。在Docker这个火热的领域中，已经有20多家国内创业公司，我想所有的公司也都已经接受到了这一点的福利了。外国软件通常给人的感觉是：不是国产软件（不要小看国内公司对国产软件的诉求），纯英文操作界面和文档，可能的水土不服，高昂的软件价格和服务费，如果技术太新的化很可能厂商也不具备足够的技术实力和服务力量。
经过了一些Docker容器项目之后，可以断言的是容器市场的火爆和它的技术优势是直接相关的。容器化之后的应用可以通过服务编排工具快速地部署／更新、弹性地伸缩和使用资源，优化其传统应用运维的若干缺陷。容器的轻量和just enough的隔离技术让资源池的管理更加简单，利用率大幅度提升，这对研发部门的环境管理是不小的提升，使CI的过程更加高效和经济。Docker对微服务的支持也深深地诱惑了所有开发者，做系统微服务实施开发者能想到的实施技术大多数会是容器。
以上容器的优势和特性使得国内的这些项目落地和实施的可能性进一步提高，甚至很多项目的速度远远超预期；按照我多年的经验看，一个软件技术型的项目，用户纠结半年到一年以上是很正常的。可能也跟国内企业包容本土化软件公司，追捧新潮技术直接相关；我观察到的一些项目，在2～4个月内落单的屡见不鲜。有些试点的DevOps咨询项目也落地很快。
这些项目都殊途同归地指向了DevOps这个关键词，这让我不得不从去年开始就关注和学习这个最佳实践。当然，我对DevOps的前途非常看好，因此当我听说业内出现了相关认证考试之后，我毫不犹豫地报名参加了。经过2个多月的缜密的准备，我终于幸运地一次通过了这个考试。考试获得了两个证书。
DevOps Master
DevOps Master 认证自由讲师
我参加的是讲师认证培训TTT，很高兴能成为Exin在国内的首批5个认证人员之一。在准备这个考试的过程中我学习了一些书籍，现在还在深度学习的书有两本。
我完成了这本黑皮书的读书笔记，很遗憾的是，我发现它的最新版，把封面改成了白底的了，我不能在叫它黑皮书／黑宝书了。这本书我起码看了两遍；目前正在调试它的书中的代码，代码中的营养还是很高的，计划尽快把所有代码调试通过；从而完成我许下多次的线上分享本书的诺言。
这本书被我称为CD红皮书／红宝书。本书早在10年就出版了，也就是说比Docker早好多年。他给我最大的印象就是，作者每一页上似乎都在介绍这做事情的原则和规矩是什么？我一点也不夸张，他对CD的介绍，就是通过讲解一系列在项目上的经验总结。对作者这种级别的经验，和写书的房子只能用一个词总结“服”。这本书太干，我至今还没有消化完。他让我看到了解决发布和变更风险的终极解决方案，没有一次性解决问题的部署／配置／发布工具，有的是历练和打磨了千万次的持续部署流水线；隐约地觉得没用入手的企业都会慢慢跟上的。
以上是我对DevOps的阶段性总结，跨度有半年之久。这半年中我逐渐看清了我的主要兴趣点，抛除所有其他主题，目前剩下的就是：云计算和DevOps。一方面觉得年纪不饶人，不能可能在和年轻人拼精力、体力和创意；我的背景和经验都让我感觉，在这两个话题上，我还是有很多年的经验和技术积累和总结的。云计算是（公有云＋私有云）未来企业IT基础架构的走向；DevOps是目前看比较正确的运作实践。一个便技术，一个便管理，正好完整覆盖了我的经验；在其对应的开源技术这个分支里，我想它们都还有这很多的为探索和研究的项目。</description>
    </item>
    
    <item>
      <title>DevOps 的起点-入手微型数据中心</title>
      <link>https://martinliu.cn/2016/07/01/devops-in-a-box/</link>
      <pubDate>Fri, 01 Jul 2016 03:11:10 +0000</pubDate>
      
      <guid>https://martinliu.cn/2016/07/01/devops-in-a-box/</guid>
      <description>测试环境说明 我的笔记本电脑的环境描述如下。
OS MacBook Pro 2011 版， 2.3 GHz Intel Core i5， 8GB DDR3， 256 GB SSD。 OS X EI Capitan version 10.11.5
Docker Docker for Mac Version 1.12.0-rc2-beta17 (build: 9779)
$ docker version Client: Version: 1.12.0-rc2 API version: 1.24 Go version: go1.6.2 Git commit: 906eacd Built: Fri Jun 17 20:35:33 2016 OS/Arch: darwin/amd64 Experimental: true Server: Version: 1.12.0-rc2 API version: 1.24 Go version: go1.6.2 Git commit: a7119de Built: Wed Jun 29 10:03:33 2016 OS/Arch: linux/amd64 Experimental: true $ docker-machine version docker-machine version 0.</description>
    </item>
    
    <item>
      <title>用 Docker 构建 Serverless 应用</title>
      <link>https://martinliu.cn/2016/06/22/building-serverless-apps-docker/</link>
      <pubDate>Wed, 22 Jun 2016 16:22:51 +0000</pubDate>
      
      <guid>https://martinliu.cn/2016/06/22/building-serverless-apps-docker/</guid>
      <description>Martin解读Serverless Serverless 不意味着没有服务器，而是从应用可以在一个抽象层上忽略它的存在，而只关注在功能实现上和自身的请求处理上；每一个功能实现在不是单纯的业务逻辑处理的代码，相反每个功能调用具有了 server 的特质，进化成为了一个具有自省、自知和自治的工作负载单元；他们更像是能够衍生出其它新功能单元的生物体。这样整个 Serverless 应用架构之内，每个生命可以衍生下去，子子孙孙无穷匮也。
本文编译了：https://blog.docker.com/2016/06/building-serverless-apps-with-docker/ 一下是正文内容。
处在这技术日新月异的时代里，新的技术浪潮经常对当前的技术产生着威胁和颠覆。在编写应用的时候我们目前经常谈论到“Serverless”技术。它的核心思想是把应用作为一系列的功能/function来部署，这些功能在需要的时候被按需部署。服务器管理应该是不需要去操心的事情，所有功能被按需调用，被运行在群集之上。
但是 Serverless 里不意味着没有 Docker，事实上 ”Docker 就是 Serverless”。你可以用 Docker 来容器化这些功能，然后按需地运行在 Swarm 群集上。Serverless 是一种构建分布式计算的应用的方法，而 Docker 是完美的构建和运行他们的平台。
从Server 到 Serverless 那么我们如何来编写 Serverless 的应用？让我们先看下这个例子：“一个有5个子服务组成的投票应用”：
它的结构如下：
 两个 web 前端 一个后台的处理投票的 worker 服务 一个处理投票的消息队列  一个数据库  那个后台处理投票的进程是非常容易成为转换为 Serverless 架构的目标。在投票应用内，我们可以运行一点类似于下面的代码，来执行后台任务：
 import dockerrun client = dockerrun.from_env() client.run(&amp;quot;bfirsh/serverless-record-vote-task&amp;quot;, [voter_id, vote], detach=True) Worker 和消息队列能用按需在 Swarm 上运行的容器来替换，并自动地按需扩容。
我们甚至可以消除掉 web 前端。我们可以这么做：用 Docker 容器来相应每一个HTTP 请求，每个 HTTP 请求都用一个自生长的跑着轻量 HTTP 服务器的容器来处理。之前使用的是长时间持续运行的 HTTP 服务器，现在变成了具有 HTTP 相应和处理能力的按需跑起来的容器，而且他们能自动地扩容来支持所有访问请求。</description>
    </item>
    
    <item>
      <title>DockerCon 2016 D2 超萌码头酷黑客 大会圆满闭幕</title>
      <link>https://martinliu.cn/2016/06/22/closing-general-session-moby-docks-cool-hacks/</link>
      <pubDate>Wed, 22 Jun 2016 02:35:39 +0000</pubDate>
      
      <guid>https://martinliu.cn/2016/06/22/closing-general-session-moby-docks-cool-hacks/</guid>
      <description>Closing General Session 的主题是 Moby Dock‘s Cool Hacks ； 从字面意思上看，这个主题的意思是“超萌码头酷黑客”的意思。我已经看到了关于最后一天开幕主题演讲的评论，说是“剑指商业”什么的；而我认为 Docker 从开始的第一天，无论它是否开源，它都是为了商业利益而已。话在说回到开源，Docker 只是完美的应用了开源软件这种实践而已；而且docker 把开源这种模式应用的如此成功，并在商业上也如此让人眼红和侧目，这也算是开源软件商业化登峰造极的一种极端性个案。个人认为开源无疑是在软件行业中做出爆款技术当之无愧的首选的实践方式。我在红帽碰到很多参与开源十几二十年的老黑客，他们不乏会表达关于开源纯洁性沦丧的抱怨；我对此也非常理解和认同。而我更认同开源可以对软件技术带来无比活力的这个积极的方面。
言归正传，小编我还是“模拟现场”播报一下大会闭幕主题演讲的盛况。这是大会的结束的 session，现场的人数明显的少于第一天开幕式的人。在十几分钟内，人们稀稀拉拉的进入了会场。会场中的座位大约还有一部分空位。美女Mano 和 黑客Kristie 作为主要演讲人上台。美女上台后先用手机自拍了几下。两个人开始宣布，Docker 大会之后举行为期一个月的黑客大赛，这是我们的传统，Docker 大会虽然今天会结束，而docer 黑客大赛将从今天开始。我们来请大家欣赏三个非常酷的黑客项目演示。
本次大会的录音点这里 http://www.ximalaya.com/32280565/sound/17388272
黑客演示1：微服务自毁平台 Jeff 登场。Jeff 开始讲述微服务的故事，我们都在试图让基础架构做到冗余，容所有的服务都冗余，让群集能够自愈；但是故障，断网，宕机还是会发生。我们所做的这些真的能够保证业务不宕机么，服务不终端么？你怎么能确认这一点？因此回归到故障的发生上吧？如果服务要出故障，请让它有规律的发生。请程序猿和 ops 都投入到故障处理的战斗中，以此为契机来优化和改造应用，让应用变的更加强壮。我们都听说过混乱猴子，而 Jeff 团队正式帮人们构建一堆这样的工具的人。
有一个思路是：如何让我的系统的服务出故障，如何主动的在系统中注入故障。我们需要一种特殊的编排工具来在系统中模拟和触发故障的发生。我用容器做工具平台来触发故障注入的动作。当然这个故障是在容器架构的微服务系统中触发这个动作。
Jeff 开始做这个 Demo。说：如果你的”网络没有故障，天下太平。“其实这很无聊的说，有木有？有木有？我现在开始用工具来注入 网络延迟的网络故障吧！ 。用一个基于策略的工具。配置一个网络故障模拟的策略，故障什么时间发生，发生多久。这里设计一个每10秒钟注入一次网络延迟故障提高到600ms 的故障。然后配置故障影响的范围，这里使用 Docker 的 lable 来做故障发生节点的选择的条件。符合标签的系统将受到这次故障影响。我们的这个故障模拟编排系统，帮您提前体验故障的发生。现在你看故障发生了，从这些容器里面 ping google 的网络延迟比之前大多了， 目前延迟到了600ms。希望你们能开始体验和使用这个而工具。
黑客演示2：Serverless 架构的应用不是梦 Ben 是大家在 Docker 大会喜闻乐见的一个黑客，他经常给做 demo 和 session。他绝对符合超萌的标准。
Ben 开讲，Serverless 是如何做的？ben 认为 Serverless 是一种全新的应用编程的思路，而 docer 可以很好的支持这种思路，并实现和执行这种思路。docer 群集可以让Serverless引用按需执行，并让该应用的底层变得资源冗余并路由可达。ben 开始演示 他的几张 slides， 说 Sererless == docker这个概念。本开始讲解：如何用Serverless架构来实现投票应用的改造。如何把这个5个服务模块的纯粹容器微服务系统转换为 serverless 架构的应用。开始修改源代码，把发入队列的票，变成一个处理投票的容，把 http 服务器变成一个 CGIHander（）服务；但是 nodejs 不支持 CGIhander，肿么办？我用 perl 重写了这部分，为毛用 perl，被忘了它乃是古董级的黑客神器的好不好，呵呵！改造完之后的系统架构如下。架构是把处理 postgresql 意外的模块都重写了。数据库保留在最下层。这种Serverless重构实践遵从的原则如下。</description>
    </item>
    
    <item>
      <title>Atomic Host 原子主机最简测试</title>
      <link>https://martinliu.cn/2015/07/18/atomic-host-e58e9fe5ad90e4b8bbe69cbae69c80e7ae80e6b58be8af95/</link>
      <pubDate>Sat, 18 Jul 2015 13:29:45 +0000</pubDate>
      
      <guid>https://martinliu.cn/2015/07/18/atomic-host-e58e9fe5ad90e4b8bbe69cbae69c80e7ae80e6b58be8af95/</guid>
      <description>环境准备 本文使用笔记本电脑+KVM虚拟化进行以下的测试过程，当然也可以用其它的操作系统加虚拟化软件的组合，测试机需要满足以下的条件： 测试虚拟机的建议配置1C/2GB/10GB 虚拟机使用的网络需要能连接到互联网 虚拟机需要能加载光盘iso文件 可以执行起停虚拟机操作，能通过控制它登陆来做初始化配置
本文测试机是Lenovo T440s笔记本电脑，安装的操作系统是Fedora 22，使用KVM虚拟化，用Virt-Manager做GUI图形管理工具。建立了一个NAT的静态虚拟网络，虚拟机可以使用该网络来从互联网下载需要的文件包。
下载Fedora Atomic Host虚拟机文件；下载页面： http://www.projectatomic.io/download/ 点击绿色的下载按钮。下载qcow2格式的Atomic Host虚拟机文件。复制下载的文件到虚拟机运行的存储目录中，文件名可以是master.qcow2，新测试虚拟机会基于它创建。
在通过这个虚拟机模版文件生成测试机前，需要准备一个init.iso的文件，用来初始化测试机的主机名和初始用户密码。
[bash] [root@martin-fedora vm]# cat meta-data instance-id: master local-hostname: master.xenlab.com [root@martin-fedora vm]# cat user-data #cloud-config password: smartvm ssh_pwauth: True chpasswd: { expire: False } [root@martin-fedora vm]# genisoimage -output init.iso -volid cidata -joliet -rock user-data meta-data I: -input-charset not specified, using utf-8 (detected in locale settings) Total translation table size: 0 Total rockridge attributes bytes: 331 Total directory bytes: 0 Path table size(bytes): 10 Max brk space used 0 183 extents written (0 MB) [/bash]</description>
    </item>
    
    <item>
      <title>红帽媒体日</title>
      <link>https://martinliu.cn/2015/07/14/e7baa2e5b8bde5aa92e4bd93e697a5/</link>
      <pubDate>Tue, 14 Jul 2015 14:20:24 +0000</pubDate>
      
      <guid>https://martinliu.cn/2015/07/14/e7baa2e5b8bde5aa92e4bd93e697a5/</guid>
      <description>本次演讲用了大约25分钟，超时了大约5分钟多，但是其中有些观点还是没有叙述的很倒位。只能算是我的一种理解和解读，希望对道场的媒体朋友们对认识红帽公司有帮助。
演讲源版slide和录音在这个网页上： http://investors.redhat.com/events.cfm 的这部分：
Jun 24, 2015
10:30 AM - 1:00 PM ET
 Red Hat Analyst Day
Listen to webcast 
View Presentation
12.2 MB
Add to Briefcase
View Additional Information
    我做了Pual这一段的翻译，翻译的文档下载点这里：[RH_Summit_Analyst_Day_Master_20150714_MartinLiu](http://7bv9gn.com1.z0.glb.clouddn.com/wp-content/uploads/2015/07/RH_Summit_Analyst_Day_Master_20150714_MartinLiu.pdf) </description>
    </item>
    
    <item>
      <title>Red Hat Summit之Paul的开源逻辑思维</title>
      <link>https://martinliu.cn/2015/07/01/red-hat-summite4b98bpaule79a84e5bc80e6ba90e980bbe8be91e6809de7bbb4/</link>
      <pubDate>Wed, 01 Jul 2015 06:52:00 +0000</pubDate>
      
      <guid>https://martinliu.cn/2015/07/01/red-hat-summite4b98bpaule79a84e5bc80e6ba90e980bbe8be91e6809de7bbb4/</guid>
      <description>应用为王，操作系统是心跳。从整个行业的角度，而不只是操作系统和某种工具的角度看，行业已经发生了重大的变化。下面是一些例证。
  VMWare几年前说操作系统已死，可是最近却发布了Linux操作系统的容器技术的产品线。
  微软也把它的一些技术开源了，并且在这些方面取得了一些它们认为可喜的进展。
  IDC的调查显示，数据中心的操作系统目前是两个主要选择：Linux和Windows。以上说明了：开源不再是非主流，而进入了数据中心主流技术，企业现在开发的应用将不得不在两种操作系统中做出选择。
[caption id=&amp;ldquo;attachment_53819&amp;rdquo; align=&amp;ldquo;aligncenter&amp;rdquo; width=&amp;ldquo;800&amp;rdquo;] Keynote 笔记[/caption]
从这个角度出发，Red Hat的使命才刚过开始，它中在用Linux和相关开源技术来变革整个企业数据中心的技术堆栈；从基础架构一直到应用开发。
为何开源技术当今如此之火热？开源技术正在解决和处理现实社会中那些最复杂的业务问题。为什么会这样？驱动因素是什么？是动态变化的企业业务需求。
开源技术最擅长的是快速地创新，这成为了企业技术创新和业务变革的动力，IT也逐渐因此从成本中心转变为价值和创新中心。
开源不仅仅只是看到源代码，更重要的：它是自由开放的平台，是分享的平台，它萌生了持续不断的创新，一个创新基于另外一个创新之上，一环接一环地扩散开来，根本停不下来。 这意味着技术问题能够被更快、更好地解决；而不是丢给私有软件技术厂商们各自独自解决，企业最等来消费他们的产品。
Linux是计算供给层，毫无疑问云计算和软件定义存储都基于它。它不能叫做一个Linux社区，而是一组相关的社区项目协作在一起共同创新，这样才带来了企业可以使用的高性能稳定的操作系统；这样Red Hat才有可能给企业带来企业级Linux操作系统。
KVM是计算的虚拟化抽象层，VMWare最先进入这一企业市场，它试图用封闭的管理层和锁定的模式来控制这个市场，从而控制客户。Red Hat的使命是：为企业提供了Linux操作系统和至上的开放虚拟化技术；企业可以在这个层面消费开源开放虚拟化技术，并做出备份的方案选择。
没有Linux和开放虚拟化云计算就不存在。公有云提供商使用这些技术构建了共有云服务。可是企业不想让自己的业务运行在防火墙之外，因此OpenStack 项目应运而生。它让企业构建私有云成为可能。Red Hat在OpenStack上面所有的贡献都100%的提交到社区，成为主流代码的一部分；从而OpenStack能够运行在Red Hat Linux和KVM之上，这使得Red Hat巨大的Linux生态系统的价值服务与OpenStack领域；企业能够借此放心地在OpenStack构建的私有云，并运行企业重要的业务。
在开源的开发框架里，开发人员可以有更多、更新的开发语言、开发工具、库和社区的支持，这使他们能更快地解决业务问题。这些框架首先被广泛应用于互联网行业公司。Red Hat基于JBoss社区为企业提供了企业级的应用服务器、集成工具、规则引擎和丰富的开发语言。让企业级应用能像互联网公司一样地使用开放应用所需的开发框架和开发平台。相比私有技术公司用了四十多年达到目前的程度，开源领域的快速创新用十几年就做到了，发展速度比私有软件快很多。
现在看到了基础架构和开发框架都极大地受到了开源技术的影响、冲击和变革。运维和开发之间亟待出现一种融合技术，来改善目前的互为孤岛的现状。这种联系将使开源技术为他们带来最大的共同价值。
容器技术实际上在操作系统中存在了很多年了，只是最近才被引入开源领域；它的出现将确实会改善孤岛问题，为开发人员解决了应用在各种混合的计算和存储平台之间的可移植性、一致性和敏捷性等问题。
开发和运维之间的割裂还导致了业务创新的迟钝，这个问题已经持续存在很多很多年了。因此Red Hat发布了Red Hat Atomic Enterprise Platform。让企业应用可以安全地在各种形式的计算平台上一致地运行。Red Hat 发布了OpenShift v3 ，它是一些列容器的自动化调度和部署管理工具集合，并包含全套的开放应用开发框架平台。它能帮助企业基于容器技术发展出新一代的混合应用。
为何企业IT技术会有这些变革？为何这些变革会发生？其实还是企业不得不快速地响应业务的变化，企业不得不使用IT技术来创造出更多的价值，应用开发不得不跟上需求变化的脚步，基础架构的运作和运维再也不允许我们手工地安装一台服务器，频繁地去手动更改网口跳线。企业必须面对和适应动态的业务变化，不光要从开发层面，同时从运维层面。
企业需要构建和重写无状态的业务应用，并使用软件定义存储来解决传统存储的空间不能无限扩容的问题。Gluster和Ceph在这方面已经日臻成熟，并或将去替换私有的传统存储技术。

企业应用DevOps是一种趋势，它不是一个理论，而是一种实践。Red Hat的全线企业级开源技术平台已经做好了准备，企业现在就可以开始DevOps实践之旅。
开源和闭源之战将不可逆转地持续下去，Red Hat将持续守护开源阵营。私有软件技术不愿意看到逐渐开放的变化，他们不希望开放，不愿意去分享；Pual坚信开放不仅仅是看到代码而已，而是与之共生，是开放的软件开发流程，是基于开放代码上的不断创新活动。这是一场宏大的战役，开源逐渐开始在一些战斗中取胜，待到明年此时，或将看到开源是如何在企业IT基础架构上全面获胜的。
本演讲的官方Blog报道：http://summitblog.redhat.com/2015/06/24/paul-cormier-announces-new-products-and-technologies-at-red-hat-summit/
下面是演讲实况视频。</description>
    </item>
    
    <item>
      <title>在 RHEL 7 上安装 Foreman 1.8</title>
      <link>https://martinliu.cn/2015/06/16/e59ca8-rhel-7-e4b88ae5ae89e8a385-foreman-1-8/</link>
      <pubDate>Tue, 16 Jun 2015 16:25:34 +0000</pubDate>
      
      <guid>https://martinliu.cn/2015/06/16/e59ca8-rhel-7-e4b88ae5ae89e8a385-foreman-1-8/</guid>
      <description>首先安装RHEL7使用光盘安装最小化系统，安装完成之后，关闭防火墙和SELinux（为了测试方便），配置主机名为FQDN格式，如 fm1.8.xenlab.com； 加本机的主机名解析到/etc/hosts 文集中。之后注册到RHN。
[bash]
[root@fm18 ~]# subscription-manager register [root@fm18 ~]# subscription-manager attach &amp;ndash;auto [root@fm18 ~]# subscription-manager repos &amp;ndash;disable=&amp;quot;*&amp;quot; [root@fm18 ~]# subscription-manager repos &amp;ndash;enable=rhel-7-server-optional-rpms [root@fm18 ~]# subscription-manager repos &amp;ndash;enable=rhel-server-rhscl-7-rpms [root@fm18 ~]# subscription-manager repos &amp;ndash;enable=rhel-7-server-rpms [root@fm18 ~]# rpm -ivh http://yum.puppetlabs.com/puppetlabs-release-el-7.noarch.rpm [root@fm18 ~]# yum -y install http://yum.theforeman.org/releases/1.8/el7/x86_64/foreman-release.rpm [root@fm18 ~]# yum -y install http://ftp.sjtu.edu.cn/fedora/epel/epel-release-latest-7.noarch.rpm [root@fm18 ~]# yum clean all [root@fm18 ~]# yum makecache [root@fm18 ~]# yum update -y [root@fm18 ~]# reboot [root@fm18 ~]# yum install foreman-installer</description>
    </item>
    
    <item>
      <title>在CentOS 7上安装部署Katello2.2</title>
      <link>https://martinliu.cn/2015/06/07/e59ca8centos-7e4b88ae5ae89e8a385e983a8e7bdb2katello2-2/</link>
      <pubDate>Sun, 07 Jun 2015 16:35:05 +0000</pubDate>
      
      <guid>https://martinliu.cn/2015/06/07/e59ca8centos-7e4b88ae5ae89e8a385e983a8e7bdb2katello2-2/</guid>
      <description>Katello的系统架构如下图：
Katell系统是一个复合型开源项目，是Pulp, Candlepin 和 Foreman的组合。Foreman默认使用Puppet作配置管理。
它的安装文档见官方手册：http://www.katello.org/docs/2.2/installation/index.html
为了简化安装，请下在本站提供的CentOS7完美安装模板。使用它来创建一个虚拟机，6GB内存，2VCPU；网络上为了方便，请在virt-manger中新建如下所示的网络。
虚拟机启动之后，确保host能正常联网。启动刚才创建的虚拟机，配置好IP，ping 外网网站，确保它能正常联网即可。其它安装命令如下：
[bash]
yum -y localinstall http://fedorapeople.org/groups/katello/releases/yum/2.2/katello/RHEL/7Server/x86_64/katello-repos-latest.rpm yum -y localinstall http://yum.theforeman.org/releases/1.8/el7/x86_64/foreman-release.rpm yum -y localinstall http://yum.puppetlabs.com/puppetlabs-release-el-7.noarch.rpm yum -y localinstall http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm yum -y install foreman-release-scl
yum -y install katello
katello-installer -v
&amp;ndash;foreman-admin-username admin
&amp;ndash;foreman-admin-password smartvm
&amp;ndash;capsule-dns true
&amp;ndash;capsule-dns-interface eth0
&amp;ndash;capsule-dns-zone xenlab.com
&amp;ndash;capsule-dns-forwarders 192.168.10.1
&amp;ndash;capsule-dns-reverse 10.168.192.in-addr.arpa
&amp;ndash;capsule-dhcp true
&amp;ndash;capsule-dhcp-interface eth0
&amp;ndash;capsule-dhcp-range &amp;ldquo;192.168.10.100 192.168.10.240&amp;rdquo;
&amp;ndash;capsule-dhcp-gateway 192.168.10.1
&amp;ndash;capsule-dhcp-nameservers 192.168.10.10
&amp;ndash;capsule-tftp true
&amp;ndash;capsule-tftp-servername $(hostname)
&amp;ndash;capsule-puppet true
&amp;ndash;capsule-puppetca true
[/bash]</description>
    </item>
    
    <item>
      <title>安装完美 CentOS7 虚拟机模板</title>
      <link>https://martinliu.cn/2015/06/05/e5ae89e8a385e5ae8ce7be8e-centos7-e8999ae68b9fe69cbae6a8a1e69dbf/</link>
      <pubDate>Fri, 05 Jun 2015 15:44:52 +0000</pubDate>
      
      <guid>https://martinliu.cn/2015/06/05/e5ae89e8a385e5ae8ce7be8e-centos7-e8999ae68b9fe69cbae6a8a1e69dbf/</guid>
      <description>初始化安装 下载最新版CentOS7 DVD 选择mini安装。
网络配置 安装过程中设置了静态网络地址，如下：
[bash]
[root@centos7-tmp ~]# cat /etc/sysconfig/network-scripts/ifcfg-eth0 TYPE=Ethernet BOOTPROTO=none DEFROUTE=yes IPV4_FAILURE_FATAL=no IPV6INIT=no NAME=eth0 DEVICE=eth0 ONBOOT=yes DNS1=192.168.10.1 DOMAIN=xenlab.com IPADDR=192.168.10.8 PREFIX=24 GATEWAY=192.168.10.1 UUID=5fb06bd0-0bb0-7ffb-45f1-d6edd65f3e03
[/bash]
软件包 Change log:
   yum install wget telnet perl perl-devel net-tools kernel-devel
  yum install vim-enhanced.x86_64
  yum -y install git
  yum install acpid
  yum install tree
  yum install ntp
  yum install unzip</description>
    </item>
    
    <item>
      <title>Fedora 22 将于5月26日发布</title>
      <link>https://martinliu.cn/2015/05/24/fedora-22-e5b086e4ba8e5e69c8826e697a5e58f91e5b883/</link>
      <pubDate>Sun, 24 May 2015 08:37:06 +0000</pubDate>
      
      <guid>https://martinliu.cn/2015/05/24/fedora-22-e5b086e4ba8e5e69c8826e697a5e58f91e5b883/</guid>
      <description>No Content Found</description>
    </item>
    
    <item>
      <title>RedHat互联网平台解决方案</title>
      <link>https://martinliu.cn/2015/05/17/redhate4ba92e88194e7bd91e5b9b3e58fb0e8a7a3e586b3e696b9e6a188/</link>
      <pubDate>Sun, 17 May 2015 06:29:33 +0000</pubDate>
      
      <guid>https://martinliu.cn/2015/05/17/redhate4ba92e88194e7bd91e5b9b3e58fb0e8a7a3e586b3e696b9e6a188/</guid>
      <description>ppt点这里下载：[su_button target=&amp;ldquo;blank&amp;rdquo; style=&amp;ldquo;stroked&amp;rdquo; size=&amp;ldquo;2&amp;rdquo; icon=&amp;ldquo;icon: cloud-download&amp;rdquo;]下载[/su_button]
参考文档： AS深圳2014演讲PPT最终稿 http://pan.baidu.com/s/1i3KQFRJ QCon北京2015（PPT） http://pan.baidu.com/s/1sj2t1yl 这两个目录里面干货还是不少，可以下载了慢慢看。

学习了一写文档后，逐渐对互联网公司的架构挑战需求和现状有了一些了解。下面先聊下这方面的一些理解。
中国规模交易量 什么叫中国规模交易量，以淘宝2014-11-11 双十一当天的数据举例：
[su_list icon=&amp;ldquo;icon: rocket&amp;rdquo;]
  交易创建 80000笔/秒
  支付 38000笔/秒
  24小时完成交易额 571亿元人民币 // 93 亿美元
  [/su_list]
乍一看这个数字可能没什么感觉，可以比较一下美国的情况。全美所有的传统商场在“黑色星期五”一天的销售也仅为91亿美元，即使加上网络销售的24亿美元也比天猫“双十一”多不了太多。也就是说，美国黑五当天全网的电商是中国淘宝/天猫一家的四分之一。
因此中国人口基数大，网民数量大，假如您能激起大众的兴趣的话，你是不缺访问量的。对于意外的大规模的峰值访问量的处理，如果系统架构和应用没有提前经过特别的架构调整、优化；用膝盖都能想到系统挂掉、基础架构崩溃、交易数据出错是必然的事情。
理解到这个潜在的风险、需求和调整，我们所有设计和从事IT基础架构技术服务的人，可以想想，不向前看，不向BAT学习，不站在他们的肩膀上设计和调整自己的应用的话。想保证系统平安，除非业务是失败的业务（没有流量），否则没有平安可言。
架构特点 且不说马云家系统已经多么牛叉，我们看下京东的架构，我们也可以看到其架构设计在两个维度都非常清晰到位。业务架构维度上尽可能的松耦合，所有业务单元分解清晰，貌似莫名的遵循了分布式架构的要求；这样每个业务单元都可以对IT资源的消耗联动，弹性的供给必要的业务处理能力。IT架构维度上分解为三个层次：应用架构、数据架构、基础架构。基本上JD的这个PPT改变了我对这个企业的印象。从我的职业经验告诉我，这份PPT中规中矩，比较专业，堪称教科书式的架构设计。相对马云家的架构师的PPT图画的比较豪放，风格不同。JD这份PPT下载在这里。
[su_button url=&amp;ldquo;http://pan.baidu.com/s/1o6MI0t0&amp;rdquo; target=&amp;ldquo;blank&amp;rdquo; style=&amp;ldquo;stroked&amp;rdquo; size=&amp;ldquo;2&amp;rdquo; icon=&amp;ldquo;icon: cloud-download&amp;rdquo;]AS深圳2014 京东架构设计-吴博[/su_button]
除了分层细致设计业务架构之外，我们还能看到，电商公司多使用多数据中心多活的模式并发处理海量交易量，每个数据中心都可以处理全业务，都能在灾备和并行处理上一石二鸟。这和我们高贵的传统企业不同，他们往往可以实现同城双中心运行，异地数据中心往往是灾备中心；有些灾备切换并不是全业务的切换，有些灾备中只用于灾备切换演练，并不真的运行业务；有些异地灾备中心也会和主数据中心中的一部分业务做周期性的切换运行。这些高贵的客户往往把核心的数据放在主机上，这在他们想扩展到3个或者更多个数据中心的时候，略显尴尬；新增的数据中心也要配置一套新主机系统么？新的主机上数据和应用怎样快速迁移过来？需要多长时间？数据同步的和其他两个数据中心一致么？这些问题的回答都不简单？主机硬件固然是贵？但是所有问题都解决周全的话，可能更贵。
全新的纯X86的架构就在面前，BAT已经证明了它和开源技术组合在一起就是多快好省的架构。因此，IT架构的转型也成了必然选择。试想转型之后的机房，每个机架都是标准化的工作单元，它可能是几种类型：纯物理机计算节点、纯虚拟机计算节点（服务器虚拟化或者OpenStack等）、纯物理机存储节点（软件定义存储）；或运行容器的物理机或者虚拟机。另外机架上的网络设备和核心网络设备必然有他们自己的设计。这是我的一个猜测，有机会还需要和BAT的人多了解。
开源技术 BAT用到的开源技术真的是不甚枚举，也没有必要逐一分析。基本上各个领域里从开发堆栈、到架构堆栈和运维管理堆栈；各个方面的前几位的项目都有实践和应用。
红帽 那么红帽的互联网平台解决方案是什么？红帽的定位是基础架构技术厂商，因此红帽的全套技术框架就是它的互联网解决方案。如下图所示。

有些产品模块需要稍微说明一下，方便和开源项目对应起来。
[su_list icon=&amp;ldquo;icon: linux&amp;rdquo;]
  Red Hat Storage server / ICE : Gluster, Ceph</description>
    </item>
    
    <item>
      <title>Practical Linux Infrastructure</title>
      <link>https://martinliu.cn/2015/03/29/practical-linux-infrastructure/</link>
      <pubDate>Sun, 29 Mar 2015 14:10:37 +0000</pubDate>
      
      <guid>https://martinliu.cn/2015/03/29/practical-linux-infrastructure/</guid>
      <description>Practical Linux Infrastructure by Syed Ali Link: http://amzn.com/148420512X
[gallery size=&amp;ldquo;medium&amp;rdquo; ids=&amp;ldquo;53654,53655&amp;rdquo;]
The CI/CD pipeline automates as many tests as possible to gain confidence in the code. In addition, it performs a complete build of the software system and ensures the code that has been checked in does not cause anything to break. Any failure has to be investigated by a developer. There are numerous software products that can help implement a CI/CD pipeline, including the following: Jenkins (http://jenkins-ci.</description>
    </item>
    
    <item>
      <title>如何参与 Project Atomic</title>
      <link>https://martinliu.cn/2015/03/19/e5a682e4bd95e58f82e4b88e-project-atomic/</link>
      <pubDate>Thu, 19 Mar 2015 03:23:37 +0000</pubDate>
      
      <guid>https://martinliu.cn/2015/03/19/e5a682e4bd95e58f82e4b88e-project-atomic/</guid>
      <description>关于 Project Atomic 项目 
Project Atomic 项目相关的开源技术组件如下：
[wm_list bullet=&amp;ldquo;icon-linux&amp;rdquo; class=&amp;quot;&amp;quot;]
  linux kernel
  systemd
  OSTree and rpm-ostree
  Docker
  kubernetes
  Fedora and CentOS
  [/wm_list]
该项目的网站在： http://www.projectatomic.io/
加入 Project Atomic 邮件列表 项目一般性讨论： https://lists.projectatomic.io/mailman/listinfo/atomic
项目开发者：https://lists.projectatomic.io/mailman/listinfo/atomic-devel
项目版本发布更新：https://lists.projectatomic.io/mailman/listinfo/atomic-announce
填写自己的邮箱后，别忘了在邮箱里收信，并且确认。如下图所示：

问 Project Atomic 问题和讨论 http://ask.projectatomic.io/en/questions/ 这里是项目的论坛可以在这里提问和帮助其他人。
了解 Project Atomic 代码 https://github.com/projectatomic/ 项目的代码在Github网站上可以看到，如果你watch这个项目的话，可以收到所有开发者对该项目的所有代码更新等活动。</description>
    </item>
    
    <item>
      <title>走进学校分享开源</title>
      <link>https://martinliu.cn/2015/03/12/e8b5b0e8bf9be5ada6e6a0a1e58886e4baabe5bc80e6ba90/</link>
      <pubDate>Thu, 12 Mar 2015 12:05:14 +0000</pubDate>
      
      <guid>https://martinliu.cn/2015/03/12/e8b5b0e8bf9be5ada6e6a0a1e58886e4baabe5bc80e6ba90/</guid>
      <description>今天走入了天津市大学软件学院，和同学们分享了我对开源软件的一些看法和经历；很多同学对如何成为架构师感兴趣。全程学生们没有玩手机和睡觉的，感觉效果应该还不错。ppt在这里&amp;ndash;&amp;gt;《开源软件之系统架构师篇》可惜对其中一个同学的回答后来想着欠妥 :(</description>
    </item>
    
    <item>
      <title>Martin&#39;s lab 主服务器搭建</title>
      <link>https://martinliu.cn/2015/03/08/e4b8bbe69c8de58aa1e599a8e690ade5bbba/</link>
      <pubDate>Sun, 08 Mar 2015 15:42:01 +0000</pubDate>
      
      <guid>https://martinliu.cn/2015/03/08/e4b8bbe69c8de58aa1e599a8e690ade5bbba/</guid>
      <description>上图是红帽产品和技术架构的全貌。来源是：http://www.redhat.com/en/technologies/cloud-computing 这张图我用在了我的首次给公司内部的全体销售培训上。由于我是IT管理背景的，因此我很习惯从云管理层往下看云引擎的各个层面。但是管理层产品，其实是后来整合纳入的。红帽起家的旗舰产品还是在底层的RHEL。总之，我想在一个Lab里面实现以上所有的部分，所谓实现是让其每个部分都能在运行在假象的一个有意义的业务场景里。还好，红帽的产品全都是基于x86平台的，因此我用几个笔记本，再加上我家里的这台HP MicroServer G8服务器应该能够全部部署出来。
做这样的一个lab还是要一定的规划和设计的，这些初步的规划和设计都在我的本子里手写的，就不在这里敲字了，随后我会抽空上几张图。
主服务器基本配置 硬件：Lenovo W540 CPU Intel i7, RAM 32 GB, SSD 512GB, HD 1TB
OS : RHEL 7.1
订阅是红帽公司的业务模式，也是红帽认为最自豪的部分，红帽相信可以成为开源技术和用户之间的催化剂，它不断参与最优秀的开源技术创新，并为其用户提供最强有利的技术服务和支持。红帽技术员工可以申请一个红帽雇员订阅。我的订阅可以在网上查到如下图所示：

红帽的服务必须是基于订阅的每一个节点（物理、虚拟）都需要有有效的订阅，否则红帽的支持服务不能生效。对于一个已经成功注册到红帽官网，并且状态正常的服务器，应该显示如下的注册状态：
[bash] [root@w540 ~]# subscription-manager list
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+ 安装的产品状态 +&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+ 产品名称： Red Hat Enterprise Linux Server 产品 ID： 69 版本： 7.0 构架： x86_64 状态： 已订阅 状态详情： 开始： 2014年09月09日 结束： 2015年12月08日 [/bash]
红帽员工订阅意味着所有红帽产品。
基本服务配置 KVM KVM的上手还真比我想象的速度要慢一些，起码比我用XenServer的经历更加纠结一些。总之现在可以彻底的忘记其它任何的选项，KVM可以满足我的所有需求了。由于主服务器有512SSD + 32GB RAM + 8 vCPU，所以我打算把产品里的所有管理控制节点VM都部署在这个机器上。预计有10个左右的虚拟机。 安装配置方面这里就不赘述了。只把困扰我许久的几个网络配置贴出来，供参考。
网桥0的功能是为所有虚拟机提供外网链接，使他们和主机一样直通主机所物理链接的局域网。 [bash] [root@w540 ~]# cat /etc/sysconfig/network-scripts/ifcfg-br0 DEVICE=br0 ONBOOT=yes TYPE=Bridge BOOTPROTO=none STP=on DELAY=0 DNS1=192.</description>
    </item>
    
    <item>
      <title>2014 Red Hat Summit- Paul Cormier, Red Hat keynote</title>
      <link>https://martinliu.cn/2015/02/09/2014-red-hat-summit-paul-cormier-red-hat-keynote/</link>
      <pubDate>Mon, 09 Feb 2015 05:24:15 +0000</pubDate>
      
      <guid>https://martinliu.cn/2015/02/09/2014-red-hat-summit-paul-cormier-red-hat-keynote/</guid>
      <description>2014 Red Hat Summit- Paul Cormier, Red Hat keynote</description>
    </item>
    
    <item>
      <title>Fedora 21 Server测试 - Cockpit篇</title>
      <link>https://martinliu.cn/2015/01/27/fedora-21-server-e6b58be8af95-cockpite7af87/</link>
      <pubDate>Tue, 27 Jan 2015 16:22:18 +0000</pubDate>
      
      <guid>https://martinliu.cn/2015/01/27/fedora-21-server-e6b58be8af95-cockpite7af87/</guid>
      <description>先上几张Fedora 21 server 安装的截图。
[gallery link=&amp;ldquo;file&amp;rdquo; ids=&amp;ldquo;53424,53425,53426,53427&amp;rdquo;]
新的配色还是不错的，重点看第三张图，虽然不全，已经基本上看出F21 服务器版的软件包了。

安装之后发现确实Cockpit的界面已经可以登陆了，是黑色的风格。

在继续安装和探索之前，我有装了一个默认选项的f21 server ，想通过这个节点的节目添加后统一管理。
[gallery columns=&amp;ldquo;1&amp;rdquo; size=&amp;ldquo;large&amp;rdquo; ids=&amp;ldquo;53433,53434,53435,53436,53437,53438,53439,53440,53441,53442,53443,53444,53445,53446,53447,53448&amp;rdquo;]
我感觉有了这个工具，新手们可以轻松第完成大部分Linux系统的维护工作了。
如果你点击了启用 docker , eth0的网络配置会丢失，会被docker那走作网桥，给他的image用作网关。这个测试最好是虚拟机多网卡。</description>
    </item>
    
    <item>
      <title>Fedora 22 有何值得期待</title>
      <link>https://martinliu.cn/2015/01/26/fedora-22-e69c89e4bd95e580bce5be97e69c9fe5be85/</link>
      <pubDate>Mon, 26 Jan 2015 14:26:12 +0000</pubDate>
      
      <guid>https://martinliu.cn/2015/01/26/fedora-22-e69c89e4bd95e580bce5be97e69c9fe5be85/</guid>
      <description>我使用这新安装的F21，连接着公司阿姆斯特丹的VPN，流畅的使用Firefox ， Chrome 上网，在没有墙的世界里顺利传行着。重返Linux世界，想起来很久没有用windows桌面了，渐渐适应和熟悉这感觉，且有些怀旧。
之前Fedora是没有太多的体验，用的最多的是opensuse + kde桌面的组合。目前，看到fedora magazine上很多更新，感觉真的是发展的太快了。 http://fedoramagazine.org/see-whats-coming-in-fedora-22-workstation/ 看了下这个帖子，上面说F22的提升包括：更长的电池寿命、gnome Wayland更多改进、开始应用bundle的开发、更好的第三方应用支持、提升Terminal、改善开发工具等等。查看更多细节：Christian’s blog post</description>
    </item>
    
    <item>
      <title>再次入手Linux - Fedora 21</title>
      <link>https://martinliu.cn/2015/01/25/e5868de6aca1e585a5e6898blinux-fedora-21/</link>
      <pubDate>Sun, 25 Jan 2015 10:10:09 +0000</pubDate>
      
      <guid>https://martinliu.cn/2015/01/25/e5868de6aca1e585a5e6898blinux-fedora-21/</guid>
      <description>再次安装桌面版的Linux操作系统 ，并打算作为主要的工作平台。已经是 fedora 21，需要新贴纸了。
接下来作的：http://www.linuxidc.com/Linux/2015-01/111481.htm
剩余没做的是按照搜狗输入法。</description>
    </item>
    
    <item>
      <title>虚拟机根分区扩容</title>
      <link>https://martinliu.cn/2015/01/21/e8999ae68b9fe69cbae6a0b9e58886e58cbae689a9e5aeb9/</link>
      <pubDate>Wed, 21 Jan 2015 15:46:31 +0000</pubDate>
      
      <guid>https://martinliu.cn/2015/01/21/e8999ae68b9fe69cbae6a0b9e58886e58cbae689a9e5aeb9/</guid>
      <description>我的Satellite虚拟机下载了所有常用的repo，100GB的磁盘空间都占满了，无奈必须扩容，否则没法用了。
扩容的前提条件正好满足：根分区在最后一个分区。
由于是kvm的虚拟机，所以首先需要扩大硬盘文件的大小： qemu-img resize my.img +100G 。
下面去操作系统里扩容。先要用fdisk删除根分区。记录初始的其实点。然后用n命令新建分区，输入原始其实点位置，回车默认接受结束点的最后一个位置。w存盘。
reboot系统，起来之后用命令扩容分区： resize2fs /dev/vda2 ； 在线扩容需要等一段时间，100GB的空间初始化在我的普通磁盘上做了5分钟左右。在此reboot机器，起来之后在看 df -kh 发现已经增加了100GB了，接下来再也不用担心类似情况了。</description>
    </item>
    
    <item>
      <title>KVM Virt-Manager  实用参考手册</title>
      <link>https://martinliu.cn/2015/01/06/kvm-virt-manager-e5ae9ee794a8e58f82e88083e6898be5868c/</link>
      <pubDate>Tue, 06 Jan 2015 15:55:02 +0000</pubDate>
      
      <guid>https://martinliu.cn/2015/01/06/kvm-virt-manager-e5ae9ee794a8e58f82e88083e6898be5868c/</guid>
      <description>关于 virt manager Virt Manager 是一个不错的kvm虚拟机管理工具，能够方便地管理虚拟机。我的测试机目前已经完全转向RHEL7上跑KVM虚拟机，通过virt-manager去管理的方案。

安装virt-manager：yum install -y virt-* ； 装完之后重新启动机器即可使用。
建议初始配置 安装完后有几个环境的配置推荐可以做一下。
Storage Pool ： 一个默认的 + 两个自建的
  Default ：这是virt-manager安装时默认创建的，它和操作系统在同一个卷上，我的测试机使用SSD卷，因此我所有虚拟机都会使用这个卷，这样速度比较快
  hd ：这是测试机上普通磁盘的一个目录，目的是把那些不需要快速IO的虚拟机跑着这里，节省SSD的磁盘空间
  iso ：这是普通磁盘上的iso文件目录，单独挂在这是为了，使用方便
  虚拟网络 （一个默认+两个新建）
  default ： 这个是安装了virt-manager + kvm 之后就有的，是用NAT的方式，带dhcp，默认虚拟机可以连接物理机所在的外围
  virbr1/virbr2 ：是我根据自己的需要建立的，只能和host物理机通讯，无dhcp
  我最近做OpenStack的实践，OpenStack需要最好隔离的几个网络跑不同的数据，因此virbr1/2正好符合OpenStack的测试需求。另外我在物理机的操作系统上搭建了yum源服务器，因此任何一个虚拟机都可以通过http访问我放在物理机上的repo目录，我只需要更新这些repos目录里面的rpm包的内容，我的lab环境中的所有虚拟机（不管是在何网络）都可以使用到最新的系统更新包和软件包了。这样大大提高了虚拟机里面软件测试的效率，所有虚拟机像是在本地安装rpm软件包一样，再也不需要联网下载，我只需要每周去公司联网同步一下这些目录即可。
有了以上配置之后，就可以高效工作了，效率感觉比vmware workstation要高，速度快稳定。下面是虚拟机创建的流程，里面有些我的推荐做法。
本想看下，virt-install 的使用方式，感觉那个参数太多，容易敲错，还是界面比较容易上手，而且出错的机会不高。
命令行常用操作指南（持续更新中） virt-manager主要操作还是在命令行比较高效，特别是下面的这些操作，在使用过程中，比较多用，用的多了感觉比GUI操作方式效率高多了。
virt-manager的命令行功能调用有两种方式：
  直接 virsh 回车 ，之后就进入了 virsh # 的一个专门的shell，help 就能看的里面支持的所有命令
  在普通shell下 直接 virsh &amp;lt;操作命令&amp;gt; &amp;lt;参数&amp;gt;，</description>
    </item>
    
    <item>
      <title>wget 下载大文件-断点续传</title>
      <link>https://martinliu.cn/2014/12/24/wget-e4b88be8bdbde5a4a7e69687e4bbb6-e696ade782b9e7bbade4bca0/</link>
      <pubDate>Wed, 24 Dec 2014 01:43:03 +0000</pubDate>
      
      <guid>https://martinliu.cn/2014/12/24/wget-e4b88be8bdbde5a4a7e69687e4bbb6-e696ade782b9e7bbade4bca0/</guid>
      <description>举例如下：
wget -c -b -t 0 -O CentOS-7.0-1406-x86_64-Everything.iso http://mirrors.sohu.com/centos/7/isos/x86_64/CentOS-7.0-1406-x86_64-Everything.iso -o centos.log
下载一个7GB的DVD文件，能够断点续传，能够把状态写入centos.log文件中。具体参数说明如下：
[su_table]
-c  断点续传   -b  后台下载   -t 0  反复尝试下载，0（零）为不限次数   -O file name  O（大写字母o）下载的文件命名为   -o file name  o（小写字母o）下载的日志保存在文件中   URL  http://mirrors.sohu.com/centos/7/isos/x86_64/CentOS-7.0-1406-x86_64-Everything.iso     [/su_table] 本文参考：http://blog.chinaunix.net/uid-14735472-id-111049.html</description>
    </item>
    
    <item>
      <title>Workshop: Creating a Docker management environment</title>
      <link>https://martinliu.cn/2014/12/04/workshop-creating-docker-management-environment/</link>
      <pubDate>Thu, 04 Dec 2014 02:46:04 +0000</pubDate>
      
      <guid>https://martinliu.cn/2014/12/04/workshop-creating-docker-management-environment/</guid>
      <description>Red Hat APAC Tech Exchange, Macau
Day 3 - 4 December 2014 &amp;ndash; Track C
Command to Run bash &amp;lt;(curl -sSL https://bit.ly/get-fabric8) -k
Document to read https://docs.docker.com/installation/
http://fabric8.io/v2/index.html
https://github.com/fabric8io/quickstarts
My document: https://access.redhat.com/articles/881893
Blogs http://rawlingsj.blogspot.com/
http://macstrac.blogspot.co.uk/</description>
    </item>
    
    <item>
      <title>workshop redhat storage and splunk</title>
      <link>https://martinliu.cn/2014/12/04/workshop-redhat-storage-splunk/</link>
      <pubDate>Thu, 04 Dec 2014 02:34:03 +0000</pubDate>
      
      <guid>https://martinliu.cn/2014/12/04/workshop-redhat-storage-splunk/</guid>
      <description>Instance Details Replace userX with your user id. For example, user1 &amp;ndash;&amp;gt; user 30
Instance  DNS  IP   **Internal**   RHS 01  rhs-01.userX.apac.red  10.100.0.101   RHS 02  rhs-02.userX.apac.red  10.100.0.102   RHS 03  rhs-03.userX.apac.red  10.100.0.103   RHS 04  rhs-04.userX.apac.red  10.100.0.104   Splunk Master  splunkmaster.userX.apac.red  10.100.0.201   Splunk Search  splunksearch.userX.apac.red  10.100.0.202   Splunk Peer 01  splunkpeer-01.</description>
    </item>
    
    <item>
      <title>开源服务器的时代真到了？</title>
      <link>https://martinliu.cn/2014/02/08/e5bc80e6ba90e69c8de58aa1e599a8e79a84e697b6e4bba3e79c9fe588b0e4ba86efbc9f/</link>
      <pubDate>Sat, 08 Feb 2014 03:17:37 +0000</pubDate>
      
      <guid>https://martinliu.cn/2014/02/08/e5bc80e6ba90e69c8de58aa1e599a8e79a84e697b6e4bba3e79c9fe588b0e4ba86efbc9f/</guid>
      <description>&lt;p&gt;今天广为关注的的新闻末过Facebook的单人管理上万服务器。上网看了一下此新闻的出处：&lt;a href=&#34;http://www.datacenterknowledge.com/archives/2013/11/20/facebook-ops-staffer-manages-20000-servers/&#34;&gt;http://www.datacenterknowledge.com/archives/2013/11/20/facebook-ops-staffer-manages-20000-servers/ &lt;/a&gt; 本文的描述如下：Delfina Eberly, Director of Data Center Operations, Facebook, presented the Tuesday morning keynote about optimizing data center operations. In terms of hardware, Facebook, because it runs such an enormous volume of servers, focuses on serviceability, including starting from the ground up by influencing server design to ensure easiest and least time consuming methods to repair equipment in the data hall.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>让Ubuntu飞一会儿</title>
      <link>https://martinliu.cn/2011/04/10/let-ubuntu-fly/</link>
      <pubDate>Sun, 10 Apr 2011 11:11:27 +0000</pubDate>
      
      <guid>https://martinliu.cn/2011/04/10/let-ubuntu-fly/</guid>
      <description>很久以前我一直使用的rpm based Linux，原因很简单，我只要手握一张最新的DVD，就可以走遍天下都不怕，特别是对SuSE Linux的yast很依赖，因为它可以帮我解决rpm包之间的依赖性。这样工作起来就很简单，基本上是搜索到软件包之后，点击安装既可以搞定所有的软件安装工作。
来到Ubuntu世界的我并不很满意，最近一次的apt-get update，以失败告终，险些把家里的PC的一块硬盘给搞丢了，因为升级失败导致分区表失效了，Win操作系统不认了。直接崩溃，好在那Live Cd模式进入还能勉强看得那个盘里的东西，恢复到移动硬盘，重新格式化该分区，才把文件恢复了。着实让我虚惊一场。
我比较喜欢一些小的LAMP堆栈式安装的Linux，如TurnkeyLinux。安装可以在10分钟内搞定系统安装。今年家里的宽度升级到2MB了，因此带宽上逐渐能满足Ubuntu这种从网上升级的需求。下面就是找国内的升级的源了，进过几个月的使用，最近觉得在北京的联通固定宽带的用户，使用163的镜像站点速度还是不错的。再次感谢国内的这样的无私奉献的公司，使得在国内的开源用户可以更快更方便。废话说了一堆：）哈哈下面也就是这几条命了的事情。
第一步，当然要选择近水楼台的163了，来参考http://mirrors.163.com/.help/ubuntu.html 的帮助文档，根据你操作系统的版本，更新/etc/apt/sources.list 文件即可，之后你的Ubuntu就是从国内的较快的站点上下载包了
第二步，安装多线程apt下载加速工具apt-fast
[bash] root@lamp ~# apt-get install python-software-properties root@lamp ~# add-apt-repository ppa:tldm217/tahutek.net root@lamp ~# apt-get update root@lamp ~# apt-get install apt-fast root@lamp ~# apt-fast -v apt 0.7.25.3ubuntu9.3 for i386 compiled on Sep 9 2010 22:22:02 Supported modules: *Ver: Standard .deb *Pkg: Debian dpkg interface (Priority 30) S.L: &amp;lsquo;deb&amp;rsquo; Standard Debian binary tree S.L: &amp;lsquo;deb-src&amp;rsquo; Standard Debian source tree Idx: Debian Source Index Idx: Debian Package Index Idx: Debian Translation Index Idx: Debian dpkg status file [/bash]</description>
    </item>
    
    <item>
      <title>OpenNMS 1.6.1 to 1.6.10</title>
      <link>https://martinliu.cn/2010/03/28/opennms-161-1610/</link>
      <pubDate>Sun, 28 Mar 2010 05:37:04 +0000</pubDate>
      
      <guid>https://martinliu.cn/2010/03/28/opennms-161-1610/</guid>
      <description>[singlepic id=35 w=320 h=240 float=left]在最近的一年里，我基本上忙于CMDB的工作，没有什么业余时间来看看OpenNMS的情况。其实OpenNMS是最初引入我深入了解开源软件世界的东东。时隔1年之久，我上一篇关于opennms的文章是它是1.6.1版本，刚才查了一下，它最新的稳定版本是1.6.10.
看似它这一年里发展的比较慢，这让我感到些许地失望，大概地看一下一堆相关的release notes。功能性的变化如下：
  新增和增强了一些monitor的和功能，主要有http，dns，ldap，ssh，jmx等，从最初的snmp采集，都这些采集功能；采集能力的增强是它这样的无代理监控程序永远的话题
  UI的功能的增强了一些
  SNMP采集仍然是他的主要能力，在这方面也有了一些改进
  新增了一些网络设备品牌的支持
  阀值配置也有改进
  总的来说，作为一款能够采集各种snmp mib信息，能够出好看的性能报表，能够作为统一的告警事件平台，能够有简单易用的UI，OpenNMS做的显然是非常不错的。至今还行它还没有提出什么云计算相关的话题，可见他们还是一般比较稳健发展，不爱赶时髦的人。希望他们能做的更好。
对于我的这个blog来说，之前写的OpenNMS和网管相关的东西比较多，以后可能会越来越少，就此和OpenNMS做一个总结。以后本blog可能会和目前做的cmdb和itsm相关这些内容为主了。</description>
    </item>
    
    <item>
      <title>[網播] Born to MISrepresent 第二集：當 OpenNMS 遇上 SFLC ，催生了 Moglen Ravicher LLC</title>
      <link>https://martinliu.cn/2009/02/04/e7b6b2e692ad-born-to-misrepresent-e7acace4ba8ce99b86efbc9ae795b6-opennms-e98187e4b88a-sflc-efbc8ce582ace7949fe4ba86-moglen-ravicher-llc/</link>
      <pubDate>Wed, 04 Feb 2009 04:52:02 +0000</pubDate>
      
      <guid>https://martinliu.cn/2009/02/04/e7b6b2e692ad-born-to-misrepresent-e7acace4ba8ce99b86efbc9ae795b6-opennms-e98187e4b88a-sflc-efbc8ce582ace7949fe4ba86-moglen-ravicher-llc/</guid>
      <description>（原文於 2008-04-08 發表於 http://blog.roodo.com/ystuan/archives/5830995.html）
這個音檔的授權是姓名標示-非商業性-相同方式分享 2.5 台灣，跟我的網誌一樣。
下載ogg格式：Born_to_MISrepresent_EP2.ogg 下載mp3格式：Born_to_MISrepresent_EP2.mp3 前往存放在 Archive.org 上的頁面：Born to MISrepresent EP2，有更多資訊以及格式。
內容摘要：
OpenNMS 1.3.11 版發佈，並宣佈與 Hyperic 就雙方的產品進行合作。這項合作的推手是一個雙方的共同客戶。Hyperic 的 agent 預料將可和擁有強大平台但是拙於 agent (agent-less)的 OpenNMS 形成良好互補。（自 1.3.10 版就開始跟 Hyperic Agent進行整合，最近 OpenNMS 版本號已跳升至 1.5.90 ） Tarus 的 blog 有更多細節：The Year of Integration
Hyperic 跟 OpenNMS 的初步整合，可線上收看 Integrating Hyperic HQ and OpenNMS（瀏覽器需支援 flash 格式播放）
當 OpenNMS 遇上 SFLC ：前一陣子 Tarus 跑去 Ask Slashdot ，嚷嚷說 Cittio Watchtower 使用 OpenNMS 的程式碼當然可以，但是使用的方式違反了（程式碼採用的）GPL授權。
想也知道，跑去 Slashdot 一定會引來關注，他也尋求軟體自由法律中心（Software Freedom Law Center，SFLC）的協助。但是，SFLC服務對象僅限於非營利機構，結果呢，SFLC決定以成立一間新的律師事務所(Moglen Ravicher LLC)的方式，來服務支持自由軟體的營利機構， OpenNMS Group 因此成了 Moglen Ravicher LLC 的第一個客戶。</description>
    </item>
    
    <item>
      <title>opennms 1.6.1-1 quick start guide</title>
      <link>https://martinliu.cn/2009/01/11/161-1-opennms-quick-install-guide/</link>
      <pubDate>Sun, 11 Jan 2009 02:33:12 +0000</pubDate>
      
      <guid>https://martinliu.cn/2009/01/11/161-1-opennms-quick-install-guide/</guid>
      <description>本安装手册为纯命令版，如果有什么疑问清参考官方安装手册，或给本贴留言。
[install yum on your Linux box]
选择任意Linux系统，安装上yum工具，在命令行测试 yum -v
[testing internet connection with those two URL]
测试是否能上网，用浏览器分别打开这两个网址

 http://www.martinliu.cn/2007/12/13/opennms-yum-install/  http://yum.opennms.org/repofiles/ 先别关闭这两个网页。
[Install opennms 开始安装:
 yum install yum-fastestmirror  rpm -Uvh http://yum.opennms.org/repofiles/opennms-repo-snapshot-rhel4.noarch.rpm  yum list opennms  yum install opennms [ post-install and config] 开始配置：
 export OPENNMS_HOME=/opt/opennms  vi /var/lib/pgsql/data/pg_hba.conf
1. 注释掉其中所有可用的行，加入下面三行
local all all trust
host all all 127.0.0.1/32 trust
host all all ::1/128 trust  /sbin/service postgresql restart  /usr/java/jdk1.</description>
    </item>
    
    <item>
      <title>[发布说明] OpenNMS 1.6.0 (Stable) Released</title>
      <link>https://martinliu.cn/2008/11/14/e58f91e5b883e8afb4e6988e-opennms-160-stable-released/</link>
      <pubDate>Fri, 14 Nov 2008 14:57:36 +0000</pubDate>
      
      <guid>https://martinliu.cn/2008/11/14/e58f91e5b883e8afb4e6988e-opennms-160-stable-released/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://www.opennms.org/images/b/b5/Banner.jpg&#34; alt=&#34;&#34;&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href=&#34;http://sourceforge.net/forum/forum.php?forum_id=882433&#34;&gt;OpenNMS 1.6.0 (Stable) Released&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;似乎每年的10月以后我就会进入一个超级繁忙的状态，很长时间没有更新blog了，今天姑且转载一个OpenNMS的发布说明吧。&lt;br /&gt;&lt;br /&gt;OpenNMS, the world&amp;rsquo;s first enterprise-grade network management platform developed as 100% free and open software, has released version 1.6.0. This is a stable, production release that incorporates nearly three years of development.&lt;br /&gt;&lt;br /&gt;以上算是OpenNMS的广告语大家看看就是，需要注意的是一个企业级的产品实施费用是从很低的门槛一直到企业级的花费的。和其他的企业级解决方案的实施没有区别，差异在于，一个不同的许可证类型，此为开源许可证是也。&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
