<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>IaC on Martin Liu's Blog</title><link>https://martinliu.cn/tags/iac/</link><description>Recent content in IaC on Martin Liu's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 21 Mar 2021 00:05:58 +0800</lastBuildDate><atom:link href="https://martinliu.cn/tags/iac/index.xml" rel="self" type="application/rss+xml"/><item><title> DevOps 的未来：2021 年的 15 个趋势</title><link>https://martinliu.cn/blog/devops-%E7%9A%84%E6%9C%AA%E6%9D%A52021-%E5%B9%B4%E7%9A%84-15-%E4%B8%AA%E8%B6%8B%E5%8A%BF/</link><pubDate>Sun, 21 Mar 2021 00:05:58 +0800</pubDate><guid>https://martinliu.cn/blog/devops-%E7%9A%84%E6%9C%AA%E6%9D%A52021-%E5%B9%B4%E7%9A%84-15-%E4%B8%AA%E8%B6%8B%E5%8A%BF/</guid><description>&lt;img src="https://martinliu.cn/img/2021/03/The-Future-Is-Bright.jpg" alt="Featured image of post DevOps 的未来：2021 年的 15 个趋势" />&lt;p>本文的原文地址：[https://thechief.io/c/editorial/future-DevOps -15-trends-2021/](&lt;a class="link" href="https://thechief.io/c/editorial/future-DevOps" target="_blank" rel="noopener"
>https://thechief.io/c/editorial/future-DevOps&lt;/a> -15-trends-2021/ ) 本文是一篇译文，旨在学习，并分享给社区。&lt;/p>
&lt;p>&lt;img src="https://elasticstack-1300734579.cos.ap-nanjing.myqcloud.com/2021-03-20-Screen%20Shot%202021-03-21%20at%201.26.38%20AM.jpg"
loading="lazy"
>&lt;/p>
&lt;p>DevOps 和整个IT运维是一个不断发展的领域，本文的趋势就是证明。总是需要跟上趋势并利用其优势。&lt;/p>
&lt;p>DevOps 正在与机器学习和人工智能等各种技术创新不断发展和融合，这些创新将在2021年占据更多的领域。&lt;/p>
&lt;p>学习这些趋势，并在你的 DevOps 实践中实施它们，将使你在这个革命性的领域中保持活力。&lt;/p>
&lt;p>在过去十年的引入中，DevOps 已经成长为许多IT公司不可或缺的一部分。&lt;/p>
&lt;p>专家预测，到2025年，DevOps 市场规模将达到128.5亿美元。在软件工程中实施 DevOps 所带来的效率和众多优势，是其被大量采用的关键驱动力。&lt;/p>
&lt;p>年复一年，软件开发领域总有一些新的实践出现，有些则被抛弃。&lt;/p>
&lt;p>在本文中，我们将探讨 DevOps 的上升趋势和实践，以及对2021年该行业的期望。&lt;/p>
&lt;h1 id="1-devsecops-将成为新的-devops">1-DevSecOps 将成为新的 DevOps&lt;/h1>
&lt;p>随着企业拥抱无服务器、Docker、Kubernetes和其他现代云技术，安全将一如既往地成为高度优先级，成为 DevOps 的默认部分。&lt;/p>
&lt;p>与 DevOps &amp;ndash;开发团队和IT团队的融合类似，DevSecOps 将是将安全融入开发和IT运维团队。&lt;/p>
&lt;p>技术研究公司国际数据公司(IDC)预测，到2024年，DevSecOps 将推动亚太地区至少50%的新应用，这让 DevSecOps 从2021年开始有了成长的乐土。&lt;/p>
&lt;h1 id="2-aiops-的实施率将上升">2-AIOps 的实施率将上升&lt;/h1>
&lt;p>自2017年以来，采用人工智能和机器学习来增强、自动化和管理IT运维，是 DevOps 过程中的革命性改变。&lt;/p>
&lt;p>Gartner 的研究指出，到2023年，40%的DevOps 团队将利用人工智能进行IT运维（AIOps）来增强应用和基础设施监控工具。&lt;/p>
&lt;p>随着超过30%的IT组织已经利用机器学习和人工智能，越来越多的组织将采用 AIOps 来提高关键 DevOps 任务的效率和自动化程度，为IT操作人员腾出时间用于更有价值的业务活动。&lt;/p>
&lt;h1 id="3-基础架构自动化ia将更占主导地位">3-基础架构自动化（IA）将更占主导地位&lt;/h1>
&lt;p>基础设施管理工具将帮助 DevOps 团队将自动化引入交付、配置和IT基础设施管理。&lt;/p>
&lt;p>IA 应用可以无缝地自动化IT基础设施的交付、配置和管理，帮助 IT 团队提高工作效率和可靠性。&lt;/p>
&lt;p>2021年，企业将开始用企业级的 IA 工具取代自定义设置，实现部署和配置的自动化。&lt;/p>
&lt;h1 id="4-混沌工程将成为常规的测试技术">4-混沌工程将成为常规的测试技术&lt;/h1>
&lt;p>混沌工程&amp;ndash;在生产中对软件进行实验，以建立对系统抵御突发事故能力的信心的学科，在 DevOps 中会变得更加重要。&lt;/p>
&lt;p>软件被要求具有高效和冗余性，混沌工程提供了这方面的测试以及更多。&lt;/p>
&lt;p>Gartner 提出，到2023年，40%的组织将实施混沌工程作为 DevOps 的一部分，这将减少高达 20% 的意外停机时间。&lt;/p>
&lt;h1 id="5-在-devops-流程中实现更多自动化">5-在 DevOps 流程中实现更多自动化&lt;/h1>
&lt;p>实际上，每个IT组织都在以某种方式使用自动化。Business wire 的一份报告显示，美国61%的组织广泛使用自动化。&lt;/p>
&lt;p>企业正在意识到自动化的力量和好处，并将其引入到 DevOps 的每一个层面，从开发，到部署和管理阶段。&lt;/p>
&lt;p>在2021年，DevOps 将获得并使用更多先进的自动化工具来评估容易出错的人工执行任务，并更好地在 DevOps 发展中加速开发和部署。&lt;/p>
&lt;p>事实的更广泛的大流行，很多公司正在并将继续进行大量的自动化工作，这是前所未有的。&lt;/p>
&lt;h1 id="6-从设计到部署公司将采用混合云">6-从设计到部署，公司将采用混合云&lt;/h1>
&lt;p>随着2020年整个行业经历的转变，远程工作成为新的常态，企业将全面拥抱混合运维。随着企业对其技术堆栈进行的现代化改造，从而利用云的优势，混合云将成为部署的新常态，以及一般的业务。&lt;/p>
&lt;p>企业将开始同时使用内部私有云部署和公有云来进行IT运维。&lt;/p>
&lt;h1 id="7-利用-agileops-实现更敏捷的软件交付">7-利用 AgileOps 实现更敏捷的软件交付&lt;/h1>
&lt;p>AgileOps 结合了成熟的敏捷和 DevOps 技术，为I&amp;amp;O团队提高敏捷性、管理软件开发和快速响应需求。&lt;/p>
&lt;p>快速实时响应用户需求的需求不断增加，将推动 AgileOps 在IT运维中的进一步发展。&lt;/p>
&lt;h1 id="8-基础设施即代码iac将蓬勃发展">8-基础设施即代码（IaC）将蓬勃发展&lt;/h1>
&lt;p>IaC 提供了一种通过配置文件来管理IT基础设施的手段，包括服务器、网络、存储设备（内部和云端）。&lt;/p>
&lt;p>通过 IaC，软件工程师可以通过运行一个脚本，来构建一套完整的基础设施，提供部署相同配置的一致性、可靠性，并提高软件开发环境的效率。&lt;/p>
&lt;p>基础设施即代码(IaC)的快速恢复、减少停机时间等优势，将推动更多公司在运维中采用它。&lt;/p>
&lt;h1 id="9-dataops的趋势是真实的并将更加成熟">9-DataOps的趋势是真实的，并将更加成熟&lt;/h1>
&lt;p>DataOps 将通过使用机器学习模型来预测事故或中断，从而彻底改变 DevOps。DataOps 使用预测分析，拥有彻底改变 DevOps 的潜力。&lt;/p>
&lt;p>Itamar Ben Hemo 是 Rivery 的CEO和联合创始人，他写道。&lt;/p>
&lt;blockquote>
&lt;p>就像DevOps将软件开发系统化了一样，DataOps旨在加速数据的收集、处理和分析。正如CIO所指出的，&amp;ldquo;IDC在&amp;rsquo;数据到见解&amp;rsquo;的管道中定义了四个核心阶段。识别数据、收集数据、转换数据和分析数据。这些阶段也共同构成了这门新兴学科 DataOps 的核心要素。&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;p>根据Nexla进行的一项调查，73%的公司计划投资DataOps来管理数据团队，关于他们如何使用数据，他们的团队结构和数据挑战发现，73%的公司正在投资DataOps。&lt;/p>
&lt;h1 id="10-无服务器架构将被广泛采用">10-无服务器架构将被广泛采用&lt;/h1>
&lt;p>无服务器(Serverless)计算为应用和软件部署提供了可扩展性，而无需物理硬件成本。&lt;/p>
&lt;p>由于企业正在寻求减少和最大限度地利用开支，以缓解新冠疫情的影响，更多的公司将迁移到无服务器架构，消除管理基础设施的责任，允许他们 &amp;ldquo;为你使用的东西付费&amp;rdquo;。&lt;/p>
&lt;p>将会有一个强有力无服务器的诉求，即我们将把代码推送到云端，其余的操作将由云提供商完成。&lt;/p>
&lt;h1 id="11-devops-将更深的实施-kubernetes">11-DevOps 将更深的实施 Kubernetes&lt;/h1>
&lt;p>越来越多的公司将开始看到Kubernetes提供的灵活性、可扩展性、自动化、高可用性和可移植性等优势，将带来直接的经济和运维效益，从而开始更深入的应用它。&lt;/p>
&lt;h1 id="12-边缘计算将被重视">12-边缘计算将被重视&lt;/h1>
&lt;p>组织正在需要处理收集数据的地方依靠边缘计算，以获得更好的延迟、成本优化和分析。&lt;/p>
&lt;p>随着IT操作人员进一步研究过滤监控数据，边缘计算将为DevOps提供这方面的优势，从而在2021年得到更多的应用。&lt;/p>
&lt;h1 id="13-迁移到微服务变得很重要">13-迁移到微服务变得很重要&lt;/h1>
&lt;p>通过实施微服务，企业将能够控制应用程序并自动管理软件版本，而且风险更低。&lt;/p>
&lt;p>商业企业在2021年及以后继续加速向云计算转移。他们越来越多地以灵活性为代价，尝试微服务带来的新技术栈。&lt;/p>
&lt;h1 id="14-noops将来到运维场景再次">14-NoOps将来到运维场景（再次）&lt;/h1>
&lt;p>NoOps 的思想是去除DevOps中所有的平台管理部分，减少开发者和基础设施之间的摩擦。&lt;/p>
&lt;p>随着 DevOps 中各种自动化和 AI 的兴起，NoOps 将在2021年登场，之后开始经历颠覆性的增长。&lt;/p>
&lt;h1 id="15-gitops将研究院">15-GitOps将研究院&lt;/h1>
&lt;p>GitOps 是一种集部署、监控、管理于一体的构建云应用的运维模式。GitOps 允许 DevOps 使用开发者工具来驱动运维，在DevOps中建立了一个 &amp;ldquo;你构建，你负责&amp;rdquo; 的流程。&lt;/p>
&lt;p>如果你想了解更多关于 GitOps的信息，请查看我们的播客集&lt;a class="link" href="https://anchor.fm/thedevopsfauncast/episodes/GitOps-This-is-What-You-Need-to-Know-12-epga8p?ref=thechiefio?ref=thechiefio" target="_blank" rel="noopener"
>GitOps: This is What You Need to Know.&lt;/a>&lt;/p></description></item><item><title>基础架构的持续集成和应用部署</title><link>https://martinliu.cn/blog/%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E7%9A%84%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%92%8C%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/</link><pubDate>Sat, 17 Mar 2018 10:50:57 +0800</pubDate><guid>https://martinliu.cn/blog/%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E7%9A%84%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%92%8C%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/</guid><description>&lt;img src="https://res.cloudinary.com/martinliu/image/upload/coding-snippet.jpg" alt="Featured image of post 基础架构的持续集成和应用部署" />&lt;p>持续集成通常是针对应用而言的，可是基础架构的持续集成应该怎么做？基础架构的持续集成应该属于持续交付/部署的基础。贯串本文的一个问题，或者在阅读本文时，您应该不断地问自己这个问题：我们的应用部署流程是怎样的？&lt;/p>
&lt;p>在回答这个问题之前，我们先来回顾一下，目前几乎所有人正在使用的手工环境和资源交付流程。在源码被编译打包了以后，安装包文件被上传保存到了内部的某个文件服务器上。Ops团队的某个组/人被分配到工单，根据工单描述的需求，它在测试或者生产环境中开始工作：&lt;/p>
&lt;ul>
&lt;li>用图形界面进行虚拟机模板的手工克隆工作，或者由于没有相应的权限或者自助服务，不得不给虚拟化管理员发任务单，然后等待回复。&lt;/li>
&lt;li>获取用户名和密码手工登录服务器，有些企业还要是等待领导的审批，才能得到密码信封和所需要的访问密码。&lt;/li>
&lt;li>根据工单（变更单）里的描述和自己的经验对虚拟机的操作系统进行配置，在这个过程中，Ops往往可能还需和需求方进行不止一次的沟通，确认相关参数。&lt;/li>
&lt;li>手工的下载应用安装包，然后分别手工上传到目标的服务器，凭经验和工单信息部署应用，然后测试部署结果，可能是看下页面有没有正常显示，或者服务起没起.&lt;/li>
&lt;li>手工测试和确认这些虚拟机的服务和状态，凭经验觉得OK了以后，回复工单，关闭工单。&lt;/li>
&lt;/ul>
&lt;p>以上的工作场景，可能是Ops人员很常规的一天，或者是几天内的工作，当然在这个过程中，他们还需要参与一些救火行动；他们在这个过程中也可能会有疑问，也可能会对此工作结果不确定；但是，日常的工作经验告诉他，差不多了，关闭任务单要紧，还有好多项目催活呢！就这样，配置并不精确的虚拟机环境就交给了下游的需求方。&lt;/p>
&lt;p>以上工作过程的问题如下：&lt;/p>
&lt;ol>
&lt;li>工作周期长，速度慢。实际上工作周期拖延的越久，工作结果的质量就越差，而并不是我们想想中的慢工出细活。&lt;/li>
&lt;li>所有步骤都是纯手工操作，不仅费事费力，而且出错几率高，也几乎不可能无痛的回退。可能有人会说了，我们不需要那么快，我们也不是互联网公司；可是从精益思想的角度看，以上这些工作都属于对业务价值的交付贡献为零的工作；你可能是由于公司给你发着工资，才错误的感觉到，这项工作活动应该有它的价值。&lt;/li>
&lt;li>上游传递来的信息可能不全面，不准确，因此Ops很有可能造成错误配置，因此会返工。&lt;/li>
&lt;li>传递给下游的虚拟机很可能会在后续的部署过程中，由于应用需求的变化，而需要下游的人员对其重新配置，产生重复的劳动。&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>手工部署的时间和代价 = 应的数量 X 应用版本数量 X 环境数量&lt;/p>
&lt;/blockquote>
&lt;p>对以上工作系统进行优化的原则：如果某一项活动的重复频率越高，那么对它进行优化，所产生的回报也会越明显；这里还要参考限制理论，优化的顺序要正确。&lt;/p>
&lt;p>我们从这个角度出发，就可以来设定基础架构持续集成和应用部署流程的改进目标了：&lt;/p>
&lt;ul>
&lt;li>减少总体人工工作时间和代价&lt;/li>
&lt;li>提高交付的速度、可靠性和频率&lt;/li>
&lt;li>能进行应用部署，能进行数据库Schema的更新&lt;/li>
&lt;li>能够实现部署流程的自服务，让任何需要部署应用的人能一键式部署任何版本&lt;/li>
&lt;/ul>
&lt;p>到了这里我们就必须将上述手工劳动，变为自动化的过程。因此，基础架构即代码IaC （Infrastructure as code）和相关的配置管理工具就会用到。&lt;/p>
&lt;p>&lt;img src="https://res.cloudinary.com/martinliu/image/upload/delivery-Pipeline.png"
loading="lazy"
alt="delivery-Pipeline"
>&lt;/p>
&lt;p>上图是一个典型的持续交付流水线模型，在此我们对它的关注点如下：&lt;/p>
&lt;ul>
&lt;li>代码的变更被Jenkins自动化的构建（CI是基础），打包后的安装包被存储在Artifactory里，Artifactory里面还可以存储应用包的其它相关元数据，如测试结果，能否可以用于下一步部署的标签等等。&lt;/li>
&lt;li>Jenkins自动化的搭建所需要的环境，调用虚拟化或者公有云资源池的API，制备虚拟机资源，然后调用Chef完成对虚拟机的配置，完成应用包部署所需要的所有层次的配置。&lt;/li>
&lt;li>环境配置完成后，应用正常运行了，在相关的测试工具对部署后的环境做验收测试，Chef具有支持测试驱动的相关工具。&lt;/li>
&lt;/ul>
&lt;h2 id="基础架构的持续集成">基础架构的持续集成&lt;/h2>
&lt;p>为了实现完整的基础架构持续集成流程，以上持续交付流水线必须具备的能力和概念包括：分层的系统管理、基础架构即代码IaC、配置管理、Chef工具等。下面详细对它们进行描述。&lt;/p>
&lt;h3 id="分层的系统管理">分层的系统管理&lt;/h3>
&lt;p>系统管理的层次涉及到OS相关的三个层次。下面自下而上地简单描述一下。&lt;/p>
&lt;ol>
&lt;li>制备管理：涉及到虚拟化层，这一层是资源表达层，目前所有主流的虚拟化都支持标准的Rest API，包括VMWare、EC2和Nuanix等。大多数主流配置管理工具都具备用于虚拟机生命周期管理（从生成、到开机、到删除等）的API功能，能按需的获得任何数量、规模、网络和操作系统类型的部署环境。&lt;/li>
&lt;li>配置管理：在任何类型的操作系统里自动化的安装和配置软件包，将所有配置参数配置好以后，持续保持这些配置点的状态。对于简单应用，来说按配置参数启动服务即任务完成。&lt;/li>
&lt;li>应用编排管理：对于复杂的分布式系统，由于各个自服务之间存在着依赖关系，所有自服务之前需要互通一些配置参数才能实现，应用程序整体的正常运行，配置应用服务器的odbc数据库连接，配置web前端的ldap认证服务器等等。目前微服务所涉及的服务发现和路由，是应用编排必备的配套设施。&lt;/li>
&lt;/ol>
&lt;p>不同的DevOps配置管理工具也都力求能覆盖以上三个层次，但是他们所追求的方向，或者想解决的主要问题并不相同。因此各个工具之间功能上有重叠。&lt;/p>
&lt;p>因此在运用这些工具的时候，不仅要追求其卓越的功能，还要能意识到，并有意的在不同层面上做取舍。&lt;/p>
&lt;h3 id="基础架构即代码">基础架构即代码&lt;/h3>
&lt;p>IaC这个概念最早是被Chef这类工具提出并实现，它的基本想法就是让Ops人员象开发人员一样的，工作在基础架构的代码上，而不是面对着数十个图形和文字终端界面。使用类似于开发应用程序的方式，开发和管理基础架构环境，因此基础架构能通过API访问和操控是基础，目前所有主流的虚拟化/云计算平台都具备很好的API接口；可惜的是在传统的企业环境中，这些资源池的API功能几乎没有被用到。&lt;/p>
&lt;p>像开发应用代码一样的管理IT基础架构，基础架构的开发和管理也需要遵循与应用开发类似的原则，这些原则包括：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>一切从源代码开始&lt;/strong>:并对其进行严格的版本管理，要对基础架构变更，就需要对相应的代码进行变更和测试，最后发布这些代码。从而力求做到服务器的无人登录运维。&lt;/li>
&lt;li>&lt;strong>模块化设计&lt;/strong>:不同应用底层所使用的基础架构有着大量的相似之处，模块化的设计不仅意味着标准化，也意味着更少的重复代码。我所用过的Terraform、Chef和Puppet这三种工具，都具有高度的模块化特性。&lt;/li>
&lt;li>&lt;strong>抽象能力&lt;/strong>：能够使用不同的模块和参数对任何特征的应用进行建模，用IaC代码进行表达，基础架构的代码开发也就是借助这种抽象能力，将所有管理对象（配置管理项）具体化地描述为应用服务模型。编写出来的基础架构代码，不仅包含了所有对应用配置描述性的语义，而且还是能够被执行的代码，在IaC代码执行之后，你就得到了所期望的虚拟机、应用配置和应用服务。&lt;/li>
&lt;li>&lt;strong>可测试性&lt;/strong>：这是一个经常忽略的能力，而在了解之后，你会发现IaC也是编程语言，就是对基础架构进行高级的编程，而且IaC代码本身和它的运行结果都是可以测试的。在执行前对其语义语法测试，在运行以后对其运行结果测试。Chef在这方面表现的尤为突出。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://res.cloudinary.com/martinliu/image/upload/chef-logo.png"
loading="lazy"
alt="Chef"
>&lt;/p>
&lt;p>&lt;img src="https://res.cloudinary.com/martinliu/image/upload/LogoTerraform.png"
loading="lazy"
alt="Terraform"
>&lt;/p>
&lt;h3 id="配置管理">配置管理&lt;/h3>
&lt;p>我可能是最早的一批进行ITIL配置管理实践，CMDB建设的这批人；我以前和甲方客户有着大量的关于配置管理和CMDB的对话，所经历过的项目也非常煎熬。而在DevOps场景下，感觉以前的经历也是很有意思的，只是我现在说到的CI，在没有特指的情况下，是持续集成的概念，还不是配置项了。&lt;/p>
&lt;blockquote>
&lt;p>Process for establishing and maintaining consistency of a product’s performance, functional and physical attributes with its requirements, design and operational
information throughout its life。&lt;/p>
&lt;/blockquote>
&lt;p>以上是配置管理在维基百科里的定义，它所表达的含义还是值得借鉴的；而如今很多人对DevOps的认识，还有人是建立在DevOps配置管理相关的工具上的。为了纠正这个错误观点，我们经常说：“天文学并不只是关于望远镜的。”&lt;/p>
&lt;p>配置管理工具中有很多是基于主机（OS）的管理工具，包括：CFEngine、Puppet、Chef、Salt和Ansible等。它们都具有基础架构即代码的相关原则和特征。都能实现：定义服务器的目标期望状态的能力，在每一次执行周期里，它们都进行状态检查，汇报当前状态和目标状态的偏差，在必要的时候也可以自动的执行必要的状态修复操作。&lt;/p>
&lt;p>Chef这种配置管理工具，使用了Ruby风格的DSL语言，使用者只需要用Chef代码表达”What“即可，而不需要明白”How“；”What“既是对目标配置状态的描述，使用者只需要将需求转换为Chef代码，然后用Chef客户端工具运行它即可。Chef的代码清晰，描述能力强大。在编码的时候遵循DSL规则，如果有必要的话也可以调用Ruby。&lt;/p>
&lt;p>Chef是客户端服务器的架构，安装了&lt;strong>Chef-client&lt;/strong>程序的节点可以注册到一个&lt;strong>Chef管理服务器&lt;/strong>里。&lt;/p>
&lt;p>Chef的开发人员（IaC编码者），在安装了用于和Chef服务器交互的名为&lt;strong>knife&lt;/strong>的工具，称之为&lt;strong>工作站&lt;/strong>的系统上开发基础架构代码。Chef使用大量内置的DSL资源（例如：package，service，file，directory等操作系统资源分类）对目标节点的配置进行建模，代码可以映射到内部的用来执行这些代码的各种&lt;strong>提供者&lt;/strong>上。&lt;/p>
&lt;p>所能实现的示例代码如下所示，下面是配置Linux操作系统中的Apache服务器。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">package&lt;/span> &lt;span class="s1">&amp;#39;httpd&amp;#39;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">action&lt;/span> &lt;span class="ss">:install&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">service&lt;/span> &lt;span class="s1">&amp;#39;httpd&amp;#39;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">action&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="ss">:enable&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">:start&lt;/span> &lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面是在Linux操作系统里配置 &lt;code>/a/b/c &lt;/code> 目录&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">directory&lt;/span> &lt;span class="s1">&amp;#39;/a/b/c&amp;#39;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">owner&lt;/span> &lt;span class="s1">&amp;#39;admin&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">group&lt;/span> &lt;span class="s1">&amp;#39;admin&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mode&lt;/span> &lt;span class="s1">&amp;#39;0755&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">action&lt;/span> &lt;span class="ss">:create&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">recursive&lt;/span> &lt;span class="kp">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>以下面就是 &lt;code>/a/b/c&lt;/code> 目录的配置结果状态：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">$ls&lt;/span> ‐ld /a/b/c
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxr-­‐xr-­‐x. &lt;span class="m">5&lt;/span> admin admin &lt;span class="m">4096&lt;/span> Feb &lt;span class="m">14&lt;/span> 11:22 /a/b/c
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Chef其它的重要术语：&lt;/p>
&lt;ul>
&lt;li>recipe ：包含了一个或者对个资源描述定义（Chef预定义了文件、用户、软件包、服务等等资源，可以扩展开发自定义资源类）&lt;/li>
&lt;li>cookbook ：包含了一个或多个recipe配方&lt;/li>
&lt;li>data bag ：包含了一个或多个配置数据点(data bag item)，是JSON格式，一个cookbook食谱可以包含一个或者多个数据袋&lt;/li>
&lt;li>run list ：包含了一个或者多个cookbook食谱，可将其部署在被管理的node节点上&lt;/li>
&lt;li>role ：一组特定内容的run list运行清单构成了一个角色&lt;/li>
&lt;li>environments：同我们现在对环境的定义，并可以一一对应起来&lt;/li>
&lt;/ul>
&lt;p>Chef是偏主机配置管理的非常的Iac语言，它具有很丰富的扩展能力和生态系统。它有很好的扩展能力，很强的逻辑性，能够进行深度的表达和锻造。它和Terraform和Ansible都有较大差异。&lt;/p>
&lt;h2 id="部署流程设计">部署流程设计&lt;/h2>
&lt;p>将以上手工处理过程转换为自动化执行的、一键式触发或者自动触发的流程需要关注很多个要点。&lt;/p>
&lt;p>使用Chef部署自开发的应用程序，包括配置所依赖的操作系统配置和软件，以及自身所需的应用配置。可以使用Liquibase进行数据库的schema部署和更新。可以用Jenkins协调和组织所有工序的执行。使用Jenkins管理部署流程的感觉和用它执行CI是类似。&lt;/p>
&lt;p>从简单开始，尽量将一组彼此相关的、版本化的可部署物组织在一起发布，例如在一个发布集合中可以包含：UI、REST服务器、消息服务和数据库。尽量使用一条命令构建，使用一条命令部署。&lt;/p>
&lt;h3 id="cookbook设计类型">Cookbook设计类型&lt;/h3>
&lt;p>&lt;strong>Library Cookbook 库食谱&lt;/strong> ：这种类型的食谱涵盖了通用的、可重用的逻辑。例如所有配置基线，也可以是安全基线。例如：dns、ntp、主机登录提示、用户和组、禁用服务清单等等。开发扩展的自定义chef资源，用来部署自开发应用。&lt;/p>
&lt;p>&lt;strong>Application Cookbook 应用系统食谱&lt;/strong> ：在以上库食谱的基础上，为一个套应用系统开发一个Cookbook食谱，每个应用可是一个recipe配方，recipe配方使用自定义开发的Chef资源。这样就形成了非常轻量的代码库。&lt;/p>
&lt;p>&lt;strong>Data Bag 数据袋&lt;/strong>：包含了各种应用配置，例如：服务端口、JAVA_OPTS等等。一个应用系统Cookbook食谱对应一个数据袋，袋子里面包含了该应用在每一套环境里的相关所有配置点。&lt;/p>
&lt;p>上线一个应用的新版本意味着新版本IaC代码的更新和部署，大致的流程是：编辑Chef代码、推送到Chef管理服务器、在节点上运行Chef客户端程序执行部署动作。Chef服务器的版本始终和版本控制库里的Master主干保持一致，这同样意味着环境配置和Master主干代码保持一致。&lt;/p>
&lt;p>用Chef开发自定义应用资源的实例代码如下，这段代码表示了一个Java应用war包的部署。&lt;/p>
&lt;p>&lt;img src="https://res.cloudinary.com/martinliu/image/upload/carbon.png"
loading="lazy"
alt="carbon"
>&lt;/p>
&lt;p>基于类似于以上的自定义资源类型，在必要的情况下，还可以对其开发Action（chef资源的操作），可能的操作定义有：&lt;/p>
&lt;ul>
&lt;li>从Artifactory服务器下载Java、Tomcat和WAR包。&lt;/li>
&lt;li>在标准的路径安装Java和Tomcat。&lt;/li>
&lt;li>创建和配置Tomcat容器&lt;/li>
&lt;li>在特定的容器里安装WAR包&lt;/li>
&lt;li>在主机上开防火墙端口&lt;/li>
&lt;li>生成应用属性文件&lt;/li>
&lt;li>启动Tomcat容器&lt;/li>
&lt;/ul>
&lt;p>Data Bag数据袋的实例代码结构如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;1.4.9&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;runtime&amp;#34;&lt;/span>&lt;span class="p">:{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;my-­app-­ui&amp;#34;&lt;/span>&lt;span class="p">:{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;java_opts&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;-­‐Xmx2G -­‐XX:MaxPermSize=1024m&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;app_config&amp;#34;&lt;/span>&lt;span class="p">:{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;db.url&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;jdbc:postgresql://devdb:5432/myapp&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;svc.foo.url&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;http://devsvc:9000/foo&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>以上是data_bags/my_app/DEV.json的定义，还可以有其它环境的定义data_bags/my_app/TEST.json和data_bags/my_app/PROD.json等。&lt;/p>
&lt;h2 id="人员角色">人员角色&lt;/h2>
&lt;p>基础架构的持续集成需要Dev和Ops的相互协作，才能做通，才能全面覆盖应用所需要的技术栈。&lt;/p>
&lt;p>&lt;strong>部署人员&lt;/strong> 更data_bag新数据袋和环境定义文件，触发生产环境部署的动作，调度chef-client客户端的运行，或者推送新版本的Chef代码更新。&lt;/p>
&lt;p>&lt;strong>技术负责人&lt;/strong> 维护应用系统Cookbook食谱。&lt;/p>
&lt;p>&lt;strong>框架开发人员&lt;/strong> 维护库Cookbook食谱，维护框架，持续改进流程。&lt;/p>
&lt;p>以上这三种角色，从上到下是从Ops到Dev的过渡。对于传统IT组织的架构，部署人员是Ops团队的，框架开发人员是Dev团队的。&lt;/p>
&lt;p>这三种角色都凑齐了，才能起到全套应用系统的整体建模和编码，而且每个角色都有负责的部分。技术负责人可能是来自Ops和Dev团队的技术大拿。他们对整体的正确性和完整性负责。&lt;/p>
&lt;p>目前也有Dev团队在其内部招聘运维研发的角色。这三种角色是基础架构即代码的层次结构和人员团队架构的对应，在实际工作中可以灵活应用；一方面覆盖所有技术层次，另外一方面引入所有必要的人员，是团队形成合力。&lt;/p>
&lt;p>如果不是本着将全套应用系统做全量的部署，以上任何角色做自己职责范围内的IaC自动化实践，其实效果是事倍功半的，或者机会只有技术学习和探索的价值。&lt;/p>
&lt;h2 id="构建cookbook">构建Cookbook&lt;/h2>
&lt;p>在开发了各种Cookbook之后，我们就需要对其进行持续测试，因此就需要使用Cookbook的持续构建流程。这个步骤就如同我们对应用程序的代码做CI一样。&lt;/p>
&lt;p>&lt;img src="https://res.cloudinary.com/martinliu/image/upload/cookbook-build.png"
loading="lazy"
alt="cookbook-build"
>&lt;/p>
&lt;p>开发人员（程序员不是业务应用开发者的专业名词，这里指IaC开发者，可能来自任何团队）在Workstations工作站上开发Chef的Cookbook代码，将代码提交到GitHub上的Chef代码仓库。&lt;/p>
&lt;p>Jenkins的Master服务器会触发CI Job，调用Ruby Slave对Cookbook代码进行集成和测试，然后触发EC2临时实例的创建，将Cookbook在EC2实例中进行测试，使用Artifactory中存储的应用软件包部署应用。如果测试都通过了，就触发Release Job，它将Cookbook代码上传到Chef服务器，供所各种环境中的被管理节点使用。&lt;/p>
&lt;p>上图用EC2作为Chef代码的CI环境，可以替代的方案有Vagrant+虚拟化（Virtual Box或者kvm），或者使用其它虚拟机资源池，如Ovirt KVM、Xen、Nutanix。我实际测试过使用Terraform对接Nutanix资源池，虚拟机创建超级快，几乎是秒得的速度。现有的虚拟化资源池就是最方便的对接对象，需要了解一下API和对接工具即可。&lt;/p>
&lt;p>对于Jenkins构建服务器而言，每一套应用系统对应的Cookbook组/集合的测试和发布都会在同一个构建服务器上发生，一般情况下这个服务器也是这些应用的CI服务器；这个Jenkins服务器也是相关Cookbook的CI作业和发布作业的运行地点。这个服务器上会安装所需要的Ruby gem包，应该能访问到与Chef服务器链接所需要的秘钥；应该可以使用到创建EC2测试节点虚拟机的秘钥，或者说访问其他类型虚拟机资源池的用户名和密码。&lt;/p>
&lt;h3 id="cookbook-ci-job">Cookbook CI Job&lt;/h3>
&lt;p>Cookbook CI作业的触发条件是：当有新Chef代码被合并的时候。它会进静态代码扫码和测试工作，包括如下内容：&lt;/p>
&lt;ul>
&lt;li>使用json和gem的相关工具分析JSON的句法&lt;/li>
&lt;li>使用Tailor做Ruby的句法和风格扫描&lt;/li>
&lt;li>使用Knife做Chef代码的句法分析&lt;/li>
&lt;li>使用Foodctritic做Che代码的句法分析和正确性分析&lt;/li>
&lt;/ul>
&lt;p>Chef代码在测试虚拟机里的集成测试是本文的重点，集成测试工具使用Test Kitchen，这个工具有一系列和虚拟化/云环境对接的插件，如 kitchen-ec2插件等。能按需临时的创建用于集成测试的虚拟机，在测试完毕，得出了测试结果之后，就删除本作业所创建的临时虚拟机。&lt;/p>
&lt;p>在集成测试的生命周期过程中也可能创建多个测试虚拟机/EC2实例，这个过程使对应用系统里的所有组件进行仿真的、实际的安装包和服务部署，进行单节点或者多节点的全量应用系统部署。在每个节点上都执行Chef代码，在Chef对应用系统的配置和部署完成之后，在对运行中的应用进行验证测试，测试包括测试相关的服务端口是否能访问，返回结果是否正常等等，Chef是可以进行测试驱动开发的，因此可以写出较细致的测试代码，从而分析本Cookbook集成测试通过与否。在测试结束了以后（最好是10分钟左右或更短），删除所有测试的虚拟机资源。&lt;/p>
&lt;p>&lt;img src="https://res.cloudinary.com/martinliu/image/upload/nutanix-logo.png"
loading="lazy"
alt="Nutanix"
>&lt;/p>
&lt;p>应该尽可能的优化这个集成测试，尽量缩短它的执行时间。可以创建专用的EC2-AMI/Nutanix/Kvm/VMWare操作系统镜像，预装所需要的Ruby环境和Chef工具。&lt;/p>
&lt;p>使用Chef Solo（不依赖chef服务器）执行Chef代码的测试，以免将临时节点也添加到了Chef服务器，同时也消除了Chef的客户端和服务器架构之间相互通讯的消耗，这个场景里其实没有使用Chef服务器的必要。使用一个名为CHEFDEV的伪环境来测试代码，而JSON文件里定义的真实环境则被保留用于正式生产环境。在创建EC2虚拟机的时候，给它们打上特定的标签，从而保持一定的可追踪性和环境的可维护性。&lt;/p>
&lt;h3 id="cookbook-release-job">Cookbook Release Job&lt;/h3>
&lt;p>这个作业的运行内容和CI Job基本一致的，而它是靠人为手工触发的，从Chef角度看，可以说：本文上述的所有描述，属于Chef风格的基础架构即代码程序的持续交付。本作业将测试成功的代码在GitHub/GitLab里打上标签，并且上传Cookbook的新版本到正式的Chef生产服务器上。&lt;/p>
&lt;p>可以想象经过多个Cookbook的build job之后，Cookbook的某个版本被发布到了生产环境中，用于环境的配置和应用的部署。本Job作业交付了IaC的开发结果到生产环境中的Chef管理服务器。&lt;/p>
&lt;p>其它IaC的基础架构持续及集成与本文描述的也应该是类似流程。&lt;/p>
&lt;h2 id="应用部署流程">应用部署流程&lt;/h2>
&lt;p>Cookbook的开发和集成完毕了以后，它的结果产物是一些列新版本的Cookbook代码，它们最终上传到Chef服务器。支持生产环境应用部署的Chef服务器与各种环境保持连接，包括测试、预发布和生产等等。&lt;/p>
&lt;p>&lt;img src="https://res.cloudinary.com/martinliu/image/upload/app-deploy-process.png"
loading="lazy"
alt="app-deploy-process"
>&lt;/p>
&lt;p>在发布过程中所使用到的制品是从Artifactory中拉取的。下面简单说下这个架构中的关键点。&lt;/p>
&lt;p>&lt;strong>Jenkins部署服务器&lt;/strong> 这是专门用于各种部署工作的Jenkins Master服务器，它和上一个步骤里Cookbook的Build服务器是不同的。它的Slave应该满足这些需求：安装了所需要Ruby环境和gem包。安装了Chef工具，并且具有能更新Chef服务器的秘钥。具有能访问各种虚拟化环境中节点的SSH秘钥。&lt;/p>
&lt;p>&lt;strong>部署作业的类型&lt;/strong> 可以对于每一个应用组（一套应用系统）设置两个部署作业：在开发环境中的，用于开发人员使用的DEV部署作业；另外是运维人员所使用的Non-Dev部署作业。在实践过程中也能发展出其他类型。&lt;/p>
&lt;p>部署人员的工作流程：&lt;/p>
&lt;ol>
&lt;li>变更Chef相关代码和配置，包括：编辑应用的data bag配置数据点，有必要的话编辑环境文件，合并代码。&lt;/li>
&lt;li>然后在Jenkins部署服务器上执行作业。&lt;/li>
&lt;/ol>
&lt;p>通过以上的流程和工具，开发、测试和运维的相关人员，如果需要部署应用了，就可以用一键式的、自助式的部署模式，将任何应用应用系统通过一键式的方式自动化的部署到各种应用环境中。&lt;/p>
&lt;p>&lt;img src="https://res.cloudinary.com/martinliu/image/upload/push-button-deploy.png"
loading="lazy"
alt="push-button-deploy"
>&lt;/p>
&lt;p>这样我们将大量各种角色人员都从事的、没有附加值的应用部署工作，彻底的消灭掉了，节省的时间可以用来做更多有意义的工作，Dev人员有更多时间编码、测试人员不需要等待时间、运维人员也降低的工作压力。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>关于基础架构的持续集成，还有下列值得参考的原则：&lt;/p>
&lt;ul>
&lt;li>尽可能的标准化：包括技术、设计和流程等方面；要能够支持环境的规模化扩展，例外是可以的，但是要尽量避免。&lt;/li>
&lt;li>所有工具最好有API：避免在某个工具，在工具链上的任何环节的脱节。&lt;/li>
&lt;li>使用多种形式的沟通路径：这个实践需要用各种方式进行宣传和推广，包括：全员大会的主题分享、每个团队的启动会议、与开发人员的随时沟通，使用文档进行知识传播和沟通。&lt;/li>
&lt;li>保持乐观，尽量发现和找到那些志同道合的早期响应者，让他们和你站在一条战线上。&lt;/li>
&lt;/ul>
&lt;h2 id="引用">引用&lt;/h2>
&lt;h3 id="参考视频">参考视频&lt;/h3>
&lt;p>&lt;a class="link" href="https://www.youtube.com/watch?v=PQ6KTRgAeMU" target="_blank" rel="noopener"
>https://www.youtube.com/watch?v=PQ6KTRgAeMU
&lt;/a>&lt;/p>
&lt;h3 id="参考书籍">参考书籍&lt;/h3>
&lt;p>&lt;img src="https://res.cloudinary.com/martinliu/image/upload/book-infrastructure-as-code.png"
loading="lazy"
>&lt;/p>
&lt;hr></description></item></channel></rss>